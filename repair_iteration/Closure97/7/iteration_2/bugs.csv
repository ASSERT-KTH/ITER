bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
2	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >>  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
3	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if  (!(lval!=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
4	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if  (!(lval  ==  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
5	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    if  (!(lval  [Delete]  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
6	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
7	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
8	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
9	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
10	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
11	[BUG]  [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
12	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
13	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  ==  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
14	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
15	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
16	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
17	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
18	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  if  (!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    if  (!(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ')'  expected	1	None	add
19	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    If  (!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
21	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
23	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
25	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
27	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MAX_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
28	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
29	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <  Integer.MAX_VALUE)||(rval  >=  Integer.MAX_VALUE  &&  rval  <  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
30	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
31	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
32	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
33	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
34	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    If(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
35	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
36	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
38	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
39	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
40	[BUG]  [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]        AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  ==  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
41	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
42	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
44	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	11	1	replace
45	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	10	None	add
46	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  If(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    If(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	10	None	add
47	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	10	None	add
48	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >  Integer.MIN_VALUE  |&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
49	[BUG]  [BUGGY]  double  rval  =  right.getDouble();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  double  rval  =  right.getDouble();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getDouble();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
50	[BUG]  [BUGGY]  double  rval  =  left.getDouble();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  double  rval  =  left.getDouble();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  left.getDouble();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
51	[BUG]  [BUGGY]  Double  rval  =  right.getDouble();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  Double  rval  =  right.getDouble();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	Double  rval  =  right.getDouble();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
52	[BUG]  [BUGGY]  double  lval  =  left.getDouble();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  double  lval  =  left.getDouble();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  lval  =  left.getDouble();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  double  rval  =  right.getRaw();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  double  rval  =  right.getRaw();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRaw();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
54	[BUG]  [BUGGY]  double  rval  =  right.getRawOffset();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  double  rval  =  right.getRawOffset();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawOffset();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
55	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	8	2	replace
56	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  ||  rval  <=  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	8	2	replace
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
58	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >=  Integer.MIN_VALUE  ||  rval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
59	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
60	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
61	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	2	2	replace
62	[BUG]  [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	2	2	replace
63	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
64	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval!=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
65	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
66	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  If(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    If(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
67	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  >>  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
69	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >=  Integer.MIN_VALUE  &&  rval  ==  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	6	1	replace
70	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
71	[BUG]  [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	6	2	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
73	[BUG]  [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
75	[BUG]  [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE)  {	  if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    	compilable	  [FE]  AssertionFailedError  	8	1	replace
76	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	10	None	add
77	[BUG]  [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [CE]  ')'  expected  [FE]    junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  [Delete]  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
79	[BUG]  [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	2	1	replace
80	[BUG]  [BUGGY]  double  rval  =  right.getNumber();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  double  rval  =  right.getNumber();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getNumber();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
81	[BUG]  [BUGGY]  double  rval  =  right.getRval();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  double  rval  =  right.getRval();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRval();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
82	[BUG]  [BUGGY]  double  rval  =  right.getRawType();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  double  rval  =  right.getRawType();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	double  rval  =  right.getRawType();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
83	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	12	2	replace
84	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)||(lval  >=  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	12	2	replace
85	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    If  (!(lval  >=  Integer.MIN_VALUE  ||  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
86	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
87	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
88	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
89	[BUG]  [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
91	[BUG]  [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  >=  Integer.MIN_VALUE  ||  lval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	4	1	replace
92	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	4	2	replace
93	[BUG]  [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]      AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if  (!(lval  <  Integer.MIN_VALUE  ||  rval  >  Integer.MAX_VALUE))  {	  if    (!(lval    >=    Integer.MIN_VALUE    ||    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	4	2	replace
94	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
95	[BUG]  [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  >=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
97	[BUG]  [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval!=  Integer.MIN_VALUE  &&  rval  <=  MAX_FOLD_NUMBER))  {	  if(!(lval    >>    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
98	[BUG]  [BUGGY]  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	add	if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
99	[BUG]  [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval  <=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    	compilable	  [FE]  junit.framework.AssertionFailedError:  Unexpected  error(s):  JSC_BITWISE_OPERAND_OUT_OF_RANGE.  Operand  out  of  range  	11	2	replace
100	[BUG]  [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(lval  ==  Integer.MIN_VALUE  &&  rval  <=  Integer.MAX_VALUE)  {  if(lval  ==  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(lval    ==    Integer.MIN_VALUE    &&    rval    <=    Integer.MAX_VALUE)    {    if(lval  ==  Integer.MIN_VALUE  |&  rval  <=  Integer.MAX_VALUE)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
101	[BUG]  [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  if(!(lval  >  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	if(!(lval    >    Integer.MIN_VALUE    &&    lval    <=    Integer.MAX_VALUE))    {    if(!(lval  >=  Integer.MIN_VALUE  &&  lval  <=  Integer.MAX_VALUE))  {	  	non-compiled	[CE]  ';'  expected	10	None	add
102	[BUG]  [BUGGY]  n  =  left.getFirstChild();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    if  (left.getType()  ==  Token.NUMBER  &&  right.getType()  ==  Token.NUMBER)  {  double  result;  double  lval  =  left.getDouble();  double  rval  =  right.getDouble();      [BUGGY]  n  =  left.getFirstChild();  [BUGGY]    error(BITWISE_OPERAND_OUT_OF_RANGE,  left);  return  n;  }    if  (!(rval  >=  0  &&  rval  <  32))  {  error(SHIFT_AMOUNT_OUT_OF_BOUNDS,  right);  return  n;  }  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	0.7071067811865475	662	662	1	replace	n  =  left.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	9	None	replace
