bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lvalInt  <  <  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  <  <  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  1;	  result    =    lvalInt    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  rvalInt  >>  lvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  rvalInt  >>  lvalInt;	  result    =    lvalInt!=    rvalInt;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
3	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  rvalInt  >>  lvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  >>  lvalInt;	  result    =    lvalInt!=    rvalInt;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
4	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
5	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;	  	compilable	  [FE]  AssertionFailedError  	10	1	add
6	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  >=  1;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  >=  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    1;    result  =  lvalInt  >=  1;	  	non-compiled	[CE]  incompatible  types	10	None	add
7	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt!=  1;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt!=  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    1;    result  =  lvalInt!=  1;	  	non-compiled	[CE]  incompatible  types	10	None	add
8	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  ==  1;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  ==  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    1;    result  =  lvalInt  ==  1;	  	non-compiled	[CE]  incompatible  types	10	None	add
9	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  [Delete]  1;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  [Delete]  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    1;    result  =  lvalInt  [Delete]  1;	  	non-compiled	[CE]  ';'  expected	10	None	add
10	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  Result  =  lvalInt  >>  1;  [CE]  cannot  find  symbol  Result  [FE]              AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  1;  Result  =  lvalInt  >>  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    1;    Result  =  lvalInt  >>  1;	  	non-compiled	[CE]  cannot  find  symbol  Result	10	None	add
11	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  [PATCH]  1;  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  1;  result  =  lvalInt  [PATCH]  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    1;    result  =  lvalInt  [PATCH]  1;	  	non-compiled	[CE]  ';'  expected	10	None	add
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  -  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  -  rvalInt;	  result    =    lvalInt    >=    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
13	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  -  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  rvalInt;	  result    =    lvalInt    >=    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  &  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  &  rvalInt;	  result    =    lvalInt    >=    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
15	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  &  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  &  rvalInt;	  result    =    lvalInt    >=    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
16	[BUG]  [BUGGY]  result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  MAX_FOLD_NUMBER;	  result    =    lvalInt    >>    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  >  expected	9	None	replace
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  +  MAX_FOLD_NUMBER;	  result    =    lvalInt    >>    >    MAX_FOLD_NUMBER;    	compilable	  [FE]  AssertionFailedError  	9	1	replace
18	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  MAX_FOLD_NUMBER;	  result    =    lvalInt    >>    >    MAX_FOLD_NUMBER;    	compilable	  [FE]  AssertionFailedError  	9	1	replace
19	[BUG]  [BUGGY]  result  =  lvalIndex  >>  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]                AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalIndex  >>  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalIndex  >>  rvalInt;	  result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	6	None	replace
20	[BUG]  [BUGGY]  result  =  lvalIndex  >=  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalIndex  >=  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalIndex  >=  rvalInt;	  result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	6	None	replace
21	[BUG]  [BUGGY]  result  =  rvalInt  ==  lvalInt;  [CE]  incompatible  types  [FE]                  AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  rvalInt  ==  lvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  ==  lvalInt;	  result    =    lvalInt    ==    rvalInt;    	non-compiled	[CE]  incompatible  types	7	None	replace
22	[BUG]  [BUGGY]  result  =  rvalInt  >=  lvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  rvalInt  >=  lvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  >=  lvalInt;	  result    =    lvalInt    >=    rvalInt;    	non-compiled	[CE]  incompatible  types	3	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
24	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	1	1	add
25	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	1	None	add
26	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt!=  rvalInt;	  	non-compiled	[CE]  incompatible  types	1	None	add
27	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  ==  rvalInt;	  	non-compiled	[CE]  incompatible  types	1	None	add
28	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  [Delete]  rvalInt;	  	non-compiled	[CE]  ';'  expected	1	None	add
29	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]              AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalDouble  >>  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	1	None	add
30	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]                AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    rvalInt;    Result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	1	None	add
31	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
32	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
33	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	13	None	add
34	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	13	None	add
35	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	13	None	add
36	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()).toString());  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()).toString());  }  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()).toString());  }	  	non-compiled	[CE]  	13	None	add
37	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getString()));  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getString()));  }  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getString()));  }	  	non-compiled	[CE]  	13	None	add
38	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  result  =  lvalInt  +  rvalInt;  }  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  result  =  lvalInt  +  rvalInt;  }  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  result  =  lvalInt  +  rvalInt;  }	  	non-compiled	[CE]  'else'  without  'if'	13	None	add
39	[BUG]  [BUGGY]  result  =  lval  <  <  rvalInt;  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lval  <  <  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  rvalInt;	  result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  >  expected	2	None	replace
40	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  break;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  <  <  rvalInt;  break;	      	non-compiled	[CE]  >  expected	8	None	replace
41	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  break;	      	non-compiled	[CE]  >  expected	8	None	replace
42	[BUG]  [BUGGY]  result  =  lval  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lval  <  <  rvalInt;  break;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  rvalInt;  break;	      	non-compiled	[CE]  >  expected	8	None	replace
43	[BUG]  [BUGGY]  result  =  rvalInt!=  lvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  rvalInt!=  lvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt!=  lvalInt;	  result    =    lvalInt!=    rvalInt;    	non-compiled	[CE]  incompatible  types	5	None	replace
44	[BUG]  [BUGGY]  result  =  lvalInt  >  rvalInt;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >  rvalInt;	  result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  incompatible  types	6	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  %  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  %  rvalInt;	  result    =    lvalInt    >=    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
46	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  %  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  %  rvalInt;	  result    =    lvalInt    >=    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  -  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  -  1;	  result    =    lvalInt    >=    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
48	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  -  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  1;	  result    =    lvalInt    >=    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	12	1	replace
49	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalDouble  <  <  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  <  <  rvalInt;	      	non-compiled	[CE]  >  expected	8	None	replace
50	[BUG]  [BUGGY]  result  =  lvalHorizontal  <  <  rvalInt;  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalHorizontal  <  <  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  <  <  rvalInt;	      	non-compiled	[CE]  >  expected	8	None	replace
51	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  Result  =  lvalInt  +  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  Result  =  lvalInt  +  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    Result  =  lvalInt  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	13	None	add
52	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getLastChild();  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getLastChild();  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt.getLastChild();	  	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	add
53	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt.intValue();	  	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	add
54	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt.getParent();	  	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	add
55	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt.getType();	  	non-compiled	[CE]  int  cannot  be  dereferenced	13	None	add
56	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalOutt;  [CE]  cannot  find  symbol  rvalOutt  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalOutt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalOutt;	  	non-compiled	[CE]  cannot  find  symbol  rvalOutt	1	None	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  +  1;	  result    =    lvalInt    +    rvalInt;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
58	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  1;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  1;	  result    =    lvalInt    +    rvalInt;    	compilable	  [FE]  AssertionFailedError  	14	1	replace
59	[BUG]  [BUGGY]  result  =  lvalInt  -  1  <  <  rvalInt;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  -  1  <  <  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  1  <  <  rvalInt;	  result    =    lvalInt    >=    <    rvalInt;    	non-compiled	[CE]  >  expected	12	None	replace
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
61	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
63	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	13	1	add
64	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalIndex;  [CE]  cannot  find  symbol  rvalIndex  [FE]        AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalIndex;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalIndex;	  	non-compiled	[CE]  cannot  find  symbol  rvalIndex	13	None	add
65	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lvalDouble  >>  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  >>  rvalInt;	  result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	6	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lval  +  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lval  +  rvalInt;	      	compilable	  [FE]  AssertionFailedError  	8	1	replace
67	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]    case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:        [BUGGY]  result  =  lval  +  rvalInt;  [BUGGY]    break;  default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  +  rvalInt;	      	compilable	  [FE]  AssertionFailedError  	8	1	replace
