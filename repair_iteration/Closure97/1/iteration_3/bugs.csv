bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt.intValue();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
2	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
3	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.intValue();    	non-compiled	[CE]  incompatible  types	53	None	replace
4	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.intValue();    	non-compiled	[CE]  >  expected	53	None	replace
5	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.intValue();    	non-compiled	[CE]  incompatible  types	53	None	replace
6	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  *  rvalInt;  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  *  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    *    rvalInt;    	non-compiled	[CE]  >  expected	61	None	replace
7	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  rvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  rvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    rvalInt    +    rvalInt;    	non-compiled	[CE]  incompatible  types	63	None	replace
8	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  rvalInt  +  rvalInt;  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  result  =  rvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    rvalInt    +    rvalInt;    	non-compiled	[CE]  >  expected	63	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    rvalInt    +    rvalInt;    	compilable	  [FE]  AssertionFailedError  	63	1	replace
10	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    rvalInt    +    rvalInt;    	compilable	  [FE]  AssertionFailedError  	63	1	replace
11	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  result  =  rvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  rvalInt;  result  =  rvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    rvalInt    +    rvalInt;    	non-compiled	[CE]  incompatible  types	63	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
13	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
14	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	12	None	add
15	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	12	None	add
16	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	12	None	add
17	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()).toString());  }  [CE]  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()).toString());  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()).toString());  }	  	non-compiled	[CE]  	12	None	add
18	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	12	None	add
19	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType())  [CE]  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType())  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt;  }  else  if(NodeUtil.isFunctionDeclaration(n))  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType())	  	non-compiled	[CE]  	12	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  -  1  +  rvalInt;	  result    =    lvalInt    -    1    <    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	59	1	replace
21	[BUG]  [BUGGY]  result  =  lvalInt  -  1  +  rvalInt;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  1  +  rvalInt;	  result    =    lvalInt    -    1    <    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	59	1	replace
22	[BUG]  [BUGGY]  result  =  lvalInt  -  1  <  <  4;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1  <  <  4;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  1  <  <  4;	  result    =    lvalInt    -    1    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
23	[BUG]  [BUGGY]  result  =  lvalInt  +  1  <  <  rvalInt;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1  <  <  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  1  <  <  rvalInt;	  result    =    lvalInt    -    1    <    <    rvalInt;    	non-compiled	[CE]  >  expected	59	None	replace
24	[BUG]  [BUGGY]  result  =  lvalInt  -  1  <  <  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1  <  <  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  1  <  <  2;	  result    =    lvalInt    -    1    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
25	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalIndex;  [CE]  cannot  find  symbol  rvalIndex  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalIndex;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalIndex;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	non-compiled	[CE]  cannot  find  symbol  rvalIndex	64	None	replace
26	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalIndex;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalIndex;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalIndex;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	non-compiled	[CE]  incompatible  types	64	None	replace
27	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  +  rvalIndex;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  +  rvalIndex;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  +  rvalIndex;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	non-compiled	[CE]  >  expected	64	None	replace
28	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  +  rvalIndex;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  +  rvalIndex;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  +  rvalIndex;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	non-compiled	[CE]  ';'  expected	64	None	replace
29	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalDouble;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalDouble;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	64	None	replace
30	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [CE]  unreachable  statement  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  unreachable  statement	41	None	replace
31	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [CE]  incompatible  types  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	41	None	replace
32	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  unreachable  statement	41	None	replace
33	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [CE]  incompatible  types  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	41	None	replace
34	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  break;  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  [Delete]  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  ';'  expected	41	None	replace
35	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalInt;  break;  [CE]  incompatible  types  [FE]                                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  ==  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  ==  rvalInt;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	41	None	replace
36	[BUG]  [BUGGY]  result  =  lvalInt  >=  1;  [CE]  incompatible  types  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  1;	  result    =    lvalInt    >>    1;    result    =    lvalInt    >=    1;    	non-compiled	[CE]  incompatible  types	6	None	replace
37	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt!=    rvalInt;    	non-compiled	[CE]  >  expected	26	None	replace
38	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt!=  rvalInt;  [CE]  >  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt!=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt!=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt!=    rvalInt;    	non-compiled	[CE]  >  expected	26	None	replace
39	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    Result    =    lvalInt    +    rvalInt;    	non-compiled	[CE]  incompatible  types	51	None	replace
40	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  +  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    Result    =    lvalInt    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	51	None	replace
41	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  +  rvalInt;  [CE]  >  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    Result    =    lvalInt    +    rvalInt;    	non-compiled	[CE]  >  expected	51	None	replace
42	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  Result  =  lvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  rvalInt;  Result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  rvalInt;  Result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    Result    =    lvalInt    +    rvalInt;    	non-compiled	[CE]  incompatible  types	51	None	replace
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lval  +  rvalInt  +  1;	  result    =    lval    +    rvalInt;    	compilable	  [FE]  AssertionFailedError  	67	1	replace
44	[BUG]  [BUGGY]  result  =  lval  +  rvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  +  rvalInt  +  1;	  result    =    lval    +    rvalInt;    	compilable	  [FE]  AssertionFailedError  	67	1	replace
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt  >>  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    rvalInt    >>    lvalInt;    result  =  rvalInt  >>  lvalInt;	  	compilable	  [FE]  AssertionFailedError  	2	1	add
46	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt  >>  lvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt  >>  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    rvalInt    >>    lvalInt;    result  =  rvalInt  >>  lvalInt;	  	compilable	  [FE]  AssertionFailedError  	2	1	add
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >>  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    rvalInt    >>    lvalInt;    result  =  lvalInt  >>  lvalInt;	  	compilable	  [FE]  AssertionFailedError  	2	1	add
48	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >>  lvalInt;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >>  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    rvalInt    >>    lvalInt;    result  =  lvalInt  >>  lvalInt;	  	compilable	  [FE]  AssertionFailedError  	2	1	add
49	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt  >=  lvalInt;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt  >=  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    rvalInt    >>    lvalInt;    result  =  rvalInt  >=  lvalInt;	  	non-compiled	[CE]  incompatible  types	2	None	add
50	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt!=  lvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt!=  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    rvalInt    >>    lvalInt;    result  =  rvalInt!=  lvalInt;	  	non-compiled	[CE]  incompatible  types	2	None	add
51	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >=  lvalInt;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >=  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    rvalInt    >>    lvalInt;    result  =  lvalInt  >=  lvalInt;	  	non-compiled	[CE]  incompatible  types	2	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    rvalInt    >>    lvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	2	1	add
53	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    rvalInt    >>    lvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	2	1	add
54	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt  ==  lvalInt;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  rvalInt  ==  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    rvalInt    >>    lvalInt;    result  =  rvalInt  ==  lvalInt;	  	non-compiled	[CE]  incompatible  types	2	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;	  	compilable	  [FE]  AssertionFailedError  	47	1	add
56	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;	  	compilable	  [FE]  AssertionFailedError  	47	1	add
57	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	47	None	add
58	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	47	None	add
59	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.VAR)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.VAR)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.VAR)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	47	None	add
60	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.VAR)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.VAR)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.VAR)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	47	None	add
61	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	47	None	add
62	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	47	None	add
63	[BUG]  [BUGGY]  result  =  lvalDouble  -  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  -  rvalInt;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	49	None	replace
64	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalDouble;  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalDouble;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalDouble;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  >  expected	49	None	replace
65	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rval;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rval;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  >  expected	49	None	replace
66	[BUG]  [BUGGY]  result  =  lvalDouble  &  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  &  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  &  rvalInt;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	49	None	replace
67	[BUG]  [BUGGY]  Result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    1;    Result    =    lvalInt    >>    1;    	non-compiled	[CE]  cannot  find  symbol  Result	10	None	replace
68	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalOutt;    	non-compiled	[CE]  incompatible  types	56	None	replace
69	[BUG]  [BUGGY]  result  =  lvalInt  >>  n;  result  =  lvalInt  >>  n;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  n;  result  =  lvalInt  >>  n;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  n;  result  =  lvalInt  >>  n;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalOutt;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	56	None	replace
70	[BUG]  [BUGGY]  result  =  lvalInt  >=  n;  result  =  lvalInt  >>  n;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  n;  result  =  lvalInt  >>  n;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  n;  result  =  lvalInt  >>  n;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalOutt;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	56	None	replace
71	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    %    rvalInt;    result  =  lvalInt  %  rvalInt;	  	compilable	  [FE]  RuntimeException  	45	1	add
72	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    result  =  lvalInt  %  rvalInt;	  	compilable	  [FE]  RuntimeException  	45	1	add
73	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  Result  =  lvalInt  %  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  Result  =  lvalInt  %  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    Result  =  lvalInt  %  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	45	None	add
74	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt.getLastChild();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    result  =  lvalInt  %  rvalInt.getLastChild();	  	non-compiled	[CE]  int  cannot  be  dereferenced	45	None	add
75	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    result  =  lvalInt  %  rvalInt.getParent();	  	non-compiled	[CE]  int  cannot  be  dereferenced	45	None	add
76	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  =  lvalInt  %  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  =  lvalInt  %  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    =  lvalInt  %  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
77	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    result  =  lvalInt  %  rvalInt.intValue();	  	non-compiled	[CE]  int  cannot  be  dereferenced	45	None	add
78	[BUG]  [BUGGY]  result  =  lvalInt  <  <  4;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  4;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  4;	  result    =    lvalInt    <    <    MAX_FOLD_NUMBER;    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  &  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  &  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
80	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  &  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  &  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  &  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
81	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  Result  =  lvalInt  &  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  Result  =  lvalInt  &  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    Result  =  lvalInt  &  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	14	None	add
82	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  -  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
83	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  -  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  -  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  |  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  |  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
85	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  |  rvalInt;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  |  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  |  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
86	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  results  =  lvalInt  &  rvalInt;  [CE]  cannot  find  symbol  results  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  results  =  lvalInt  &  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    results  =  lvalInt  &  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  results	14	None	add
87	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  =  lvalInt  &  rvalInt;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  =  lvalInt  &  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    =  lvalInt  &  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	14	None	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
89	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	14	1	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	23	1	add
91	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	23	1	add
92	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  incompatible  types	23	None	add
93	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  incompatible  types	23	None	add
94	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	23	None	add
95	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;	  	non-compiled	[CE]  incompatible  types	23	None	add
96	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  ==  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  incompatible  types	23	None	add
97	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;	  	non-compiled	[CE]  incompatible  types	23	None	add
98	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
99	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
100	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
101	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
102	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
103	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
104	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt;	  	non-compiled	[CE]  incompatible  types	31	None	add
105	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalDouble  +  rvalInt;  result  =  lvalDouble  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	31	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
107	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
108	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt;	  	non-compiled	[CE]  incompatible  types	31	None	add
109	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
110	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER;	  	compilable	  [FE]  AssertionFailedError  	17	1	add
111	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  Result  =  lvalInt  +  MAX_FOLD_NUMBER;  [CE]  cannot  find  symbol  Result  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  Result  =  lvalInt  +  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    Result  =  lvalInt  +  MAX_FOLD_NUMBER;	  	non-compiled	[CE]  cannot  find  symbol  Result	17	None	add
112	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.getString();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.getString();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER.getString();	  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	add
113	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.intValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER.intValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	add
114	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.getValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.getValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER.getValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	add
115	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.getType();  [CE]  double  cannot  be  dereferenced  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.getType();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER.getType();	  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	add
116	[BUG]  [BUGGY]  result  =  lval  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  >  expected	24	None	replace
117	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  >  expected  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  >  expected	24	None	replace
118	[BUG]  [BUGGY]  result  =  lvalIndex  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalIndex  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalIndex  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	24	None	replace
119	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getParent();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
120	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getParent();    	non-compiled	[CE]  incompatible  types	54	None	replace
121	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt.getParent();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getParent();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
122	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getParent();    	non-compiled	[CE]  incompatible  types	54	None	replace
123	[BUG]  [BUGGY]  result  =  lvalDouble  -  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  -  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  -  rvalInt;  break;	  result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	40	None	replace
124	[BUG]  [BUGGY]  result  =  lvalDouble  &  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  &  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  &  rvalInt;  break;	  result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	40	None	replace
125	[BUG]  [BUGGY]  result  =  lvalIndex  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalIndex  <  <  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalIndex  <  <  rvalInt;  break;	  result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	40	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
127	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
128	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
129	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
130	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
131	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  rvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
132	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  result  =  rvalDouble  +  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  result  =  rvalDouble  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalDouble  +  rvalInt;  result  =  rvalDouble  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	62	None	add
133	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  rvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  >=  rvalInt;  result  =  rvalInt  +  rvalInt;	  	non-compiled	[CE]  incompatible  types	62	None	add
134	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  rvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt!=  rvalInt;  result  =  rvalInt  +  rvalInt;	  	non-compiled	[CE]  incompatible  types	62	None	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
136	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
137	[BUG]  [BUGGY]  result  =  lval  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  <  <  4;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  4;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
138	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  break;  [CE]  unreachable  statement  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  +  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  unreachable  statement	42	None	replace
139	[BUG]  [BUGGY]  result  =  lval  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  <  <  1;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  1;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
140	[BUG]  [BUGGY]  result  =  lval  <  <  2;  break;  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  <  <  2;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  2;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
141	[BUG]  [BUGGY]  result  =  lvalInt  <  <  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  2;	  result    =    lvalInt    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
142	[BUG]  [BUGGY]  result  =  lvalInt  <  <  3;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  3;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  3;	  result    =    lvalInt    <    <    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
143	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt.getLastChild();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
144	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt,  rvalInt.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt,  rvalInt.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt,  rvalInt.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
145	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt.getFirstChild();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt.getFirstChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt.getFirstChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
146	[BUG]  [BUGGY]  result  =  rvalInt  +  lvalInt.getLastChild();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  +  lvalInt.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  +  lvalInt.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  int  cannot  be  dereferenced	52	None	replace
147	[BUG]  [BUGGY]  Result  =  lvalInt  +  rvalInt.getLastChild();  [CE]  cannot  find  symbol  Result  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  Result  =  lvalInt  +  rvalInt.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	Result  =  lvalInt  +  rvalInt.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  cannot  find  symbol  Result	52	None	replace
148	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  >  expected	30	None	replace
149	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  incompatible  types	30	None	replace
150	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  >=  rvalInt;  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  >=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt  >=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  >  expected	30	None	replace
151	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt!=  rvalInt;  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt!=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalInt;  Result  =  lvalInt!=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  >  expected	30	None	replace
152	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >=  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	30	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  rvalInt  -  1;	  result    =    lvalInt    -    1;    	compilable	  [FE]  AssertionFailedError  	48	1	replace
154	[BUG]  [BUGGY]  result  =  rvalInt  -  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  -  1;	  result    =    lvalInt    -    1;    	compilable	  [FE]  AssertionFailedError  	48	1	replace
155	[BUG]  [BUGGY]  result  =  lvalHorizontal  +  rvalInt;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  +  rvalInt;	  result    =    lvalHorizontal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	50	None	replace
156	[BUG]  [BUGGY]  result  =  lvalHorizontal  -  rvalInt;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  -  rvalInt;	  result    =    lvalHorizontal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	50	None	replace
157	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalHorizontal;  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalHorizontal;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalHorizontal;	  result    =    lvalHorizontal    <    <    rvalInt;    	non-compiled	[CE]  >  expected	50	None	replace
158	[BUG]  [BUGGY]  result  =  lvalHorizontal  <  <  4;  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal  <  <  4;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  <  <  4;	  result    =    lvalHorizontal    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
159	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;	  	compilable	  [FE]  AssertionFailedError  	4	1	add
160	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;	  	compilable	  [FE]  AssertionFailedError  	4	1	add
161	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >=  1;  result  =  lvalInt  >>  1;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >=  1;  result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt  >=  1;  result  =  lvalInt  >>  1;	  	non-compiled	[CE]  incompatible  types	4	None	add
162	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt  >=  1;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt  >=  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >=  1;	  	non-compiled	[CE]  incompatible  types	4	None	add
163	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt!=  1;  result  =  lvalInt  >>  1;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt!=  1;  result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt!=  1;  result  =  lvalInt  >>  1;	  	non-compiled	[CE]  incompatible  types	4	None	add
164	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt!=  1;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt!=  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt!=  1;	  	non-compiled	[CE]  incompatible  types	4	None	add
165	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  ==  1;  result  =  lvalInt  >>  1;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  ==  1;  result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt  ==  1;  result  =  lvalInt  >>  1;	  	non-compiled	[CE]  incompatible  types	4	None	add
166	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt  ==  1;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  result  =  lvalInt  ==  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  ==  1;	  	non-compiled	[CE]  incompatible  types	4	None	add
167	[BUG]  [BUGGY]  result  =  lval  <  <  4;  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  <  <  4;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  4;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
168	[BUG]  [BUGGY]  result  =  lval  <  <  1;  [CE]  illegal  start  of  type  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  <  <  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  1;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
169	[BUG]  [BUGGY]  result  =  lval  <  <  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  <  <  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lval  <  <  2;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
170	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
171	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
172	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	60	None	add
173	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
174	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  lvalInt  *  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  *  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
175	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  results  =  lvalInt  *  rvalInt;  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  results  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    result  =  lvalInt  +  rvalInt;  results  =  lvalInt  *  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  results	60	None	add
176	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    =  lvalInt  +  rvalInt;  result  =  lvalInt  *  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
177	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
178	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
179	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	66	None	add
180	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	66	None	add
181	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	66	None	add
182	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	66	None	add
183	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	66	None	add
184	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getString()));  }  [CE]  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getString()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getString()));  }	  	non-compiled	[CE]  	66	None	add
185	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
186	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
187	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	57	None	add
188	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	57	None	add
189	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  }	  	non-compiled	[CE]  	57	None	add
190	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  if(n.getType()  ==  Token.NAME)  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	57	None	add
191	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]              AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	57	None	add
192	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  case  Token.LSH:  result  =  lvalInt  <  <  rvalInt;  break;	  	non-compiled	[CE]  >  expected	57	None	add
193	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt.getType();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getType();    	non-compiled	[CE]  int  cannot  be  dereferenced	55	None	replace
194	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt.getType();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getType();    	non-compiled	[CE]  incompatible  types	55	None	replace
195	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt.getType();  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt.getType();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt.getType();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getType();    	non-compiled	[CE]  int  cannot  be  dereferenced	55	None	replace
196	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  rvalInt;  result  =  lvalInt  +  rvalInt.getType();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getType();    	non-compiled	[CE]  incompatible  types	55	None	replace
197	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  +  rvalInt.getType();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getType();    	non-compiled	[CE]  ';'  expected	55	None	replace
198	[BUG]  [BUGGY]  result  =  rvalInt  >  lvalInt;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >  lvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  >  lvalInt;	  result    =    lvalInt    >    rvalInt;    	non-compiled	[CE]  incompatible  types	44	None	replace
199	[BUG]  [BUGGY]  result  =  lvalString  <  <  rvalInt;  [CE]  >  expected  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalString  <  <  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalString  <  <  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt;    }    else    if(n.getType()    ==    Token.NAME)    {    result    =    lvalInt    +    rvalInt;    }    	non-compiled	[CE]  >  expected	38	None	replace
200	[BUG]  [BUGGY]  result  =  lvalInt  >>  MAX_FOLD_NUMBER;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  MAX_FOLD_NUMBER;	  result    =    lvalInt    +    MAX_FOLD_NUMBER;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	18	None	replace
201	[BUG]  [BUGGY]  result  =  lvalString  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalString  <  <  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalString  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	42	None	replace
202	[BUG]  [BUGGY]  result  =  lvalInt  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  4;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  4;  break;	  result    =    lvalInt    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
203	[BUG]  [BUGGY]  result  =  lvalInt  >>  1,  rvalInt;  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  1,  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  1,  rvalInt;	  result    =    lvalInt    >>    1;    result    =    lvalInt    >=    1;    	non-compiled	[CE]  ';'  expected	6	None	replace
204	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  >>  2;	  result    =    lvalInt    >>    1;    result    =    lvalInt    >=    1;    	compilable	  [FE]  AssertionFailedError  	6	1	replace
205	[BUG]  [BUGGY]  result  =  lvalInt  >>  2;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  2;	  result    =    lvalInt    >>    1;    result    =    lvalInt    >=    1;    	compilable	  [FE]  AssertionFailedError  	6	1	replace
206	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  rvalInt;  Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  incompatible  types	30	None	replace
207	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  [Delete]  rvalInt;  Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  ';'  expected	30	None	replace
208	[BUG]  [BUGGY]  result  =  lvalWordIndex  >>  rvalInt;  [CE]  cannot  find  symbol  lvalWordIndex  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalWordIndex  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalWordIndex  >>  rvalInt;	  result    =    lvalIndex    >=    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalWordIndex	20	None	replace
209	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  [Delete]  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  ';'  expected	23	None	add
210	[BUG]  [BUGGY]  result  =  lvalDouble  +  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  +  rvalInt;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	49	None	replace
211	[BUG]  [BUGGY]  result  =  lvalDouble  %  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  %  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  %  rvalInt;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	49	None	replace
212	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  2;  result  =  lvalInt  >>  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  >>  2;  result  =  lvalInt  >>  2;	  result    =    lvalInt    >>    1;    result    =    lvalInt    >>    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
213	[BUG]  [BUGGY]  result  =  lvalInt  >>  2;  result  =  lvalInt  >>  2;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  2;  result  =  lvalInt  >>  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  2;  result  =  lvalInt  >>  2;	  result    =    lvalInt    >>    1;    result    =    lvalInt    >>    1;    	compilable	  [FE]  AssertionFailedError  	5	1	replace
214	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.getName();  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.getName();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER.getName();	  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	add
215	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.toString();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.toString();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER.toString();	  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	add
216	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  >>  rvalInt  +  1;	  result    =    lvalInt    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
217	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt  +  1;	  result    =    lvalInt    +    1;    	compilable	  [FE]  AssertionFailedError  	58	1	replace
218	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  1;  [CE]  cannot  find  symbol  Result  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  1;	  result    =    lvalInt    >>    1;    Result    =    lvalInt    >>    1;    	non-compiled	[CE]  cannot  find  symbol  Result	10	None	replace
219	[BUG]  [BUGGY]  result  =  lvalInt  >>  2;  Result  =  lvalInt  >>  2;  [CE]  cannot  find  symbol  Result  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  2;  Result  =  lvalInt  >>  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  2;  Result  =  lvalInt  >>  2;	  result    =    lvalInt    >>    1;    Result    =    lvalInt    >>    1;    	non-compiled	[CE]  cannot  find  symbol  Result	10	None	replace
220	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  >>  1;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  Result  =  lvalInt  >>  1;	  result    =    lvalInt    >>    1;    Result    =    lvalInt    >>    1;    	non-compiled	[CE]  incompatible  types	10	None	replace
221	[BUG]  [BUGGY]  result  =  lvalInt  +  left.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  left.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  left.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
222	[BUG]  [BUGGY]  result  =  lvalInt  +  right.getLastChild();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  right.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  right.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	52	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
224	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
225	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  Result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  Result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    Result  =  lvalInt  +  rvalInt;  result  =  rvalInt  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	62	None	add
226	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  rvalInt  +  lvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  rvalInt  +  lvalInt;  result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
227	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  rvalInt  +  lvalInt;  result  =  rvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  rvalInt  +  lvalInt;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  rvalInt  +  lvalInt;  result  =  rvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
228	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  rvalIndex;  result  =  rvalInt  +  rvalInt;  [CE]  cannot  find  symbol  rvalIndex  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  rvalIndex;  result  =  rvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  rvalIndex;  result  =  rvalInt  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  rvalIndex	62	None	add
229	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	compilable	  [FE]  AssertionFailedError  	24	1	replace
230	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	compilable	  [FE]  AssertionFailedError  	24	1	replace
231	[BUG]  [BUGGY]  result  =  lvalInt  <  <  ;  result  =  lvalInt  >>  rvalInt;  [CE]  illegal  start  of  type  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  ;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  ;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
232	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  *  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    *    rvalInt;    	compilable	  [FE]  AssertionFailedError  	61	1	replace
233	[BUG]  [BUGGY]  result  =  lvalInt  *  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  *  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    *    rvalInt;    	compilable	  [FE]  AssertionFailedError  	61	1	replace
234	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	31	None	add
235	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalOutt;  result  =  lvalInt  +  rvalInt;  [CE]  cannot  find  symbol  rvalOutt  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalOutt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalOutt;  result  =  lvalInt  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  rvalOutt	31	None	add
236	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalIndex;  result  =  lvalInt  +  rvalInt;  [CE]  cannot  find  symbol  rvalIndex  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalIndex;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalIndex;  result  =  lvalInt  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  rvalIndex	31	None	add
237	[BUG]  [BUGGY]  result  =  lvalWord  >>  rvalInt;  [CE]  cannot  find  symbol  lvalWord  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalWord  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalWord  >>  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalWord	65	None	replace
238	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalDouble;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  >>  lvalDouble;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	65	None	replace
239	[BUG]  [BUGGY]  result  =  lvalString  >>  rvalInt;  [CE]  cannot  find  symbol  lvalString  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalString  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalString  >>  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalString	65	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rval;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  +  rval;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
241	[BUG]  [BUGGY]  result  =  lvalInt  +  rval;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rval;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rval;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
242	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalIndex;  [CE]  cannot  find  symbol  rvalIndex  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalIndex;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalIndex;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	non-compiled	[CE]  cannot  find  symbol  rvalIndex	64	None	replace
243	[BUG]  [BUGGY]  result  =  lvalInt  >  MAX_FOLD_NUMBER;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >  MAX_FOLD_NUMBER;	  result    =    lvalInt    >    rvalInt;    	non-compiled	[CE]  incompatible  types	44	None	replace
244	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalDouble;  break;  [CE]  >  expected  [FE]                        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rvalDouble;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rvalDouble;  break;	  result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	40	None	replace
245	[BUG]  [BUGGY]  result  =  lvalDouble  +  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  +  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  +  rvalInt;  break;	  result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	40	None	replace
246	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  <  <  rval;  break;	  result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	40	None	replace
247	[BUG]  [BUGGY]  result  =  lvalDouble  %  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  %  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  %  rvalInt;  break;	  result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	40	None	replace
248	[BUG]  [BUGGY]  result  =  rvalInt  +  lvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  +  lvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  +  lvalInt.intValue();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.intValue();    	non-compiled	[CE]  int  cannot  be  dereferenced	53	None	replace
249	[BUG]  [BUGGY]  result  =  lvalInt  +  left.intValue();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  left.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  left.intValue();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.intValue();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
250	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  results  =  lvalInt  %  rvalInt;  [CE]  cannot  find  symbol  results  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  results  =  lvalInt  %  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    results  =  lvalInt  %  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  results	45	None	add
251	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt.intValue;  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  %  rvalInt.intValue;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    result  =  lvalInt  %  rvalInt.intValue;	  	non-compiled	[CE]  int  cannot  be  dereferenced	45	None	add
252	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  Result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  [CE]  cannot  find  symbol  Result  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  Result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    Result  =  lvalInt  >>  1;  result  =  lvalInt  >>  1;	  	non-compiled	[CE]  cannot  find  symbol  Result	4	None	add
253	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  Result  =  lvalInt  -  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  Result  =  lvalInt  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    Result  =  lvalInt  -  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	12	None	add
254	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt.getLastChild();  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt.getLastChild();	  	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	add
255	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt.getParent();	  	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	add
256	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  results  =  lvalInt  -  rvalInt;  [CE]  cannot  find  symbol  results  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  results  =  lvalInt  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    results  =  lvalInt  -  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  results	12	None	add
257	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt.getFirstChild();  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  -  rvalInt.getFirstChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  -  rvalInt.getFirstChild();	  	non-compiled	[CE]  int  cannot  be  dereferenced	12	None	add
258	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  &  rvalInt.getLastChild();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  &  rvalInt.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  &  rvalInt.getLastChild();	  	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	add
259	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  &  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  rvalInt;  result  =  lvalInt  &  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    &    rvalInt;    result  =  lvalInt  &  rvalInt.getParent();	  	non-compiled	[CE]  int  cannot  be  dereferenced	14	None	add
260	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  -  MAX_FOLD_NUMBER;	  result    =    lvalInt    <    <    MAX_FOLD_NUMBER;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
261	[BUG]  [BUGGY]  result  =  lvalInt  -  MAX_FOLD_NUMBER;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  MAX_FOLD_NUMBER;	  result    =    lvalInt    <    <    MAX_FOLD_NUMBER;    	compilable	  [FE]  AssertionFailedError  	16	1	replace
262	[BUG]  [BUGGY]  result  =  lvalInt  >=  MAX_FOLD_NUMBER;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  MAX_FOLD_NUMBER;	  result    =    lvalInt    <    <    MAX_FOLD_NUMBER;    	non-compiled	[CE]  incompatible  types	16	None	replace
263	[BUG]  [BUGGY]  result  =  lvalInt  &  MAX_FOLD_NUMBER;  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  &  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  &  MAX_FOLD_NUMBER;	  result    =    lvalInt    <    <    MAX_FOLD_NUMBER;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	16	None	replace
264	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  rvalInt  >>  1;	  result    =    lvalInt    >>    1;    result    =    lvalInt!=    1;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
265	[BUG]  [BUGGY]  result  =  rvalInt  >>  1;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  rvalInt  >>  1;	  result    =    lvalInt    >>    1;    result    =    lvalInt!=    1;    	compilable	  [FE]  AssertionFailedError  	7	1	replace
266	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
267	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  *  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    *    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	60	1	add
268	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  -  rvalInt  +  1;	  result    =    lvalInt    -    rvalInt;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
269	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  rvalInt  +  1;	  result    =    lvalInt    -    rvalInt;    	compilable	  [FE]  AssertionFailedError  	13	1	replace
270	[BUG]  [BUGGY]  result  =  lvalHorizontal  &  rvalInt;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal  &  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  &  rvalInt;	  result    =    lvalHorizontal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	50	None	replace
271	[BUG]  [BUGGY]  result  =  lvalHorizontal  %  rvalInt;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal  %  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  %  rvalInt;	  result    =    lvalHorizontal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	50	None	replace
272	[BUG]  [BUGGY]  result  =  lvalHorizontal  >>  rvalInt;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  >>  rvalInt;	  result    =    lvalHorizontal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	50	None	replace
273	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(left.getType()));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(left.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(left.getType()));	  	non-compiled	[CE]  	57	None	add
274	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(n.getType()));	  	non-compiled	[CE]  	57	None	add
275	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(right.getType()));  [CE]  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(right.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  type: "  +  Node.tokenToName(right.getType()));	  	non-compiled	[CE]  	57	None	add
276	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(left.getType()));  [CE]  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(left.getType()));  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  1;  }  else  {  throw  new  AssertionError( "Unknown  name: "  +  Node.tokenToName(left.getType()));	  	non-compiled	[CE]  	57	None	add
277	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalOutt;  [CE]  incompatible  types  [FE]        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalOutt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalOutt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalOutt;    	non-compiled	[CE]  incompatible  types	56	None	replace
278	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalOutt;  [CE]  cannot  find  symbol  rvalOutt  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalOutt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalOutt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalOutt;    	non-compiled	[CE]  cannot  find  symbol  rvalOutt	56	None	replace
279	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalDouble  >>  rvalInt;  [CE]  incompatible  types  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalDouble  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalDouble  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  incompatible  types	29	None	replace
280	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  %  rvalInt  +  1;	  result    =    lvalInt    %    rvalInt;    	compilable	  [FE]  AssertionFailedError  	46	1	replace
281	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  %  rvalInt  +  1;	  result    =    lvalInt    %    rvalInt;    	compilable	  [FE]  AssertionFailedError  	46	1	replace
282	[BUG]  [BUGGY]  result  =  lvalInt  +  left.getParent();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  left.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  left.getParent();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getParent();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	54	None	replace
283	[BUG]  [BUGGY]  result  =  lvalInt  +  right.getParent();  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  right.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  right.getParent();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getParent();    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	54	None	replace
284	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  Result  =  lvalInt  +  rvalInt;  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  Result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  [Delete]  rvalInt;  Result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    Result    =    lvalInt    +    rvalInt;    	non-compiled	[CE]  ';'  expected	51	None	replace
285	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  Result  =  lval  +  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  Result  =  lval  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    Result  =  lval  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	66	None	add
286	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt.getLastChild();  [CE]  int  cannot  be  dereferenced  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt.getLastChild();	  	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	add
287	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt.intValue();	  	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	add
288	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt.getParent();	  	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	add
289	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalIndex;  [CE]  cannot  find  symbol  rvalIndex  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalIndex;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalIndex;	  	non-compiled	[CE]  cannot  find  symbol  rvalIndex	66	None	add
290	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  Result  =  lvalInt  -  1;  [CE]  cannot  find  symbol  Result  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  Result  =  lvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    Result  =  lvalInt  -  1;	  	non-compiled	[CE]  cannot  find  symbol  Result	47	None	add
291	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  results  =  lvalInt  -  1;  [CE]  cannot  find  symbol  results  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  results  =  lvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    results  =  lvalInt  -  1;	  	non-compiled	[CE]  cannot  find  symbol  results	47	None	add
292	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  résultat  =  lvalInt  -  1;  [CE]  cannot  find  symbol  r  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  résultat  =  lvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    résultat  =  lvalInt  -  1;	  	non-compiled	[CE]  cannot  find  symbol  r	47	None	add
293	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  =  lvalInt  -  1;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  =  lvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    =  lvalInt  -  1;	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
294	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  lvalInt  -  1;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  lvalInt  -  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    lvalInt  -  1;	  	non-compiled	[CE]  not  a  statement	47	None	add
295	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt;    	compilable	  [FE]  AssertionFailedError  	32	1	replace
296	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt;    	compilable	  [FE]  AssertionFailedError  	32	1	replace
297	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt;    	non-compiled	[CE]  incompatible  types	32	None	replace
298	[BUG]  [BUGGY]  result  =  lvalInt  -  1  <  <  3;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1  <  <  3;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  1  <  <  3;	  result    =    lvalInt    -    1    <    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
299	[BUG]  [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.replaceChild(n,  right);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  MAX_FOLD_NUMBER;  result  =  lvalInt  +  MAX_FOLD_NUMBER.replaceChild(n,  right);  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    MAX_FOLD_NUMBER;    result  =  lvalInt  +  MAX_FOLD_NUMBER.replaceChild(n,  right);	  	non-compiled	[CE]  double  cannot  be  dereferenced	17	None	add
300	[BUG]  [BUGGY]  Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [CE]  cannot  find  symbol  Result  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	Result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.intValue();    	non-compiled	[CE]  cannot  find  symbol  Result	53	None	replace
301	[BUG]  [BUGGY]  result  =  lvalHorizontalIndex  >>  rvalInt;  [CE]  cannot  find  symbol  lvalHorizontalIndex  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontalIndex  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontalIndex  >>  rvalInt;	  result    =    lvalIndex    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontalIndex	19	None	replace
302	[BUG]  [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  [CE]  orphaned  default  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1;  result  =  lvalInt  -  1;  }  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    1;    result  =  lvalInt  -  1;  }	  	non-compiled	[CE]  orphaned  default	47	None	add
303	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lval    +    rvalInt;    result  =  lval  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
304	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  *  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
305	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  rval  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lval    +    rvalInt;    result  =  rval  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
306	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  rval  +  rvalInt;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  rval  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  rval  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	66	1	add
307	[BUG]  [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt.getType();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lval  +  rvalInt;  result  =  lval  +  rvalInt.getType();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lval    +    rvalInt;    result  =  lval  +  rvalInt.getType();	  	non-compiled	[CE]  int  cannot  be  dereferenced	66	None	add
308	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  -  1  >>  rvalInt;	  result    =    lvalInt    -    1    <    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	59	1	replace
309	[BUG]  [BUGGY]  result  =  lvalInt  -  1  >>  rvalInt;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  1  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  -  1  >>  rvalInt;	  result    =    lvalInt    -    1    <    <    rvalInt;    	compilable	  [FE]  AssertionFailedError  	59	1	replace
310	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  1;  result  =  lvalInt  +  1;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
311	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  1;  result  =  lvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  1;  result  =  lvalInt  +  1;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
312	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
313	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
314	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalDouble  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	31	None	add
315	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  2;  result  =  lvalInt  +  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  2;  result  =  lvalInt  +  2;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
316	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  2;  result  =  lvalInt  +  2;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  2;  result  =  lvalInt  +  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  2;  result  =  lvalInt  +  2;	  	compilable	  [FE]  AssertionFailedError  	31	1	add
317	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  +  2;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
318	[BUG]  [BUGGY]  result  =  lvalInt  +  2;  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  2;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
319	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  4;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result  =  lvalInt  +  4;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
320	[BUG]  [BUGGY]  result  =  lvalInt  +  4;  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  4;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  4;	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalIndex;    	compilable	  [FE]  AssertionFailedError  	64	1	replace
321	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt,  n.getLastChild();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt,  n.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt,  n.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
322	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt,  left.getLastChild();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt,  left.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt,  left.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
323	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt,  right.getLastChild();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt,  right.getLastChild();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt,  right.getLastChild();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getLastChild();    	non-compiled	[CE]  ';'  expected	52	None	replace
324	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	28	None	replace
325	[BUG]  [BUGGY]  result  =  lvalDouble  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                  AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	28	None	replace
326	[BUG]  [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalToInt  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	42	None	replace
327	[BUG]  [BUGGY]  result  =  lvalvron  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalvron  <  <  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalvron  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	42	None	replace
328	[BUG]  [BUGGY]  result  =  lvalHorizontal  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal  <  <  rvalInt;  break;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  <  <  rvalInt;  break;	  result    =    lval    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	42	None	replace
329	[BUG]  [BUGGY]  result  =  lvalDouble  >=  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  >=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  >=  rvalInt;	  result    =    lvalIndex    >=    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	20	None	replace
330	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	23	1	add
331	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	23	1	add
332	[BUG]  [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  [CE]  >  expected  [FE]        AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalToInt  <  <  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalToInt  <  <  rvalInt;	  result    =    lval    <    <    rvalInt;    	non-compiled	[CE]  >  expected	39	None	replace
333	[BUG]  [BUGGY]  result  =  lvalInt!=  1;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  1;	  result    =    lvalInt    >>    1;    result    =    lvalInt!=    1;    	non-compiled	[CE]  incompatible  types	7	None	replace
334	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getNext();  [CE]  int  cannot  be  dereferenced  [FE]              AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getNext();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getNext();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getParent();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
335	[BUG]  [BUGGY]  result  =  lvalInt  +  2;  result  =  lvalInt  +  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  2;  result  =  lvalInt  +  rvalInt.getParent();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  2;  result  =  lvalInt  +  rvalInt.getParent();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getParent();    	non-compiled	[CE]  int  cannot  be  dereferenced	54	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
337	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
338	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
339	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  *  rvalInt;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	12	1	add
340	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  =  lvalInt  -  rvalInt;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  -  rvalInt;  =  lvalInt  -  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    -    rvalInt;    =  lvalInt  -  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
341	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt,  right.getType();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt,  right.getType();  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt,  right.getType();	  result    =    lvalInt    +    rvalInt;    result    =    lvalInt    +    rvalInt.getType();    	non-compiled	[CE]  ';'  expected	55	None	replace
342	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  rvalInt  >>  lvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    rvalInt    >>    lvalInt;    result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	2	None	add
343	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  1;  result  =  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  1;  result  =  rvalInt  +  1;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
344	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  1;  result  =  rvalInt  +  1;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  1;  result  =  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  1;  result  =  rvalInt  +  1;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  2;  result  =  rvalInt  +  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  2;  result  =  rvalInt  +  2;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
346	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  2;  result  =  rvalInt  +  2;  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalInt  +  2;  result  =  rvalInt  +  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalInt  +  2;  result  =  rvalInt  +  2;	  	compilable	  [FE]  AssertionFailedError  	62	1	add
347	[BUG]  [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    +    rvalInt;    result  =  rvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        +        rvalInt;        result    =    rvalInt    +    rvalInt;    result  =  lvalDouble  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	62	None	add
348	[BUG]  [BUGGY]  result  =  lvalDouble  +  MAX_FOLD_NUMBER;  [CE]  cannot  find  symbol  lvalDouble  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalDouble  +  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalDouble  +  MAX_FOLD_NUMBER;	  result    =    lvalInt    +    MAX_FOLD_NUMBER;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	18	None	replace
349	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  Result  =  lvalInt  +  1;  [CE]  cannot  find  symbol  Result  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  Result  =  lvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    Result  =  lvalInt  +  1;	  	non-compiled	[CE]  cannot  find  symbol  Result	57	None	add
350	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  results  =  lvalInt  +  1;  [CE]  cannot  find  symbol  results  [FE]      AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  results  =  lvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    results  =  lvalInt  +  1;	  	non-compiled	[CE]  cannot  find  symbol  results	57	None	add
351	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  =  lvalInt  +  1;  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  =  lvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    =  lvalInt  +  1;	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
352	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    +    1;    result  =  rvalInt  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
353	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  rvalInt  +  1;  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  rvalInt  +  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  rvalInt  +  1;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
354	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    +    1;    result  =  lvalInt  +  2;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
355	[BUG]  [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  2;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  +  1;  result  =  lvalInt  +  2;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    +    1;    result  =  lvalInt  +  2;	  	compilable	  [FE]  AssertionFailedError  	57	1	add
356	[BUG]  [BUGGY]  result  =  lvalToInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalToInt  [FE]                    AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalToInt  >>  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalToInt  >>  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	65	None	replace
357	[BUG]  [BUGGY]  result  =  lvalHorizontal!=  rvalInt;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal!=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal!=  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	65	None	replace
358	[BUG]  [BUGGY]  result  =  lvalHorizontal  >=  rvalInt;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                          AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalHorizontal  >=  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalHorizontal  >=  rvalInt;	  result    =    lvalHorizontal    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	50	None	replace
359	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	add	result    =    lvalInt    %    rvalInt;    result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  RuntimeException  	45	1	add
360	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  *  rvalInt;  [FE]  RuntimeException  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt  %  rvalInt;  result  =  lvalInt  *  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result    =    lvalInt    %    rvalInt;    result  =  lvalInt  *  rvalInt;	  	compilable	  [FE]  RuntimeException  	45	1	add
361	[BUG]  [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  [Delete]  1;  result  =  lvalInt  >>  1;  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result    =    lvalInt    >>    1;    result  =  lvalInt  >>  1;  result  =  lvalInt  [Delete]  1;  result  =  lvalInt  >>  1;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result        =        lvalInt        >>        1;        result    =    lvalInt    >>    1;    result  =  lvalInt  [Delete]  1;  result  =  lvalInt  >>  1;	  	non-compiled	[CE]  ';'  expected	4	None	add
362	[BUG]  [BUGGY]  Result  =  lvalInt  ==  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]                      AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  Result  =  lvalInt  ==  rvalInt;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	Result  =  lvalInt  ==  rvalInt;	  result    =    rvalInt    ==    lvalInt;    	non-compiled	[CE]  cannot  find  symbol  Result	21	None	replace
363	[BUG]  [BUGGY]  result  =  lvalInt!=  MAX_FOLD_NUMBER;  [CE]  incompatible  types  [FE]            AssertionFailedError      [CONTEXT]      case  Token.LSH:  result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:          [BUGGY]  result  =  lvalInt!=  MAX_FOLD_NUMBER;  [BUGGY]      break;  default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	698	698	1	replace	result  =  lvalInt!=  MAX_FOLD_NUMBER;	  result    =    lvalInt    <    <    MAX_FOLD_NUMBER;    	non-compiled	[CE]  incompatible  types	16	None	replace
