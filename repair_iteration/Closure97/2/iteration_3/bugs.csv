bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lvalDouble  -  rvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  -  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  -  rvalDouble;	  result    =    lvalDouble    >>    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	11	None	replace
2	[BUG]  [BUGGY]  result  =  lvalDouble  &  rvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                        AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  &  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  &  rvalDouble;	  result    =    lvalDouble    >>    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	11	None	replace
3	[BUG]  [BUGGY]  result  =  lvalDouble  +  rvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                          AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  +  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  +  rvalDouble;	  result    =    lvalDouble    >>    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	11	None	replace
4	[BUG]  [BUGGY]  result  =  lvalDouble  %  rvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  %  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  %  rvalDouble;	  result    =    lvalDouble    >>    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	11	None	replace
5	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  <  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  <  1;	  result    =    lvalInt    >>    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
6	[BUG]  [BUGGY]  result  =  lvalInt  >>  rval;  [CE]  bad  operand  types  for  binary  operator  '>>'  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rval;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>>'	48	None	replace
7	[BUG]  [BUGGY]  result  =  lvalInt  >=  rval;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rval;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  incompatible  types	48	None	replace
8	[BUG]  [BUGGY]  result  =  lvalInt!=  rval;  [CE]  incompatible  types  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rval;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt!=  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  incompatible  types	48	None	replace
9	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rval;  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  rval;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  [Delete]  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  ';'  expected	48	None	replace
10	[BUG]  [BUGGY]  result  =  lvalInt  ==  rval;  [CE]  incompatible  types  [FE]                          AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rval;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  ==  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  incompatible  types	48	None	replace
11	[BUG]  [BUGGY]  result  =  rvalInt  ==  lvalInt;  [CE]  incompatible  types  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt  ==  lvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  rvalInt  ==  lvalInt;	  result    =    lvalInt    ==    rvalInt;    	non-compiled	[CE]  incompatible  types	32	None	replace
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  lvalInt  &  rvalInt;	  result    =    lvalDecimal    &    rvalDecimal;    	compilable	  [FE]  AssertionError  	24	1	replace
13	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalInt;  [FE]  AssertionError  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  &  rvalInt;	  result    =    lvalDecimal    &    rvalDecimal;    	compilable	  [FE]  AssertionError  	24	1	replace
14	[BUG]  [BUGGY]  result  =  lvalDouble  &  rvalDecimal;  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  &  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  &  rvalDecimal;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	24	None	replace
15	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  &  rvalInt;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	24	None	replace
16	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  &  rvalDecimal;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	24	None	replace
17	[BUG]  [BUGGY]  result  =  lvalIndex  &  rvalDecimal;  [CE]  cannot  find  symbol  lvalIndex  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalIndex  &  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalIndex  &  rvalDecimal;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	24	None	replace
18	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	45	None	replace
19	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	45	None	replace
20	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt!=  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	45	None	replace
21	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalDouble;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  [Delete]  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  ';'  expected	45	None	replace
22	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  ==  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	45	None	replace
23	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalDouble;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
24	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  rvalDecimal;	  result    =    lvalInt    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	44	None	replace
25	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  rvalDecimal;	  result    =    lvalInt    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	44	None	replace
26	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalDecimal;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  [Delete]  rvalDecimal;	  result    =    lvalInt    <    <    rvalDecimal;    	non-compiled	[CE]  ';'  expected	44	None	replace
27	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt!=  rvalDecimal;	  result    =    lvalInt    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	44	None	replace
28	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                        AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  ==  rvalDecimal;	  result    =    lvalInt    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	44	None	replace
29	[BUG]  [BUGGY]  result  =  lvalInt  <  <  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  1;	  result    =    lvalInt    <    <    rvalDecimal;    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
30	[BUG]  [BUGGY]  result  =  lvalDecimal  >>  >  rvalDecimal;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >>  >  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  >>  >  rvalDecimal;	  result    =    lvalDecimal    >>    rvalDecimal;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
31	[BUG]  [BUGGY]  result  =  lvalDecimal  >=  >  rvalDecimal;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >=  >  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  >=  >  rvalDecimal;	  result    =    lvalDecimal    >>    rvalDecimal;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
32	[BUG]  [BUGGY]  result  =  lvalDecimal!=  >  rvalDecimal;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal!=  >  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal!=  >  rvalDecimal;	  result    =    lvalDecimal    >>    rvalDecimal;    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
33	[BUG]  [BUGGY]  result  =  lvalInt  ^  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  ^  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  ^  >  rvalInt;	  result    =    lvalDouble    &    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  result  =  lvalToken!=  rvalToken;  [CE]  cannot  find  symbol  lvalToken  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalToken!=  rvalToken;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalToken!=  rvalToken;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	50	None	replace
35	[BUG]  [BUGGY]  result  =  lvalDecimal  -  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  -  rvalDecimal;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  -  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	41	None	replace
36	[BUG]  [BUGGY]  result  =  lvalDecimal  +  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  +  rvalDecimal;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  +  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	41	None	replace
37	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalDecimal;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  &  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	41	None	replace
38	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  break;  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rvalInt;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  >  expected	41	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  lvalInt  >>  rvalInt;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
40	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [FE]  AssertionFailedError  [FE]                  AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  rvalInt;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	compilable	  [FE]  AssertionFailedError  	41	1	replace
41	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  1;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  <  <  1;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
42	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
43	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  >  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  >  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
44	[BUG]  [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt!=  >  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt!=  >  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
45	[BUG]  [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  ==  >  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  ==  >  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
46	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  >  rvalInt;  break;  [CE]  cannot  find  symbol  Delete  [FE]                  AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  [Delete]  >  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  [Delete]  >  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  Delete	53	None	replace
47	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalInt;  break;  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  lvalInt  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	compilable	  [FE]  AssertionError  	47	1	replace
49	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalInt;  [FE]  AssertionError  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	compilable	  [FE]  AssertionError  	47	1	replace
50	[BUG]  [BUGGY]  result  =  lvalIndex  %  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalIndex  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalIndex  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	47	None	replace
51	[BUG]  [BUGGY]  result  =  lvalNum  %  rvalInt;  [CE]  cannot  find  symbol  lvalNum  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalNum  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalNum  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	47	None	replace
52	[BUG]  [BUGGY]  result  =  lvalEnd  %  rvalInt;  [CE]  cannot  find  symbol  lvalEnd  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalEnd  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalEnd  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalEnd	47	None	replace
53	[BUG]  [BUGGY]  result  =  lvalLval  %  rvalInt;  [CE]  cannot  find  symbol  lvalLval  [FE]                        AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalLval  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalLval  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalLval	47	None	replace
54	[BUG]  [BUGGY]  result  =  lvalDouble  >>  <  rvalInt;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  <  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  <  rvalInt;	  result    =    lvalDouble    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	30	None	replace
55	[BUG]  [BUGGY]  result  =  lvalDouble  >=  <  rvalInt;  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  <  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >=  <  rvalInt;	  result    =    lvalDouble    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	30	None	replace
56	[BUG]  [BUGGY]  result  =  lvalDouble  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >=  >  rvalInt;	  result    =    lvalDouble    >=    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
57	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  MAX_FOLD_NUMBER;  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  MAX_FOLD_NUMBER;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  <  <  MAX_FOLD_NUMBER;	  result    =    lvalDouble    >=    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  >  expected	34	None	replace
58	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
59	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	21	None	add
60	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	21	1	add
61	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	21	1	add
62	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble!=  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble!=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble!=  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	21	None	add
63	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
64	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  >  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
65	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble  >=  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble  >=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalDouble  >>  rvalInt;  result  =  lvalDouble  >=  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	21	None	add
66	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  +  rvalDecimal;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	25	None	replace
67	[BUG]  [BUGGY]  result  =  lvalDouble  +  rvalDecimal;  [CE]  cannot  find  symbol  lvalDouble  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  +  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  +  rvalDecimal;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	25	None	replace
68	[BUG]  [BUGGY]  result  =  lvalDecimal  +  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  +  rvalInt;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	25	None	replace
69	[BUG]  [BUGGY]  result  =  rvalInt!=  lvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt!=  lvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  rvalInt!=  lvalInt;	  result    =    lvalInt!=    rvalInt;    	non-compiled	[CE]  incompatible  types	29	None	replace
70	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  +  2;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  +  2;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  rvalDouble  +  2;	  result    =    lvalDouble    >=    >    rvalDouble    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
71	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalInt  +  1;  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  rvalInt  +  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  rvalInt  +  1;	  result    =    lvalDouble    >=    >    rvalDouble    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
72	[BUG]  [BUGGY]  result  =  lvalDouble  >=  >  rvalDouble  +  2;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  >  rvalDouble  +  2;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >=  >  rvalDouble  +  2;	  result    =    lvalDouble    >=    >    rvalDouble    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
73	[BUG]  [BUGGY]  result  =  lvalDouble!=  >  rvalDouble  +  1;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble!=  >  rvalDouble  +  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble!=  >  rvalDouble  +  1;	  result    =    lvalDouble    >=    >    rvalDouble    +    1;    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt  >>  lvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  rvalInt  >>  lvalInt;	  result    =    lvalInt    >=    rvalInt;    	compilable	  [FE]  AssertionError  	7	1	replace
75	[BUG]  [BUGGY]  result  =  rvalInt  >>  lvalInt;  [FE]  AssertionError  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt  >>  lvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  rvalInt  >>  lvalInt;	  result    =    lvalInt    >=    rvalInt;    	compilable	  [FE]  AssertionError  	7	1	replace
76	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  lvalInt  -  rvalInt;	  result    =    lvalDecimal    -    rvalDecimal;    	compilable	  [FE]  AssertionError  	23	1	replace
77	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalInt;  [FE]  AssertionError  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  -  rvalInt;	  result    =    lvalDecimal    -    rvalDecimal;    	compilable	  [FE]  AssertionError  	23	1	replace
78	[BUG]  [BUGGY]  result  =  lvalSecond  -  rvalSecond;  [CE]  cannot  find  symbol  lvalSecond  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalSecond  -  rvalSecond;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalSecond  -  rvalSecond;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalSecond	23	None	replace
79	[BUG]  [BUGGY]  result  =  lvalIndex  -  rvalDecimal;  [CE]  cannot  find  symbol  lvalIndex  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalIndex  -  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalIndex  -  rvalDecimal;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	23	None	replace
80	[BUG]  [BUGGY]  result  =  lvalInt  -  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  -  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  -  rvalDecimal;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	23	None	replace
81	[BUG]  [BUGGY]  result  =  lvalDecimal  -  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  -  rvalInt;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	23	None	replace
82	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  <  <  1;	  result    =    lvalDouble    <    <    rvalDouble;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
83	[BUG]  [BUGGY]  result  =  lvalDouble  -  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]        AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  -  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  -  rvalInt;  break;	          result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	40	None	replace
84	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  rvalInt;  break;	          result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	40	None	replace
85	[BUG]  [BUGGY]  result  =  lvalDouble  &  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  &  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  &  rvalInt;  break;	          result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	40	None	replace
86	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt!=  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt!=  rvalInt;  break;	          result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  incompatible  types	40	None	replace
87	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
88	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	55	1	add
89	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  Result  =  lvalInt  +  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]      AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  Result  =  lvalInt  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    Result  =  lvalInt  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	55	None	add
90	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]        AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalDouble  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalDouble  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	55	None	add
91	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalOutt  +  rvalInt;  [CE]  cannot  find  symbol  lvalOutt  [FE]          AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalOutt  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalOutt  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalOutt	55	None	add
92	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalIndex  >>  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]            AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalIndex  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalIndex  >>  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalIndex	55	None	add
93	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalIndex  >=  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]              AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalIndex  >=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalIndex  >=  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalIndex	55	None	add
94	[BUG]  [BUGGY]  Result  =  lvalInt  >>  <  rvalInt;  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  Result  =  lvalInt  >>  <  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	Result  =  lvalInt  >>  <  rvalInt;	          Result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  >  expected	6	None	replace
95	[BUG]  [BUGGY]  Result  =  lvalInt  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  Result  =  lvalInt  >=  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	Result  =  lvalInt  >=  >  rvalInt;	          Result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  +  3;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  +  3;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  rvalDouble  +  3;	  result    =    lvalDouble    >>    >    rvalDouble    +    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
97	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalDecimal;  [CE]  cannot  find  symbol  rvalDecimal  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  %  rvalDecimal;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  rvalDecimal	43	None	replace
98	[BUG]  [BUGGY]  result  =  lvalSecond  %  rvalSecond;  [CE]  cannot  find  symbol  lvalSecond  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalSecond  %  rvalSecond;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalSecond  %  rvalSecond;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalSecond	43	None	replace
99	[BUG]  [BUGGY]  result  =  lvalThreshold  %  rvalThreshold;  [CE]  cannot  find  symbol  lvalThreshold  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalThreshold  %  rvalThreshold;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalThreshold  %  rvalThreshold;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalThreshold	43	None	replace
100	[BUG]  [BUGGY]  result  =  lvalIndex  %  rvalDecimal;  [CE]  cannot  find  symbol  lvalIndex  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalIndex  %  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalIndex  %  rvalDecimal;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	43	None	replace
101	[BUG]  [BUGGY]  result  =  lvalToInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalToInt  >>  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalToInt  >>  >  rvalInt;	  result    =    lvalToInt    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
102	[BUG]  [BUGGY]  result  =  lvalNum  -  rvalInt;  [CE]  cannot  find  symbol  lvalNum  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalNum  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalNum  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	13	None	replace
103	[BUG]  [BUGGY]  result  =  lvalWord  -  rvalInt;  [CE]  cannot  find  symbol  lvalWord  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalWord  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalWord  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalWord	13	None	replace
104	[BUG]  [BUGGY]  result  =  lvalIndex  -  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalIndex  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalIndex  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	13	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt  -  lvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  rvalInt  -  lvalInt;	  result    =    lvalDouble    -    rvalInt;    	compilable	  [FE]  AssertionError  	13	1	replace
106	[BUG]  [BUGGY]  result  =  rvalInt  -  lvalInt;  [FE]  AssertionError  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt  -  lvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  rvalInt  -  lvalInt;	  result    =    lvalDouble    -    rvalInt;    	compilable	  [FE]  AssertionError  	13	1	replace
107	[BUG]  [BUGGY]  result  =  lvalToInt  -  rvalInt;  [CE]  cannot  find  symbol  lvalToInt  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalToInt  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalToInt  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	13	None	replace
108	[BUG]  [BUGGY]  result  =  lvalTolerance  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalTolerance  >>  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalTolerance  >>  >  rvalInt;	  result    =    lvalTolerance    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
109	[BUG]  [BUGGY]  result  =  lvalTolerance  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalTolerance  >=  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalTolerance  >=  >  rvalInt;	  result    =    lvalTolerance    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	21	1	add
111	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	21	1	add
112	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]      AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	21	None	add
113	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]        AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;	  	non-compiled	[CE]  incompatible  types	21	None	add
114	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  incompatible  types	21	None	add
115	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  incompatible  types  [FE]            AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt!=  rvalInt;  result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  incompatible  types	21	None	add
116	[BUG]  [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result        =        lvalInt        >>        rvalInt;        result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	21	None	add
117	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalDouble;  [CE]  cannot  find  symbol  rvalDouble  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  +  rvalDouble;	  result    =    lvalInt    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  rvalDouble	45	None	replace
118	[BUG]  [BUGGY]  result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  [CE]  >  expected  [FE]                            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  MAX_FOLD_NUMBER;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  MAX_FOLD_NUMBER;	  result    =    lvalInt    >>    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  >  expected	4	None	replace
119	[BUG]  [BUGGY]  result  =  lvalTolerance!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalTolerance!=  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalTolerance!=  >  rvalInt;	  result    =    lvalTolerance    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
120	[BUG]  [BUGGY]  result  =  lvalDouble  >=  rvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >=  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >=  rvalDouble;	  result    =    lvalDouble    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	10	None	replace
121	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  4;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  4;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  <  <  4;	  result    =    lvalDouble    <    <    rvalDouble;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
122	[BUG]  [BUGGY]  result  =  lvalInt  >>  3;  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  3;  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  3;  result  =  lvalInt  >>  >  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    [Delete]    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
123	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalDouble;  break;  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rvalDouble;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rvalDouble;  break;	          result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	40	None	replace
124	[BUG]  [BUGGY]  result  =  lvalDouble  +  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  +  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  +  rvalInt;  break;	          result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	40	None	replace
125	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  1;  break;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  1;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  <  <  1;  break;	          result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
126	[BUG]  [BUGGY]  result  =  lvalProperty  %  rvalInt;  [CE]  cannot  find  symbol  lvalProperty  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalProperty  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalProperty  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalProperty	47	None	replace
127	[BUG]  [BUGGY]  result  =  lvalMean  %  rvalInt;  [CE]  cannot  find  symbol  lvalMean  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalMean  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalMean  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalMean	47	None	replace
128	[BUG]  [BUGGY]  result  =  lvalInt  %  rvalOutt;  [CE]  cannot  find  symbol  rvalOutt  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  %  rvalOutt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  %  rvalOutt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalOutt	47	None	replace
129	[BUG]  [BUGGY]  result  =  lvalNum  &  rvalInt;  [CE]  cannot  find  symbol  lvalNum  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalNum  &  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalNum  &  rvalInt;	  result    =    lvalDouble    &    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	14	None	replace
130	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalOutt;  [CE]  cannot  find  symbol  rvalOutt  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalOutt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  &  rvalOutt;	  result    =    lvalDouble    &    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalOutt	14	None	replace
131	[BUG]  [BUGGY]  result  =  lvalIndex  &  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalIndex  &  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalIndex  &  rvalInt;	  result    =    lvalDouble    &    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	14	None	replace
132	[BUG]  [BUGGY]  result  =  lvalInt  &  rvalIndex;  [CE]  cannot  find  symbol  rvalIndex  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  &  rvalIndex;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  &  rvalIndex;	  result    =    lvalDouble    &    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalIndex	14	None	replace
133	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.intValue();  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt.intValue();	  	non-compiled	[CE]  int  cannot  be  dereferenced	55	None	add
134	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [CE]  int  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getType();  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt.getType();	  	non-compiled	[CE]  int  cannot  be  dereferenced	55	None	add
135	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [CE]  int  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalInt.getParent();  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalInt.getParent();	  	non-compiled	[CE]  int  cannot  be  dereferenced	55	None	add
136	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalIndex;  [CE]  cannot  find  symbol  rvalIndex  [FE]          AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalInt  +  rvalIndex;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalInt  +  rvalIndex;	  	non-compiled	[CE]  cannot  find  symbol  rvalIndex	55	None	add
137	[BUG]  [BUGGY]  result  =  rvalInt  >>  >  lvalInt;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt  >>  >  lvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  rvalInt  >>  >  lvalInt;	          result    =    lvalInt    [Delete]    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  lvalInt  >>  1;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    ==    >    rvalInt;    	compilable	  [FE]  AssertionError  	18	1	replace
139	[BUG]  [BUGGY]  result  =  lvalInt  >>  1;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  1;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    ==    >    rvalInt;    	compilable	  [FE]  AssertionError  	18	1	replace
140	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER  +  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER  +  1;	  result    =    lvalDouble    >>    >    rvalDouble    +    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
141	[BUG]  [BUGGY]  result  =  lvalDouble  [Delete]  >  rvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  [Delete]  >  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  [Delete]  >  rvalDouble;	  result    =    lvalDouble    >>    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	9	None	replace
142	[BUG]  [BUGGY]  result  =  lvalDouble!=  >  rvalDouble;  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble!=  >  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble!=  >  rvalDouble;	  result    =    lvalDouble    >>    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
143	[BUG]  [BUGGY]  result  =  lvalDecimal!=  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal!=  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal!=  rvalDecimal;	  result    =    lvalDecimal    >>    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	42	None	replace
144	[BUG]  [BUGGY]  result  =  lvalDecimal  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  >>  rvalInt;	  result    =    lvalDecimal    >>    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	42	None	replace
145	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  rvalInt;  result  =  lvalInt  >>  >  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
146	[BUG]  [BUGGY]  result  =  lvalInt  -  1  <  <  rvalInt;  [CE]  >  expected  [FE]                          AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  -  1  <  <  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  -  1  <  <  rvalInt;	  result    =    lvalInt    >=    <    rvalInt;    	non-compiled	[CE]  >  expected	3	None	replace
147	[BUG]  [BUGGY]  result  =  lvalInt  >>  lowerRvalInt;  [CE]  cannot  find  symbol  lowerRvalInt  [FE]                AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  lowerRvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  lowerRvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lowerRvalInt	19	None	replace
148	[BUG]  [BUGGY]  result  =  rvalInt  >=  lvalInt;  [CE]  incompatible  types  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt  >=  lvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  rvalInt  >=  lvalInt;	  result    =    lvalInt    >=    rvalInt;    	non-compiled	[CE]  incompatible  types	7	None	replace
149	[BUG]  [BUGGY]  result  =  lvalDecimal  >>  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >>  rvalDecimal;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  >>  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	41	None	replace
150	[BUG]  [BUGGY]  result  =  lvalDecimal  %  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  %  rvalDecimal;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  %  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	41	None	replace
151	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  4;  break;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  4;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  <  <  4;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
152	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalIndex;  [CE]  cannot  find  symbol  rvalIndex  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalIndex;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  +  rvalIndex;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalIndex	46	None	replace
153	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalOutt;  [CE]  cannot  find  symbol  rvalOutt  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalOutt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  +  rvalOutt;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  rvalOutt	46	None	replace
154	[BUG]  [BUGGY]  result  =  lvalNum  +  rvalInt;  [CE]  cannot  find  symbol  lvalNum  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalNum  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalNum  +  rvalInt;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalNum	46	None	replace
155	[BUG]  [BUGGY]  result  =  lvalIndex  +  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalIndex  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalIndex  +  rvalInt;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	46	None	replace
156	[BUG]  [BUGGY]  result  =  lvalInt  >>  lower  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  lower  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  lower  rvalInt;  Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  ';'  expected	39	None	replace
157	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  this.result  =  lvalInt  >>  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  rvalInt;  this.result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  rvalInt;  this.result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
158	[BUG]  [BUGGY]  result  =  lvalDecimal  >=  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  >=  rvalInt;	  result    =    lvalDecimal    >=    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	57	None	replace
159	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  >  expected  [FE]    AssertionFailedError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  >  expected	22	None	replace
160	[BUG]  [BUGGY]  Result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  Result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	Result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;	          Result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
161	[BUG]  [BUGGY]  Result  =  lvalInt  >>  >  result;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  Result  =  lvalInt  >>  >  result;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	Result  =  lvalInt  >>  >  result;	          Result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
162	[BUG]  [BUGGY]  Result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  Result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	Result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;	          Result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
163	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rval;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  lvalInt  +  rval;	  result    =    lvalInt    <    <    rval;    	compilable	  [FE]  AssertionError  	48	1	replace
164	[BUG]  [BUGGY]  result  =  lvalInt  +  rval;  [FE]  AssertionError  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rval;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  +  rval;	  result    =    lvalInt    <    <    rval;    	compilable	  [FE]  AssertionError  	48	1	replace
165	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalDouble;  [CE]  cannot  find  symbol  lvalDecimal  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  &  rvalDouble;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	24	None	replace
166	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalDesc;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  &  rvalDesc;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  &  rvalDesc;	  result    =    lvalDecimal    &    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	24	None	replace
167	[BUG]  [BUGGY]  result  =  lvalTolerance  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalTolerance  [FE]        AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalTolerance  >>  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalTolerance  >>  rvalInt;  break;	  result    =    lvalDouble    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	52	None	replace
168	[BUG]  [BUGGY]  result  =  lvalWord  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalWord  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalWord  >>  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalWord  >>  rvalInt;  break;	  result    =    lvalDouble    >>    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalWord	52	None	replace
169	[BUG]  [BUGGY]  result  =  lvalDecimal  %  rvalInt;  [CE]  cannot  find  symbol  lvalDecimal  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  %  rvalInt;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	43	None	replace
170	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  negNum;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  negNum;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  negNum;	  result    =    lvalInt!=    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
171	[BUG]  [BUGGY]  result  =  lvalEnd  -  rvalInt;  [CE]  cannot  find  symbol  lvalEnd  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalEnd  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalEnd  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalEnd	13	None	replace
172	[BUG]  [BUGGY]  result  =  rvalInt  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  rvalInt  >>  >  MAX_FOLD_NUMBER;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  rvalInt  >>  >  MAX_FOLD_NUMBER;	  result    =    lvalInt    [Delete]    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
173	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  2;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  <  2;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  <  2;	  result    =    lvalInt    >>    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
174	[BUG]  [BUGGY]  result  =  lvalToken  -  rvalToken;  [CE]  cannot  find  symbol  lvalToken  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalToken  -  rvalToken;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalToken  -  rvalToken;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	23	None	replace
175	[BUG]  [BUGGY]  result  =  lvalMethod  +  rvalDecimal;  [CE]  cannot  find  symbol  lvalMethod  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalMethod  +  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalMethod  +  rvalDecimal;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalMethod	25	None	replace
176	[BUG]  [BUGGY]  result  =  lvalTolerance  >>  rvalTolerance;  [CE]  cannot  find  symbol  lvalTolerance  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalTolerance  >>  rvalTolerance;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalTolerance  >>  rvalTolerance;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	50	None	replace
177	[BUG]  [BUGGY]  result  =  lvalHorizontal!=  rvalHorizontal;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalHorizontal!=  rvalHorizontal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalHorizontal!=  rvalHorizontal;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	50	None	replace
178	[BUG]  [BUGGY]  result  =  lvalToken  >>  rvalToken;  [CE]  cannot  find  symbol  lvalToken  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalToken  >>  rvalToken;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalToken  >>  rvalToken;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	50	None	replace
179	[BUG]  [BUGGY]  result  =  lvalDecimal  <  <  rvalInt;  [CE]  >  expected  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  <  <  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  <  <  rvalInt;	  result    =    lvalInt    <    <    rvalDecimal;    	non-compiled	[CE]  >  expected	44	None	replace
180	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  rvalDecimal;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  rvalDecimal;	  result    =    lvalInt    <    <    rvalDecimal;    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
181	[BUG]  [BUGGY]  result  =  lvalTolerance  >=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalTolerance  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalTolerance  >=  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalTolerance  >=  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	53	None	replace
182	[BUG]  [BUGGY]  result  =  lvalHorizontal  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalHorizontal  >>  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalHorizontal  >>  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	53	None	replace
183	[BUG]  [BUGGY]  result  =  lvalHorizontal  >=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalHorizontal  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalHorizontal  >=  rvalInt;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalHorizontal  >=  rvalInt;  break;	  result    =    lvalDouble    >=    rvalInt;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalHorizontal	53	None	replace
184	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER  +  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  MAX_FOLD_NUMBER  +  1;	  result    =    lvalInt    [Delete]    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
185	[BUG]  [BUGGY]  result  =  lvalDouble!=  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble!=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble!=  rvalInt;	  result    =    lvalToInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	51	None	replace
186	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    [Delete]    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	38	None	replace
187	[BUG]  [BUGGY]  result  =  lvalDecimal  >=  rvalDecimal;  break;  [CE]  cannot  find  symbol  lvalDecimal  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  >=  rvalDecimal;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  >=  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	41	None	replace
188	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalDecimal;  break;  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rvalDecimal;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rvalDecimal;  break;	          result    =    lvalDecimal    <    <    rvalDecimal;    break;    	non-compiled	[CE]  >  expected	41	None	replace
189	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rval;  [CE]  >  expected  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  <  <  rval;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  <  <  rval;	  result    =    lvalInt    <    <    rval;    	non-compiled	[CE]  >  expected	48	None	replace
190	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  <  <  rval;  break;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rval;  break;	          result    =    lvalDouble    <    <    rvalInt;    break;    	non-compiled	[CE]  >  expected	40	None	replace
191	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  MILLIS_EXPR_RESULT;  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  >  MILLIS_EXPR_RESULT;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  MILLIS_EXPR_RESULT;	          result    =    lvalInt    [Delete]    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
192	[BUG]  [BUGGY]  result  =  lvalDouble  -  rvalDecimal;  [CE]  cannot  find  symbol  lvalDouble  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  -  rvalDecimal;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  -  rvalDecimal;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	23	None	replace
193	[BUG]  [BUGGY]  result  =  lvalProbability  -  rvalProbability;  [CE]  cannot  find  symbol  lvalProbability  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalProbability  -  rvalProbability;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalProbability  -  rvalProbability;	  result    =    lvalDecimal    -    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalProbability	23	None	replace
194	[BUG]  [BUGGY]  result  =  lvalWord  +  rvalInt;  [CE]  cannot  find  symbol  lvalWord  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalWord  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalWord  +  rvalInt;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalWord	46	None	replace
195	[BUG]  [BUGGY]  result  =  lvalToken  +  rvalInt;  [CE]  cannot  find  symbol  lvalToken  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalToken  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalToken  +  rvalInt;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToken	46	None	replace
196	[BUG]  [BUGGY]  result  =  lvalIndex  >>  rvalInt;  [CE]  cannot  find  symbol  lvalIndex  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalIndex  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalIndex  >>  rvalInt;	  result    =    lvalDouble    +    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalIndex	46	None	replace
197	[BUG]  [BUGGY]  result  =  lvalBigInt  >>  rvalBigInt;  [CE]  cannot  find  symbol  lvalBigInt  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalBigInt  >>  rvalBigInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalBigInt  >>  rvalBigInt;	  result    =    lvalDouble    >>    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalBigInt	50	None	replace
198	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	39	None	replace
199	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt!=  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                  AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt!=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt!=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	39	None	replace
200	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt  >=  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]                    AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt  >=  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  rvalInt;  Result  =  lvalInt  >=  rvalInt;	  result    =    lvalInt    >>    rvalInt;    Result    =    lvalInt    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	39	None	replace
201	[BUG]  [BUGGY]  result  =  lvalDecimal  %  rvalDouble;  [CE]  cannot  find  symbol  lvalDecimal  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  %  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  %  rvalDouble;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	43	None	replace
202	[BUG]  [BUGGY]  result  =  lvalMask  %  rvalMask;  [CE]  cannot  find  symbol  lvalMask  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalMask  %  rvalMask;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalMask  %  rvalMask;	  result    =    lvalDecimal    %    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalMask	43	None	replace
203	[BUG]  [BUGGY]  result  =  lvalDouble!=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble!=  >  MAX_FOLD_NUMBER;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble!=  >  MAX_FOLD_NUMBER;	  result    =    lvalInt!=    >    MAX_FOLD_NUMBER;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
204	[BUG]  [BUGGY]  result  =  lvalDouble  [Delete]  rvalDouble;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  [Delete]  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  [Delete]  rvalDouble;	  result    =    lvalDouble    <    <    rvalDouble;    	non-compiled	[CE]  ';'  expected	10	None	replace
205	[BUG]  [BUGGY]  result  =  lvalDouble!=  rvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble!=  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble!=  rvalDouble;	  result    =    lvalDouble    <    <    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	10	None	replace
206	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  4;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  >>  <  4;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  <  4;	  result    =    lvalInt    >=    <    rvalInt;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
207	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  *  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  *  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  rvalDouble  *  1;	  result    =    lvalDouble    >>    >    rvalDouble    +    1;    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
208	[BUG]  [BUGGY]  result  =  lvalDouble  >>  <  rvalDouble  +  1;  [CE]  >  expected  [FE]                      AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  <  rvalDouble  +  1;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  <  rvalDouble  +  1;	  result    =    lvalDouble    >>    <    rvalDouble;    	non-compiled	[CE]  >  expected	11	None	replace
209	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    [Delete]    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
210	[BUG]  [BUGGY]  Result  =  lvalInt  >>  >  max_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  Result  =  lvalInt  >>  >  max_FOLD_NUMBER;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	Result  =  lvalInt  >>  >  max_FOLD_NUMBER;	          Result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
211	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  max_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDouble  >>  >  max_FOLD_NUMBER;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  max_FOLD_NUMBER;	  result    =    lvalInt    >>    >    max_FOLD_NUMBER;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
212	[BUG]  [BUGGY]  result  =  lvalDecimal  +  rvalDouble;  [CE]  cannot  find  symbol  lvalDecimal  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalDecimal  +  rvalDouble;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  +  rvalDouble;	  result    =    lvalDecimal    +    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	25	None	replace
213	[BUG]  [BUGGY]  result  =  lvalInt  }  >  rvalInt;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  }  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  }  >  rvalInt;	  result    =    lvalDouble    &    rvalInt;    	non-compiled	[CE]  ';'  expected	14	None	replace
214	[BUG]  [BUGGY]  result  =  lvalSecond  -  rvalInt;  [CE]  cannot  find  symbol  lvalSecond  [FE]            AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalSecond  -  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalSecond  -  rvalInt;	  result    =    lvalDouble    -    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalSecond	13	None	replace
215	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalMethod  +  rvalInt;  [CE]  cannot  find  symbol  lvalMethod  [FE]    AssertionError    [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  rvalInt;  result  =  lvalMethod  +  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    +    rvalInt;    result  =  lvalMethod  +  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalMethod	55	None	add
216	[BUG]  [BUGGY]  result  =  lvalSecond  %  rvalInt;  [CE]  cannot  find  symbol  lvalSecond  [FE]                AssertionFailedError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalSecond  %  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalSecond  %  rvalInt;	  result    =    lvalDouble    %    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalSecond	47	None	replace
217	[BUG]  [BUGGY]  result  =  lvalInt  +  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;      [BUGGY]  result  =  lvalInt  +  >  rvalInt;  [BUGGY]      default:  throw  new  AssertionError(     "Unknown  shift  operator:       "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  +  >  rvalInt;	  result    =    lvalInt    >>    rvalInt;    result    =    lvalInt    ==    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
