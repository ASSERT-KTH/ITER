bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalInt;  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  <  <  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rvalInt;	  result    =    lvalInt    ==    >    rvalInt;    	non-compiled	[CE]  >  expected	6	None	replace
2	[BUG]  [BUGGY]  result  =  lvalInt  >>  <  rvalInt;  [CE]  >  expected  [FE]                    AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  <  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  <  rvalInt;	  result    =    lvalInt    ==    >    rvalInt;    	non-compiled	[CE]  >  expected	6	None	replace
3	[BUG]  [BUGGY]  result  =  lvalInt  >=  <  rvalInt;  [CE]  >  expected  [FE]                      AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >=  <  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  <  rvalInt;	  result    =    lvalInt    ==    >    rvalInt;    	non-compiled	[CE]  >  expected	6	None	replace
4	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  MAX_FOLD_NUMBER;	  result    =    lvalInt    ==    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]      result  =  lvalInt  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  Delete  [FE]    AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]      result  =  lvalInt  [Delete]  >  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	        result  =  lvalInt  [Delete]  >  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Delete	7	None	add
6	[BUG]  [BUGGY]      Result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]      Result  =  lvalInt  >>  >  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	        Result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
7	[BUG]  [BUGGY]  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >=  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  rvalInt;	  result    =    lvalDouble    >=    rvalInt;    	non-compiled	[CE]  incompatible  types	14	None	replace
8	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  +  1;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >>  >  rvalDouble  +  1;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  rvalDouble  +  1;	  result    =    lvalDouble    >>    >    rvalDouble;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
9	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  MAX_FOLD_NUMBER;	  result    =    lvalDouble    >>    >    rvalDouble;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
10	[BUG]  [BUGGY]  result  =  lvalDouble  <  <  rvalDouble;  [CE]  >  expected  [FE]                AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  <  <  rvalDouble;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  <  <  rvalDouble;	  result    =    lvalDouble    >>    >    rvalDouble;    	non-compiled	[CE]  >  expected	3	None	replace
11	[BUG]  [BUGGY]  result  =  lvalDouble  >>  <  rvalDouble;  [CE]  >  expected  [FE]                  AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >>  <  rvalDouble;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  <  rvalDouble;	  result    =    lvalDouble    >>    >    rvalDouble;    	non-compiled	[CE]  >  expected	3	None	replace
12	[BUG]  [BUGGY]  result  =  lvalDouble  >=  >  rvalDouble  +  1;  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >=  >  rvalDouble  +  1;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >=  >  rvalDouble  +  1;	  result    =    lvalDouble    >=    >    rvalDouble;    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]  result  =  lvalDouble  -  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]        AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  -  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  -  rvalInt;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	13	None	replace
14	[BUG]  [BUGGY]  result  =  lvalDouble  &  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  &  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  &  rvalInt;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	13	None	replace
15	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  >  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
16	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  >  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
17	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  >  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt!=  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
18	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  >  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  ==  >  rvalInt;	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
19	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]            AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >>  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalDouble  >>  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	11	None	add
20	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  >  rvalInt;  [CE]  cannot  find  symbol  Delete  [FE]              AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  >  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  [Delete]  >  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Delete	11	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
22	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [FE]  AssertionFailedError  [FE]                AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >>  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >>  rvalInt;	  	compilable	  [FE]  AssertionFailedError  	11	1	add
23	[BUG]  [BUGGY]  result  =  lvalDecimal  -  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]        AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDecimal  -  rvalDecimal;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  -  rvalDecimal;	  result    =    lvalDecimal    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	9	None	replace
24	[BUG]  [BUGGY]  result  =  lvalDecimal  &  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDecimal  &  rvalDecimal;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  &  rvalDecimal;	  result    =    lvalDecimal    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	9	None	replace
25	[BUG]  [BUGGY]  result  =  lvalDecimal  +  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]            AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDecimal  +  rvalDecimal;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  +  rvalDecimal;	  result    =    lvalDecimal    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	9	None	replace
26	[BUG]  [BUGGY]  result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >=  >  MAX_FOLD_NUMBER;	  result    =    lvalInt    >=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
27	[BUG]  [BUGGY]  result  =  lvalInt!=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt!=  >  MAX_FOLD_NUMBER;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt!=  >  MAX_FOLD_NUMBER;	  result    =    lvalInt    >=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
28	[BUG]  [BUGGY]  result  =  lvalInt  >>  >  max_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  >  max_FOLD_NUMBER;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  >>  >  max_FOLD_NUMBER;	  result    =    lvalInt    >=    >    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
29	[BUG]  [BUGGY]  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt!=  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt!=  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  incompatible  types	10	None	replace
30	[BUG]  [BUGGY]  result  =  lvalDouble  >>  >  rvalInt;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >>  >  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  >  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
31	[BUG]  [BUGGY]  result  =  lvalTolerance  >>  rvalInt;  [CE]  cannot  find  symbol  lvalTolerance  [FE]              AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalTolerance  >>  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalTolerance  >>  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalTolerance	10	None	replace
32	[BUG]  [BUGGY]  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]                AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  ==  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  ==  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  incompatible  types	10	None	replace
33	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  >  MAX_FOLD_NUMBER;  [CE]  cannot  find  symbol  Delete  [FE]        AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  [Delete]  >  MAX_FOLD_NUMBER;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  [Delete]  >  MAX_FOLD_NUMBER;	  result    =    lvalInt    >>    >    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  Delete	1	None	replace
34	[BUG]  [BUGGY]  result  =  lvalDouble  >=  >  MAX_FOLD_NUMBER;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >=  >  MAX_FOLD_NUMBER;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >=  >  MAX_FOLD_NUMBER;	  result    =    lvalDouble    >>    >    rvalDouble;    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
35	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  >=  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  >=  rvalInt;	  	non-compiled	[CE]  incompatible  types	11	None	add
36	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt!=  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt!=  rvalInt;	  	non-compiled	[CE]  incompatible  types	11	None	add
37	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  ==  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  ==  rvalInt;	  	non-compiled	[CE]  incompatible  types	11	None	add
38	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalInt  [Delete]  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalInt  [Delete]  rvalInt;	  	non-compiled	[CE]  ';'  expected	11	None	add
39	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [CE]  cannot  find  symbol  Result  [FE]            AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  Result  =  lvalInt  >>  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    Result  =  lvalInt  >>  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  Result	11	None	add
40	[BUG]  [BUGGY]      result  =  lvalDouble  <  <  rvalInt;  break;  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]      result  =  lvalDouble  <  <  rvalInt;  break;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	        result  =  lvalDouble  <  <  rvalInt;  break;	  	non-compiled	[CE]  >  expected	7	None	add
41	[BUG]  [BUGGY]      result  =  lvalDecimal  <  <  rvalDecimal;  break;  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]      result  =  lvalDecimal  <  <  rvalDecimal;  break;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	        result  =  lvalDecimal  <  <  rvalDecimal;  break;	  	non-compiled	[CE]  >  expected	7	None	add
42	[BUG]  [BUGGY]  result  =  lvalDecimal  >>  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]        AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDecimal  >>  rvalDecimal;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  >>  rvalDecimal;	  result    =    lvalDecimal    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	9	None	replace
43	[BUG]  [BUGGY]  result  =  lvalDecimal  %  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDecimal  %  rvalDecimal;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  %  rvalDecimal;	  result    =    lvalDecimal    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	9	None	replace
44	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalDecimal;  [CE]  >  expected  [FE]            AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  <  <  rvalDecimal;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rvalDecimal;	  result    =    lvalDecimal    <    <    rvalDecimal;    	non-compiled	[CE]  >  expected	9	None	replace
45	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rvalDouble;  [CE]  >  expected  [FE]        AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  <  <  rvalDouble;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rvalDouble;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  >  expected	13	None	replace
46	[BUG]  [BUGGY]  result  =  lvalDouble  +  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  +  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  +  rvalInt;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	13	None	replace
47	[BUG]  [BUGGY]  result  =  lvalDouble  %  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]            AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  %  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  %  rvalInt;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	13	None	replace
48	[BUG]  [BUGGY]  result  =  lvalInt  <  <  rval;  [CE]  >  expected  [FE]              AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  <  <  rval;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  <  <  rval;	  result    =    lvalDouble    <    <    rvalInt;    	non-compiled	[CE]  >  expected	13	None	replace
49	[BUG]  [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  [Delete]  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  [Delete]  rvalInt;	  result    =    lvalDouble    >=    rvalInt;    	non-compiled	[CE]  ';'  expected	14	None	replace
50	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalDouble;  [CE]  cannot  find  symbol  lvalDouble  [FE]            AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >>  rvalDouble;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  rvalDouble;	  result    =    lvalDouble    >>    >    rvalDouble;    	non-compiled	[CE]  cannot  find  symbol  lvalDouble	3	None	replace
51	[BUG]  [BUGGY]  result  =  lvalToInt  >>  rvalInt;  [CE]  cannot  find  symbol  lvalToInt  [FE]          AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalToInt  >>  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalToInt  >>  rvalInt;	  result    =    lvalDouble    >>    rvalInt;    	non-compiled	[CE]  cannot  find  symbol  lvalToInt	10	None	replace
52	[BUG]  [BUGGY]  result  =  lvalDouble  >>  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]    AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >>  rvalInt;  break;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >>  rvalInt;  break;	      	non-compiled	[CE]  cannot  find  symbol  lvalDouble	8	None	replace
53	[BUG]  [BUGGY]  result  =  lvalDouble  >=  rvalInt;  break;  [CE]  cannot  find  symbol  lvalDouble  [FE]      AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDouble  >=  rvalInt;  break;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDouble  >=  rvalInt;  break;	      	non-compiled	[CE]  cannot  find  symbol  lvalDouble	8	None	replace
54	[BUG]  [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >=  rvalInt;  [CE]  cannot  find  symbol  lvalDouble  [FE]    AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  >>  rvalInt;  result  =  lvalDouble  >=  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result    =    lvalInt    >>    rvalInt;    result  =  lvalDouble  >=  rvalInt;	  	non-compiled	[CE]  cannot  find  symbol  lvalDouble	11	None	add
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  +  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	add	result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    >>    rvalInt;    	compilable	  [FE]  AssertionError  	12	1	replace
56	[BUG]  [BUGGY]  result  =  lvalInt  +  rvalInt;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalInt  +  rvalInt;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalInt  +  rvalInt;	  result    =    lvalInt    >>    rvalInt;    	compilable	  [FE]  AssertionError  	12	1	replace
57	[BUG]  [BUGGY]  result  =  lvalDecimal  >=  rvalDecimal;  [CE]  cannot  find  symbol  lvalDecimal  [FE]        AssertionFailedError    [CONTEXT]    result  =  lvalInt  <<  rvalInt;  break;  case  Token.RSH:  result  =  lvalInt  >>  rvalInt;  break;  case  Token.URSH:    result  =  lvalInt  >>>  rvalInt;    [BUGGY]  result  =  lvalDecimal  >=  rvalDecimal;  [BUGGY]    default:  throw  new  AssertionError(   "Unknown  shift  operator:     "  +  Node.tokenToName(n.getType()));  }  Node  newNumber  =  Node.newNumber(result);  n.getParent().replaceChild(n,  newNumber);  reportCodeChange();  return  newNumber;  [CLASS]  PeepholeFoldConstants  [METHOD]  tryFoldShift  [RETURN_TYPE]  Node  Node  n  Node  left  Node  right  [VARIABLES]  boolean  DiagnosticType  BITWISE_OPERAND_OUT_OF_RANGE  DIVIDE_BY_0_ERROR  FRACTIONAL_BITWISE_OPERAND  INDEX_OUT_OF_BOUNDS_ERROR  INVALID_GETELEM_INDEX_ERROR  NEGATING_A_NON_NUMBER_ERROR  SHIFT_AMOUNT_OUT_OF_BOUNDS  double  MAX_FOLD_NUMBER  lval  negNum  result  resultDouble  rval  val  int  lvalInt  rvalInt  Node  left  n  newNumber  right  	projects/Closure97/src/com/google/javascript/jscomp/PeepholeFoldConstants.java	1.0	699	699	1	replace	result  =  lvalDecimal  >=  rvalDecimal;	  result    =    lvalDecimal    <    <    rvalDecimal;    	non-compiled	[CE]  cannot  find  symbol  lvalDecimal	9	None	replace
