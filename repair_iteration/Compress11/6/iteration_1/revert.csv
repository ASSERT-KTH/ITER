projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.reset();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.close();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.mark(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.skipChildren();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.markSupported();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.read();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.read(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,tarheader);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,TarArchiveInputStream.DEFAULT);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signature,TarArchiveInputStream.DEFAULT);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,TarArchiveInputStream.DEFAULT|TarArchiveInputStream.DEFAULT);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,TarArchiveInputStream.DEFAULT));
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,TarArchiveInputStream.DEFAULT)+1;
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,TarArchiveInputStream.DEFAULT-signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211InputStreamin=in.readInt();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.read(signature);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.mark(signature.length);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.mark(signatureLength+12);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.mark(signatureLength+1);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.mark(signatureLength-1);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.mark(signatureLength-12);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.skip(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,tarheader.length);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,dumpsig);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signature,tarheader);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,dumpsig.length);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,cacherName);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,4096);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.skipChildren(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211InputStreamin=tais.getInputStream();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.readFully(signature);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.readFully(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.read(signature.length);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.read(signatureLength,tarheader);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength-1);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength+12);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength-12);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength+1);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211tais.close();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.flush();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.write(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.markSupported(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.setSupported(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.setSupported(true);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.skipSupported();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.read(signatureLength-1);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.read(signature,0,signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,12);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,10);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,tais);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength-2);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength+11);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.mark(signatureLength+11);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.seek(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.copyCurrentStructure(signature);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.copyCurrentStructure(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.setChildren(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211if(signatureLength==2){returnnewTarArchiveInputStream(in);}else{returnnewTarArchiveInputStream(in);}
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211if(signatureLength!=2){returnnewTarArchiveInputStream(in);}else{returnnewTarArchiveInputStream(in);}
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211if(signatureLength==2){thrownewIllegalArgumentException("");}
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211if(signatureLength==2){returnnewTarArchiveInputStream(in);}
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211if(signatureLength==2){returnnewTarArchiveInputStream(in);}else{thrownewIllegalArgumentException("");}
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211tais.markSupported();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,TarArchiveInputStream.DEFAULT-1);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength-1,TarArchiveInputStream.DEFAULT);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.defaultReader().write(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211InputStreamin=in.read(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.setState(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211tais.skipChildren();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.setChildren(chunkerLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.set(signatureLength,TarArchiveInputStream.DEFAULT)-1;
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211in.setLength(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211InputStreamin=newbyte[signatureLength];
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211InputStreamin=tais.getInputStream(signatureLength);
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211InputStreamin=newbyte[signatureLength].readInt();
projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java211InputStreamin=newbyte[signatureLength+12];
