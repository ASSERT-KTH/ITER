bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  in.readFully(tarheader);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.readFully(tarheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.readFully(tarheader);	  in.read();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
2	[BUG]  [BUGGY]  in.readFully(signature);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.readFully(signature);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.readFully(signature);	  in.read();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
3	[BUG]  [BUGGY]  in.readFully(dumpsig);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.readFully(dumpsig);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.readFully(dumpsig);	  in.read();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
4	[BUG]  [BUGGY]  in.readFully();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.readFully();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.readFully();	  in.read();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
5	[BUG]  [BUGGY]  in.readFully(signatureLength);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.readFully(signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.readFully(signatureLength);	  in.read();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
6	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  ZipArchiveInputStream))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  ZipArchiveInputStream))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  ZipArchiveInputStream))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
7	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  SignatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  SignatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
8	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  tarheader))  {	  }    else    if(JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
9	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  DUMP))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  DUMP))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  DUMP))  {	  }    else    if(JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
10	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  tarheaderLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  tarheaderLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  tarheaderLength))  {	  }    else    if(JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
11	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
12	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
13	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
14	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
15	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  tarheader)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  tarheader)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  tarheader)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
16	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  ZipArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
17	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    tarheader)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
18	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  JAR)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  JAR)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  JAR)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    tarheader)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
19	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
20	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
21	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  LENGTH)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  LENGTH)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  LENGTH)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
22	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  tarheader)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  tarheader)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  tarheader)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
23	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
24	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
25	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
26	[BUG]  [BUGGY]  InputStream  in  =  this.tarheader.readIn();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.tarheader.readIn();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.tarheader.readIn();	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
27	[BUG]  [BUGGY]  InputStream  in  =  tais.readFile();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readFile();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readFile();	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
28	[BUG]  [BUGGY]  InputStream  in  =  tarheader.readIn();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tarheader.readIn();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tarheader.readIn();	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
29	[BUG]  [BUGGY]  InputStream  in  =  TarArchiveInputStream.readIn();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  TarArchiveInputStream.readIn();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  TarArchiveInputStream.readIn();	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
30	[BUG]  [BUGGY]  InputStream  in  =  this.tais.readIn();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.tais.readIn();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.tais.readIn();	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
31	[BUG]  [BUGGY]  InputStream  in  =  tais.readIn(in);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readIn(in);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readIn(in);	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
32	[BUG]  [BUGGY]  in.copyCurrentStructure(signature);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.copyCurrentStructure(signature);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.copyCurrentStructure(signature);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
33	[BUG]  [BUGGY]  in.copyCurrentStructure(in);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.copyCurrentStructure(in);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.copyCurrentStructure(in);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  in.copyCurrentStructure(signatureLength);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.copyCurrentStructure(signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.copyCurrentStructure(signatureLength);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength))  {	  }    else    if(tarheader    ==    null    &&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
36	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader    ==    null    &&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
37	[BUG]  [BUGGY]  InputStream  in  =  TarArchiveInputStream.getInputStream();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  TarArchiveInputStream.getInputStream();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  TarArchiveInputStream.getInputStream();	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
38	[BUG]  [BUGGY]  InputStream  in  =  this.tarheader.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.tarheader.getInputStream();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.tarheader.getInputStream();	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
39	[BUG]  [BUGGY]  InputStream  in  =  tarheader.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tarheader.getInputStream();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tarheader.getInputStream();	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
40	[BUG]  [BUGGY]  InputStream  in  =  this.tais.getInputStream();  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.tais.getInputStream();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.tais.getInputStream();	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
41	[BUG]  [BUGGY]  InputStream  in  =  tais.getInputStream( "UTF-8 ");  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.getInputStream( "UTF-8 ");  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.getInputStream( "UTF-8 ");	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
42	[BUG]  [BUGGY]  InputStream  in  =  tais.readInputStream();  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readInputStream();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readInputStream();	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
43	[BUG]  [BUGGY]  }  else  if(ArArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
44	[BUG]  [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TarArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
45	[BUG]  [BUGGY]  }  else  if(ArArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JAR.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
46	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  DUMP))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  DUMP))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  DUMP))  {	  }    else    if(JAR.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
47	[BUG]  [BUGGY]  }  else  if(jar.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(jar.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(jar.matches(signature,  signatureLength))  {	  }    else    if(JAR.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
48	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JAR.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
49	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  SignatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  SignatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    SignatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
50	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signature,  SignatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signature,  SignatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    SignatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
51	[BUG]  [BUGGY]  }  else  if(ArchiveFactory.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveFactory.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveFactory.matches(signature,  tarheader))  {	  }    else    if(ArchiveFactory.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
52	[BUG]  [BUGGY]  }  else  if(ArchiveFactory.matches(signature,  DUMP))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveFactory.matches(signature,  DUMP))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveFactory.matches(signature,  DUMP))  {	  }    else    if(ArchiveFactory.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
53	[BUG]  [BUGGY]  }  else  if(ArchiveFactory.matches(signature,  tarheaderLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveFactory.matches(signature,  tarheaderLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveFactory.matches(signature,  tarheaderLength))  {	  }    else    if(ArchiveFactory.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
54	[BUG]  [BUGGY]  }  else  if(ArchiveFactory.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveFactory.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveFactory.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveFactory.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
55	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(signatureLength);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(signatureLength);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
56	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.getBytes());  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.getBytes());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.getBytes());	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
57	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  tarheader);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  tarheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in,  tarheader);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
58	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.getVersion());  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.getVersion());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.getVersion());	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
59	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.getRawClass());  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.getRawClass());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.getRawClass());	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
60	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  signatureLength);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in,  signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in,  signatureLength);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
61	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  &&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  &&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  &&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
62	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  ||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  ||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  ||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
63	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  ||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  ||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  ||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
64	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
65	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
66	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
67	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
68	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)&&  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)&&  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)&&  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
69	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  SignatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  SignatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
70	[BUG]  [BUGGY]  }  else  if(tarheaderLength.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength.matches(signature,  signatureLength))  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
71	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  tarheaderLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  tarheaderLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  tarheaderLength))  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
72	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  LENGTH)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  LENGTH)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  LENGTH)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
73	[BUG]  [BUGGY]  }  else  if(jarFactory.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(jarFactory.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(jarFactory.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
74	[BUG]  [BUGGY]  }  else  if(jars.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(jars.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(jars.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
75	[BUG]  [BUGGY]  InputStream  in  =  archiverName.getInputStream();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  archiverName.getInputStream();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  archiverName.getInputStream();	  InputStream    in    =    this.archiverName.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
76	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.openStream();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.archiverName.openStream();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.archiverName.openStream();	  InputStream    in    =    this.archiverName.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
77	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.getInputStream(),  in);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.archiverName.getInputStream(),  in);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.archiverName.getInputStream(),  in);	  InputStream    in    =    this.archiverName.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
78	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.getInputStream(in);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.archiverName.getInputStream(in);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.archiverName.getInputStream(in);	  InputStream    in    =    this.archiverName.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
79	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
80	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)&&  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)&&  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)&&  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
81	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength)||  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength)||  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  SignatureLength)||  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
82	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
83	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
84	[BUG]  [BUGGY]  InputStream  in  =  in.readUTF();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  in.readUTF();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  in.readUTF();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
85	[BUG]  [BUGGY]  InputStream  in  =  in.readFully();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  in.readFully();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  in.readFully();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
86	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInt();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.in.readInt();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.in.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
87	[BUG]  [BUGGY]  InputStream  in  =  tarheader.readInt();  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tarheader.readInt();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tarheader.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
88	[BUG]  [BUGGY]  InputStream  in  =  in.readIO();  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  in.readIO();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  in.readIO();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
89	[BUG]  [BUGGY]  InputStream  in  =  in.readInt()  -  1;  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  in.readInt()  -  1;  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  in.readInt()  -  1;	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
90	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signatureLength,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signatureLength,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signatureLength,  tarheader))  {	  }    else    if(ArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
91	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  SignatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  SignatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
92	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DUMP)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DUMP)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  DUMP)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    DUMP)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
93	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  LUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  LUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  LUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    DUMP)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
94	[BUG]  [BUGGY]  }  else  if  (tarheader.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if  (tarheader.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if  (tarheader.matches(signature,  tarheader))  {	  }    else    if    (jarArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
95	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
96	[BUG]  [BUGGY]  }  else  if(DUMP.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMP.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMP.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
97	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  JAR))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  JAR))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  JAR))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    DUMP))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
98	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  ZAR))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  ZAR))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  ZAR))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    DUMP))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
99	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
100	[BUG]  [BUGGY]  }  else  if(DUMP.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMP.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMP.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
101	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
102	[BUG]  [BUGGY]  }  else  if(DUMP.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMP.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMP.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
103	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  JAR))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  JAR))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  JAR))  {	  }    else    if(ArchiveInputStream.matches(signature,    DUMP))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
104	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
105	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)&&  DUMP.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)&&  DUMP.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  signatureLength)&&  DUMP.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
106	[BUG]  [BUGGY]  }  else  if(DUMP.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMP.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMP.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
107	[BUG]  [BUGGY]  }  else  if(ArArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
108	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
109	[BUG]  [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TarArchiveInputStream.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
110	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  DUMPArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  DUMPArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  DUMPArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMPArchiveInputStream.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
111	[BUG]  [BUGGY]  }  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMPArchiveInputStream.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
112	[BUG]  [BUGGY]  }  else  if(tais  ==  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tais  ==  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tais  ==  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader    ==    null    ||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
113	[BUG]  [BUGGY]  }  else  if(tarheaders  ==  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaders  ==  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaders  ==  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader    ==    null    ||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
114	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
115	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
116	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  tarheader)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  tarheader)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  tarheader)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
117	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  12)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  12)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  12)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
118	[BUG]  [BUGGY]  }  else  if(TarArchiveInputStream!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TarArchiveInputStream!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TarArchiveInputStream!=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    ||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
119	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(signatureLength);  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(signatureLength);	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
120	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in.read());  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in.read());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(in.read());	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
121	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in,  tarheader);  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in,  tarheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(in,  tarheader);	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
122	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in.getRawClass());  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in.getRawClass());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(in.getRawClass());	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
123	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in,  signatureLength);  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in,  signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(in,  signatureLength);	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
124	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(signature);  [CE]  illegal  start  of  expression  [FE]                                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(signature);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(signature);	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
125	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in.getVersion());  [CE]  illegal  start  of  expression  [FE]                                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in.getVersion());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(in.getVersion());	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
126	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
127	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  ||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  ||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  ||  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
128	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  ||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  ||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  ||  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
129	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  SignatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  SignatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  SignatureLength))  {	  }    else    if(tarheader!=    null    &&    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
130	[BUG]  [BUGGY]  }  else  if(tarheader  >=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  >=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  >=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
131	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  LUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  LUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  LUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    DUMP)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
132	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    DUMP)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
133	[BUG]  [BUGGY]  }  else  if(ArArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
134	[BUG]  [BUGGY]  in.flush();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.flush();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.flush();	  in.close();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
135	[BUG]  [BUGGY]  tarheader.close();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  tarheader.close();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	tarheader.close();	  in.close();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
136	[BUG]  [BUGGY]  in.write(tarheader,  0,  signatureLength);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.write(tarheader,  0,  signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.write(tarheader,  0,  signatureLength);	  in.close();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
137	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  InputStreamInputStream(in.read());	  in.close();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
138	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  tarheaderLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  tarheaderLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  tarheaderLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    signatureLength)&&    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
139	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  tarheader)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  tarheader)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  tarheader)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    signatureLength)&&    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
140	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  in.length);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  in.length);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.read(),  in.length);	  InputStream    in    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
141	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  in.read());  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  in.read());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.read(),  in.read());	  InputStream    in    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
142	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read()  +  1);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read()  +  1);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.read()  +  1);	  InputStream    in    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
143	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  in.getVersion());  [CE]  illegal  start  of  expression  [FE]                                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  in.getVersion());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.read(),  in.getVersion());	  InputStream    in    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
144	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  signatureLength);  [CE]  illegal  start  of  expression  [FE]                                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.read(),  signatureLength);	  InputStream    in    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
145	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.readLine());  [CE]  illegal  start  of  expression  [FE]                                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.readLine());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.readLine());	  InputStream    in    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
146	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  signatureLength)||  tarheader.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  signatureLength)||  tarheader.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  signatureLength)||  tarheader.matches(signature,  signatureLength))  {	  }    else    if(tarheader.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
147	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  DUMP))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  DUMP))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  DUMP))  {	  }    else    if(tarheader.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
148	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
149	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
150	[BUG]  [BUGGY]  }  else  if(DUMP.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMP.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMP.matches(signature,  signatureLength)&&  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
151	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
152	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  DUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
153	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
154	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  tarheaderLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  tarheaderLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  tarheaderLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
155	[BUG]  [BUGGY]  in.mark(signature.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.mark(signature.length);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.mark(signature.length);	  in.mark(signatureLength);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
156	[BUG]  [BUGGY]  in.mark(dumpsig.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.mark(dumpsig.length);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.mark(dumpsig.length);	  in.mark(signatureLength);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
157	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.mark(signatureLength  +  1);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.mark(signatureLength  +  1);	  in.mark(signatureLength);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
158	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.mark(signatureLength  -  1);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.mark(signatureLength  -  1);	  in.mark(signatureLength);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
159	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.mark(signatureLength  +  12);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.mark(signatureLength  +  12);	  in.mark(signatureLength);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
160	[BUG]  [BUGGY]  in.skip(signatureLength);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.skip(signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.skip(signatureLength);	  in.mark(signatureLength);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
161	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  LUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  LUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  LUMP)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    DUMP)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
162	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  JAR)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  JAR)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  JAR)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    DUMP)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
163	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  signatureLength))  {	  }    else    if(tarheader!=    null    ||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
164	[BUG]  [BUGGY]  }  else  if(TAR.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TAR.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TAR.matches(signature,  signatureLength))  {	  }    else    if(JAR.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
165	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
166	[BUG]  [BUGGY]  in.copyCurrentStructure(tarheader);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.copyCurrentStructure(tarheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.copyCurrentStructure(tarheader);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
167	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
168	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  signatureLength)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
169	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  TarArchiveInputStream.DEFAULT))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  TarArchiveInputStream.DEFAULT))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  TarArchiveInputStream.DEFAULT))  {	  }    else    if(tarheader    ==    null    ||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
170	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  TarArchiveInputStream.FIELD_NAME))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  TarArchiveInputStream.FIELD_NAME))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  ||  JarArchiveInputStream.matches(signatureLength,  TarArchiveInputStream.FIELD_NAME))  {	  }    else    if(tarheader    ==    null    ||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
171	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
172	[BUG]  [BUGGY]  InputStream  in  =  tais.getInputStream(archiverName);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.getInputStream(archiverName);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.getInputStream(archiverName);	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
173	[BUG]  [BUGGY]  InputStream  in  =  tais.getInputStream(tarheader);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.getInputStream(tarheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.getInputStream(tarheader);	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
174	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(tarheader));  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(tarheader));  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.read(tarheader));	  InputStream    in    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
175	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.readInt();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.archiverName.readInt();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.archiverName.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
176	[BUG]  [BUGGY]  InputStream  in  =  this.tarheader.readInt();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.tarheader.readInt();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.tarheader.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
177	[BUG]  [BUGGY]  InputStream  in  =  tais.readInt();  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readInt();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
178	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  DUMPArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  DUMPArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  signatureLength)||  DUMPArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
179	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  DUMP)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
180	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
181	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  ZipArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
182	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DEPRECATED)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DEPRECATED)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  DEPRECATED)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
183	[BUG]  [BUGGY]  in.read(tarheader);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.read(tarheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.read(tarheader);	  in.read();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
184	[BUG]  [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TarArchiveInputStream.matches(signature,  DUMP)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    DUMP)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
185	[BUG]  [BUGGY]  }  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength)||  JARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    DUMP)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
186	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  signatureLength)||  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength)||    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
187	[BUG]  [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  JAR))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JARArchiveInputStream.matches(signature,  JAR))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JARArchiveInputStream.matches(signature,  JAR))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    DUMP))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
188	[BUG]  [BUGGY]  }  else  if  (tarheader.matches(signature,  tarArchiveInputStream))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if  (tarheader.matches(signature,  tarArchiveInputStream))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if  (tarheader.matches(signature,  tarArchiveInputStream))  {	  }    else    if    (jarArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
189	[BUG]  [BUGGY]  }  else  if  (tarheaderArchiveInputStream.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if  (tarheaderArchiveInputStream.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if  (tarheaderArchiveInputStream.matches(signature,  tarheader))  {	  }    else    if    (jarArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
190	[BUG]  [BUGGY]  }  else  if  (tarheader.matches(signature,  jarArchiveInputStream))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if  (tarheader.matches(signature,  jarArchiveInputStream))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if  (tarheader.matches(signature,  jarArchiveInputStream))  {	  }    else    if    (jarArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
191	[BUG]  [BUGGY]  }  else  if(tarheader!=  JAR  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  JAR  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  JAR  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    tarheader)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
192	[BUG]  [BUGGY]  }  else  if(tarheader  ==  JAR  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  JAR  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  JAR  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    tarheader)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
193	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    tarheader)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
194	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    tarheader)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
195	[BUG]  [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TarArchiveInputStream.matches(signature,  tarheader))  {	  }    else    if(ArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
196	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  ArchiveInputStream.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  ArchiveInputStream.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  ArchiveInputStream.matches(signature,  tarheader))  {	  }    else    if(ArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
197	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  JarArchiveInputStream.matches(signature,  tarheader))  {	  }    else    if(ArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
198	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  tarArchiveInputStream.length)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  tarArchiveInputStream.length)  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  tarArchiveInputStream.length)  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
199	[BUG]  [BUGGY]  }  else  if(tarheaderLength!=  jarArchiveInputStream.length)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength!=  jarArchiveInputStream.length)  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength!=  jarArchiveInputStream.length)  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
200	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  jarArchiveInputStream.length)  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  jarArchiveInputStream.length)  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  jarArchiveInputStream.length)  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
201	[BUG]  [BUGGY]  }  else  if(tarheaderLength!=  tarArchiveInputStream.length)  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength!=  tarArchiveInputStream.length)  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength!=  tarArchiveInputStream.length)  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
202	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  jarArchiveInputStream.getName())  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  jarArchiveInputStream.getName())  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  jarArchiveInputStream.getName())  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
203	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  jarArchiveInputStream.getParent())  {  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  jarArchiveInputStream.getParent())  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  jarArchiveInputStream.getParent())  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
204	[BUG]  [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TarArchiveInputStream.matches(signature,  LENGTH)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
205	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
206	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
207	[BUG]  [BUGGY]  }  else  if(tarheader  ==  ZipArchiveInputStream.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  ZipArchiveInputStream.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  ZipArchiveInputStream.matches(signature,  tarheader))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
208	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  zipArchiveInputStream))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  zipArchiveInputStream))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  zipArchiveInputStream))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
209	[BUG]  [BUGGY]  }  else  if(TARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
210	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.JAR)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.JAR)  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  ZipArchiveInputStream.JAR)  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
211	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.DEFAULT)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.DEFAULT)  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  ZipArchiveInputStream.DEFAULT)  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
212	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.RELATIVE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.RELATIVE)  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  ZipArchiveInputStream.RELATIVE)  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
213	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.DEFAULT_WRITE)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.DEFAULT_WRITE)  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  ZipArchiveInputStream.DEFAULT_WRITE)  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
214	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(signature);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(signature);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(signature);	  InputStream    in    =    new    ZipInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
215	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  DEPRECATED)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
216	[BUG]  [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TarArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TarArchiveInputStream.matches(signature,  LENGTH)||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    LENGTH)||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
217	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
218	[BUG]  [BUGGY]  in.set(signatureLength,  tarheader);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.set(signatureLength,  tarheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.set(signatureLength,  tarheader);	  in.close();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
219	[BUG]  [BUGGY]  InputStream  in  =  tais.readFully(in);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readFully(in);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readFully(in);	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
220	[BUG]  [BUGGY]  InputStream  in  =  tais.readFully(signature);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readFully(signature);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readFully(signature);	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
221	[BUG]  [BUGGY]  InputStream  in  =  tais.readFully();  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readFully();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readFully();	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
222	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.getInputStream(this.tarheader);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.archiverName.getInputStream(this.tarheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.archiverName.getInputStream(this.tarheader);	  InputStream    in    =    this.archiverName.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
223	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.openArchive();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.archiverName.openArchive();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.archiverName.openArchive();	  InputStream    in    =    this.archiverName.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
224	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DUMP))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  DUMP))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  DUMP))  {	  }    else    if(ArchiveInputStream.matches(signature,    DUMP))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
225	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  tais.matches(signature,  signatureLength)||  tarheader.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  tais.matches(signature,  signatureLength)||  tarheader.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  tais.matches(signature,  signatureLength)||  tarheader.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
226	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
227	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    tais.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
228	[BUG]  [BUGGY]  }  else  if(tarheaders!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaders!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaders!=  null  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    ||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
229	[BUG]  [BUGGY]  tais.skipChildren();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  tais.skipChildren();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	tais.skipChildren();	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
230	[BUG]  [BUGGY]  in.setChildren(signatureLength);  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.setChildren(signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.setChildren(signatureLength);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
231	[BUG]  [BUGGY]  in.setChildren(chunks);  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.setChildren(chunks);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.setChildren(chunks);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
232	[BUG]  [BUGGY]  in.setChildren(dirty);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.setChildren(dirty);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.setChildren(dirty);	  in.skipChildren();    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
233	[BUG]  [BUGGY]  tais.close();  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  tais.close();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	tais.close();	  in.close();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
234	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(signature.length);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(signature.length);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(signature.length);	  in.close();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
235	[BUG]  [BUGGY]  InputStream  in  =  new  FileInputStream(in.read());  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  FileInputStream(in.read());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  FileInputStream(in.read());	  in.close();    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
236	[BUG]  [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  DEPRECATED))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ZipArchiveInputStream.matches(signature,  DEPRECATED))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ZipArchiveInputStream.matches(signature,  DEPRECATED))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    DUMP))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
237	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  jarArchiveInputStream.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  jarArchiveInputStream.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  jarArchiveInputStream.matches(signature,  tarheader))  {	  }    else    if    (jarArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
238	[BUG]  [BUGGY]  in.read(dumpsig.length);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.read(dumpsig.length);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.read(dumpsig.length);	  in.read();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
239	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DEPRECATED))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  DEPRECATED))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  DEPRECATED))  {	  }    else    if(ArchiveInputStream.matches(signature,    DUMP))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
240	[BUG]  [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  tarheaderLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(ArchiveInputStream.matches(signature,  tarheaderLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(ArchiveInputStream.matches(signature,  tarheaderLength))  {	  }    else    if(ArchiveInputStream.matches(signature,    DUMP))    {    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
241	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.openInputStream();  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.archiverName.openInputStream();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.archiverName.openInputStream();	  InputStream    in    =    this.archiverName.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
242	[BUG]  [BUGGY]  InputStream  in  =  this.archiverName.openZip();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  this.archiverName.openZip();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  this.archiverName.openZip();	  InputStream    in    =    this.archiverName.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
243	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in.readLine());  [CE]  illegal  start  of  expression  [FE]                                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in.readLine());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(in.readLine());	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
244	[BUG]  [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in,  archiverName);  [CE]  illegal  start  of  expression  [FE]                                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipArchiveInputStream(in,  archiverName);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipArchiveInputStream(in,  archiverName);	  InputStream    in    =    new    ZipArchiveInputStream(in);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
245	[BUG]  [BUGGY]  }  else  if(TaisArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(TaisArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(TaisArchiveInputStream.matches(signature,  tarheader)&&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(JarArchiveInputStream.matches(signature,    tarheader)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
246	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  ZipArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
247	[BUG]  [BUGGY]  }  else  if(tarheaderLength  <  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  <  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  <  ZipArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
248	[BUG]  [BUGGY]  }  else  if(tarheaderLength  <  ZipArchiveInputStream.matches(signature,  tarheaderLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  <  ZipArchiveInputStream.matches(signature,  tarheaderLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  <  ZipArchiveInputStream.matches(signature,  tarheaderLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
249	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.matches(signature,  tarheaderLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  ZipArchiveInputStream.matches(signature,  tarheaderLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  ZipArchiveInputStream.matches(signature,  tarheaderLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
250	[BUG]  [BUGGY]  }  else  if(tarheader  >=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  >=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  >=  null  ||  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader    ==    null    ||    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
251	[BUG]  [BUGGY]  in.set(signatureLength);  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  in.set(signatureLength);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	in.set(signatureLength);	  in.mark(signatureLength);    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
252	[BUG]  [BUGGY]  }  else  if(tarheaderLength.matches(signature,  tarArchiveInputStream))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength.matches(signature,  tarArchiveInputStream))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength.matches(signature,  tarArchiveInputStream))  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
253	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  0  &&  jarArchiveInputStream.matches(signature,  tarheaderLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  0  &&  jarArchiveInputStream.matches(signature,  tarheaderLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  0  &&  jarArchiveInputStream.matches(signature,  tarheaderLength))  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
254	[BUG]  [BUGGY]  }  else  if(tarheaderLength!=  0  &&  jarArchiveInputStream.matches(signature,  tarheaderLength))  {  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength!=  0  &&  jarArchiveInputStream.matches(signature,  tarheaderLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength!=  0  &&  jarArchiveInputStream.matches(signature,  tarheaderLength))  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
255	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  tarLength))  {  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  tarLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  tarLength))  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
256	[BUG]  [BUGGY]  }  else  if(tarheaderLength  ==  0  &&  jarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheaderLength  ==  0  &&  jarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheaderLength  ==  0  &&  jarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(jarArchiveInputStream.matches(signature,    tarheaderLength))    {    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
257	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  tarheader.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  tarheader.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  tarheader.matches(signature,  signatureLength))  {	  }    else    if(tarheader.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
258	[BUG]  [BUGGY]  }  else  if(tarheader  ==  null  &&  tarheader.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader  ==  null  &&  tarheader.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader  ==  null  &&  tarheader.matches(signature,  signatureLength))  {	  }    else    if(tarheader.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
259	[BUG]  [BUGGY]  }  else  if(tarheader.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.matches(signature,  signatureLength)||  tais.matches(signature,  signatureLength))  {	  }    else    if(tarheader.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
260	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {	  }    else    if(JAR.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
261	[BUG]  [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  JAR.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JAR.matches(signature,  signatureLength)||  JAR.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JAR.matches(signature,  signatureLength)||  JAR.matches(signature,  signatureLength))  {	  }    else    if(JAR.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
262	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  ZipArchiveInputStream.matches(signature,  tarheader))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  ZipArchiveInputStream.matches(signature,  tarheader))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  ZipArchiveInputStream.matches(signature,  tarheader))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    tarheader))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
263	[BUG]  [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  in.getCharset());  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  new  ZipInputStream(in.read(),  in.getCharset());  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  new  ZipInputStream(in.read(),  in.getCharset());	  InputStream    in    =    new    ZipInputStream(in.read());    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
264	[BUG]  [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)&&  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(JarArchiveInputStream.matches(signature,  signatureLength)&&  ZipArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(JarArchiveInputStream.matches(signature,  signatureLength)&&  ZipArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(ZipArchiveInputStream.matches(signature,    signatureLength)&&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
265	[BUG]  [BUGGY]  InputStream  in  =  tais.readIn(signature);  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readIn(signature);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readIn(signature);	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
266	[BUG]  [BUGGY]  InputStream  in  =  tais.readIO();  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.readIO();  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.readIO();	  InputStream    in    =    tais.readIn();    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
267	[BUG]  [BUGGY]  }  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMPArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
268	[BUG]  [BUGGY]  }  else  if(DUMP.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMP.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMP.matches(signature,  signatureLength)||  DUMP.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
269	[BUG]  [BUGGY]  }  else  if(DUMP.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(DUMP.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(DUMP.matches(signature,  signatureLength)||  TAR.matches(signature,  signatureLength))  {	  }    else    if(DUMP.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
270	[BUG]  [BUGGY]  }  else  if(tarheader.length  ==  0  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader.length  ==  0  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader.length  ==  0  &&  JarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader    ==    null    &&    JarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
271	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  TarArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  TarArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TarArchiveInputStream.matches(signature,  signatureLength)&&  TarArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JarArchiveInputStream.matches(signature,    signatureLength)||    TarArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
272	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  JavaArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  JavaArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  JavaArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
273	[BUG]  [BUGGY]  }  else  if(tarheader!=  null  &&  TARArchiveInputStream.matches(signature,  signatureLength))  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  }  else  if(tarheader!=  null  &&  TARArchiveInputStream.matches(signature,  signatureLength))  {  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	}  else  if(tarheader!=  null  &&  TARArchiveInputStream.matches(signature,  signatureLength))  {	  }    else    if(tarheader!=    null    &&    JARArchiveInputStream.matches(signature,    signatureLength))    {    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
274	[BUG]  [BUGGY]  InputStream  in  =  tais.getInputStream(PRINT_SIGNATURE);  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.getInputStream(PRINT_SIGNATURE);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.getInputStream(PRINT_SIGNATURE);	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
275	[BUG]  [BUGGY]  InputStream  in  =  tais.getInputStream(arheader);  [CE]  illegal  start  of  expression  [FE]                                AssertionError      [CONTEXT]      throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  in.read(signature);  in.reset();  if  (ZipArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ZipArchiveInputStream(in);      [BUGGY]  InputStream  in  =  tais.getInputStream(arheader);  [BUGGY]      return  new  JarArchiveInputStream(in);  }  else  if  (ArArchiveInputStream.matches(signature,  signatureLength))  {  return  new  ArArchiveInputStream(in);  }  else  if  (CpioArchiveInputStream.matches(signature,  signatureLength))  {  return  new  CpioArchiveInputStream(in);  }  final  byte[]  dumpsig  =  new  byte[32];  in.mark(dumpsig.length);  [CLASS]  ArchiveStreamFactory  [METHOD]  createArchiveInputStream  [RETURN_TYPE]  ArchiveInputStream  InputStream  in  [VARIABLES]  byte[]  dumpsig  signature  tarheader  TarArchiveInputStream  tais  boolean  InputStream  in  String  AR  CPIO  DUMP  JAR  TAR  ZIP  archiverName  IOException  e  int  signatureLength  Exception  e  	projects/Compress11/src/main/java/org/apache/commons/compress/archivers/ArchiveStreamFactory.java	1.0	214	214	1	replace	InputStream  in  =  tais.getInputStream(arheader);	  InputStream    in    =    tais.getInputStream();    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
