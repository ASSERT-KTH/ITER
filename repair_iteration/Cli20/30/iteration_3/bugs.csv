bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
2	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  0]);	  return(String[])tokens.toArray(new    String[tokens.size()    2]);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
3	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  tokens);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
4	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
6	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  options);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
7	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(currentOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(currentOption);	  tokens.add(arguments);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(tokens,  stopAtNonOption);	  Option    currentOption    =    options.getOption(stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
9	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);	  Option    currentOption    =    options.getOption(stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
10	[BUG]  [BUGGY]  tokens.add( ",n ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( ",n ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( ",n ");	  tokens.add(   ",   ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
11	[BUG]  [BUGGY]  Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  <  String>  currentOption  =  options.get(tokens.size()  -  1);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
12	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(tokens.size()  -  1);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
13	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1],  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0],  arguments[1],  stopAtNonOption);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
14	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1].toLowerCase());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1].toLowerCase());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0],  arguments[1].toLowerCase());	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
15	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[2]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[2]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0],  arguments[2]);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
16	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  +  1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  +  1],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  +  1],  stopAtNonOption);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
18	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "null ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "- ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  tokens.add( "[ ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "[ ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( "[ ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
21	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(tokens);	  Option    currentOption    =    options.getOption(stopAtNonOption,    tokens);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
22	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(arguments[1]);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  }	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
26	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(iter,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(iter,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(iter,  stopAtNonOption);	  Option    currentOption    =    options.getOption(stopAtNonOption,    iter);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
27	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  iter);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  iter);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(token,  iter);	  Option    currentOption    =    options.getOption(stopAtNonOption,    iter);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
28	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  iter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens,  iter);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(tokens,  iter);	  Option    currentOption    =    options.getOption(stopAtNonOption,    iter);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
29	[BUG]  [BUGGY]  return(String[])this.keys.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])this.keys.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])this.keys.toArray(new  String[tokens.size()  ]);	  return(String[])keys.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
30	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ]);	  return(String[])keys.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
31	[BUG]  [BUGGY]  return(String[])keys.toArray(new  String[keys.size()  ]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])keys.toArray(new  String[keys.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])keys.toArray(new  String[keys.size()  ]);	  return(String[])keys.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
32	[BUG]  [BUGGY]  tokens.add(arguments[1].toString());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[1].toString());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[1].toString());	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
33	[BUG]  [BUGGY]  tokens.add(arguments[0].toString(),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString(),  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0].toString(),  stopAtNonOption);	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
34	[BUG]  [BUGGY]  tokens.add(arguments[0].toString()  + ", ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString()  + ", ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0].toString()  + ", ");	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
35	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  argument);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  argument);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  argument);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argument);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
36	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  argument);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  argument);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  argument);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    argument);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
37	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
38	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(token,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
39	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
40	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  argument);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  argument);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  argument);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
41	[BUG]  [BUGGY]  tokens.add(arguments[1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[1]);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[1]);	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  tokens.add(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toLowerCase());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0].toLowerCase());	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
43	[BUG]  [BUGGY]  tokens.add(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0],  stopAtNonOption);	  tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
44	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  -1],  stopAtNonOption);	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
45	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	if(stopAtNonOption)  {  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }	  return(String[])options.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
46	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  iter);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  iter);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  iter);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
47	[BUG]  [BUGGY]  tokens.add(arguments[0].toString()  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].toString()  +  1);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0].toString()  +  1);	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
48	[BUG]  [BUGGY]  return(String[])this.options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])this.options.toArray(new  String[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])this.options.toArray(new  String[tokens.size()  ]);	  return(String[])keys.toArray(new    String[tokens.size()]);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
49	[BUG]  [BUGGY]  Ilerator  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Ilerator  iter  =  currentOption.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Ilerator  iter  =  currentOption.iterator();	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
50	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(options,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(options,  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(options,  stopAtNonOption);	  Option    currentOption    =    options.getOption(stopAtNonOption,    tokens);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(startAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(startAtNonOption,  arguments);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(startAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(stopAtNonOption,    tokens);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
52	[BUG]  [BUGGY]  tokens.add( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "stopAtNonOption ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( "stopAtNonOption ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
53	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( "-- ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( "-- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  token);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(stopAtNonOption,  token);	  Option    currentOption    =    options.getOption(stopAtNonOption,    iter);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
55	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  currentOption.arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
56	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    <    String>    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
57	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0],  arguments[1]  +  stopAtNonOption);	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
58	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  options);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
59	[BUG]  [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  tokens.iterator();	  Iterator    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
60	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  0]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  0]);	  return(String[])tokens.toArray(new    String[tokens.size()    1]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
61	[BUG]  [BUGGY]  tokens.add( ",  eatTheRest ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( ",  eatTheRest ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( ",  eatTheRest ");	  tokens.add(   ",   ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
62	[BUG]  [BUGGY]  tokens.add( ",  eat  theRest ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( ",  eat  theRest ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( ",  eat  theRest ");	  tokens.add(   ",   ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
63	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  option  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
64	[BUG]  [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  options  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
65	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens.size());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(tokens.size());	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
66	[BUG]  [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])arguments.toArray(new  String[tokens.size()  ],  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])arguments.toArray(new  String[tokens.size()  ],  token);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
67	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.values().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  currentOption.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
68	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
69	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
70	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
71	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tryFallThrough(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  }	  if(stopAtNonOption)    {    return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
72	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    -1],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
73	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments,  stopAtNonOption);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
74	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  options,  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption,    arguments);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
75	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  iter  =  this.currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
76	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  options);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
77	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  iter  =  this.currentOption.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
78	[BUG]  [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =(this.tokens!=  null)?  this.tokens.iterator()  :  null;	  Iterator    <    String>    iter    =    this.tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
79	[BUG]  [BUGGY]  tokens.add(arguments[0].getName());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0].getName());  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0].getName());	  tokens.add(arguments[0].toString());    	non-compiled	[CE]  <identifier>  expected	27	None	replace
80	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	32	None	replace
81	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]).toLowerCase();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add(arguments[0],  arguments[1]).toLowerCase();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0],  arguments[1]).toLowerCase();	  tokens.add(arguments[0],    arguments[1]);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
82	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  Iterator  <  String>  iter  =  this.currentOption.iterator();  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  this.currentOption.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
83	[BUG]  [BUGGY]  tokens.add( ",  null ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }      [BUGGY]  tokens.add( ",  null ");  [BUGGY]      return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( ",  null ");	  tokens.add(   ",   ");    	non-compiled	[CE]  <identifier>  expected	25	None	replace
