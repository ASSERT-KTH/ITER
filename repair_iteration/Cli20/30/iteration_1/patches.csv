bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
2	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Option  currentOption  =  options.getOption(arguments);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(arguments);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
3	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(arguments[0]);	      Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
4	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
5	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  arguments);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(stopAtNonOption,  arguments);	      Option    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  tokens);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  tokens);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(stopAtNonOption,  tokens);	      Option    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  tokens.add(arguments[0]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  tokens.add(arguments[0]);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0]);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
8	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  tokens.add( "n ");  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( "n ");	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
9	[BUG]  [BUGGY]  tokens.add(arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  tokens.add(arguments);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
10	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  iter  =  this.arguments.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
11	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  iter  =  this.tokens.iterator();	      Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
12	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
13	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])options.toArray(new  String[tokens.size()  ],  stopAtNonOption);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	if(stopAtNonOption)  {  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption);  }	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
15	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  argument);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
16	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  1]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  1]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  1]);	  return(String[])tokens.toArray(new    String[tokens.size()    +    1]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  iter  =  currentOption.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  iter  =  currentOption.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
18	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  this.tokens.iterator();	      Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
19	[BUG]  [BUGGY]  return(String[])keys.toArray(new  String[tokens.size()]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  return(String[])keys.toArray(new  String[tokens.size()]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])keys.toArray(new  String[tokens.size()]);	  return(String[])tokens.toArray(new    String[tokens.size()    -    1]);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  iter  =  currentOption.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
22	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Ilerator  iter  =  options.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  iter);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption,  iter);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Option  currentOption  =  options.getOption(stopAtNonOption,  iter);	      Option    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
24	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
25	[BUG]  [BUGGY]  tokens.add( ", ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  tokens.add( ", ");  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add( ", ");	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  -1],  stopAtNonOption);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  tokens.add(arguments[0].toString());  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  tokens.add(arguments[0].toString());  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0].toString());	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
28	[BUG]  [BUGGY]  tokens.add(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  tokens.add(arguments[0],  arguments[1]);  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	tokens.add(arguments[0],  arguments[1]);	      tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
29	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  2]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  2]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  2]);	  return(String[])tokens.toArray(new    String[tokens.size()    +    1]);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
30	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  iter  =  this.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	      Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  Iterator  <  String>  iter  =  options.values().iterator();  [BUGGY]    return  (String[])  tokens.toArray(new  String[tokens.size()]);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	Iterator  <  String>  iter  =  options.values().iterator();	      Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
33	[BUG]  [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    process(token);  }  else  {  tokens.add(token);  }  gobble(iter);  }    [BUGGY]  return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	158	158	1	replace	return(String[])tokens.toArray(new  String[tokens.size()  ],  stopAtNonOption,  arguments);	  return(String[])tokens.toArray(new    String[tokens.size()    ],    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
