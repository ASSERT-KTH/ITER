bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Option  options  =  options.getOption(i);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  Option  options  =  options.getOption(i);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(i);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
2	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  i);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  Option  options  =  options.getOption(ch,  i);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch,  i);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
3	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  Option  options  =  options.getOption(ch  +  1);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch  +  1);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
4	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
6	[BUG]  [BUGGY]  options.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  options.add( "- "  +  ch);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	options.add( "- "  +  ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
7	[BUG]  [BUGGY]  tors.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tors.add( "- "  +  ch);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tors.add( "- "  +  ch);	      if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
8	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  Option  currentOption  =  options.getOption(i);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(i);	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
9	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  i);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  Option  currentOption  =  options.getOption(ch,  i);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(ch,  i);	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(ch  -  1);	      Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(token);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(token);	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
12	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(token);  }  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(token);  }	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
13	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  i  +  1);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  i  +  1);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
14	[BUG]  [BUGGY]  tokens.add(ch.substring(i  +  1));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(ch.substring(i  +  1));  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(ch.substring(i  +  1));	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
15	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(token.substring(i,  i  +  1));  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i,  i  +  1));	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
16	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(token.substring(i  +  1));  break;  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1));  break;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
17	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   "; ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch  +   "; ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  +   "; ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption: ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption: ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  + ",  stopAtNonOption: ");	  tokens.add(   "-   "    +    ch    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
19	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
20	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch,  StopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
21	[BUG]  [BUGGY]  tokens.add( "- "  +  i,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  i,  stopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  i,  stopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
22	[BUG]  [BUGGY]  tokens.add(token.substring(i));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(token.substring(i));  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i));	      	non-compiled	[CE]  <identifier>  expected	4	None	replace
23	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( ".s.IFJDCS ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS ");	  tokens.add(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
24	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS ".substring(i  +  1));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( ".s.IFJDCS ".substring(i  +  1));  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS ".substring(i  +  1));	  tokens.add(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
25	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS "  +  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( ".s.IFJDCS "  +  ch);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS "  +  ch);	  tokens.add(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
26	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS "  +  i);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( ".s.IFJDCS "  +  i);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS "  +  i);	  tokens.add(   ".s.IFJDCS   ".substring(i));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
27	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS ").substring(1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( ".s.IFJDCS ").substring(1);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS ").substring(1);	  tokens.add(   ".s.IFJDCS   ".substring(i));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
28	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS "+token.substring(i));  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( ".s.IFJDCS "+token.substring(i));  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS "+token.substring(i));	  tokens.add(   ".s.IFJDCS   ".substring(i));    	non-compiled	[CE]  <identifier>  expected	16	None	replace
29	[BUG]  [BUGGY]  tokens.add(token.substring(i));  break;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(token.substring(i));  break;  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i));  break;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
30	[BUG]  [BUGGY]  tokens.add( "-IFJDCS   ".charAt(i));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "-IFJDCS   ".charAt(i));  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "-IFJDCS   ".charAt(i));	  tokens.add(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
31	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch  -  1);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  Option  options  =  options.getOption(ch  -  1);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch  -  1);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
32	[BUG]  [BUGGY]  tokens.add(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(ch);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(ch);	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
33	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";non-option ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch  +   ";non-option ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  +   ";non-option ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
35	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";eatTheRest;n ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch  +   ";eatTheRest;n ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  +   ";eatTheRest;n ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
36	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  eatTheRest);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch,  eatTheRest);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch,  eatTheRest);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
37	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ":n ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch  + ":n ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  + ":n ");	  tokens.add(   "-   "    +    ch    +   ":   ");    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(token.substring(i  +  1),  ch);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1),  ch);	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
39	[BUG]  [BUGGY]  tokens.add(token.substring(i,  ch));  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(token.substring(i,  ch));  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i,  ch));	      tokens.add(token.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	11	None	replace
40	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  + ",  stopAtNonOption;n ");	  tokens.add(   "-   "    +    ch    +   ";n   ");    	non-compiled	[CE]  <identifier>  expected	3	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
42	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  Option  options  =  options.getOption(ch,  stopAtNonOption);  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch,  stopAtNonOption);	      Option    options    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
43	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1));  break;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(token.substring(i,  i  +  1));  break;  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i,  i  +  1));  break;	      if(stopAtNonOption)    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
44	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add(token.substring(i  +  1),  stopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1),  stopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
45	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,   "stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( "- "  +  ch,   "stopAtNonOption);  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch,   "stopAtNonOption);	  tokens.add(   "-   "    +    ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
46	[BUG]  [BUGGY]  tokens.add( ".IFJDCS ".substring(i));  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  tokens.add( ".IFJDCS ".substring(i));  [BUGGY]    currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".IFJDCS ".substring(i));	  tokens.add(   ".s.IFJDCS   ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  }  [BUGGY]    tokens.add(   "-   "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  }	      tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
