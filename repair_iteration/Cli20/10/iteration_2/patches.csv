bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add( "-IFJDCS ".substring(i));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "-IFJDCS ".substring(i));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "-IFJDCS ".substring(i));	  tokens.add(   "-IFJDCS       ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
2	[BUG]  [BUGGY]  tokens.add( "-IFJDCS ".substring(i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "-IFJDCS ".substring(i  +  1));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "-IFJDCS ".substring(i  +  1));	  tokens.add(   "-IFJDCS       ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
3	[BUG]  [BUGGY]  tokens.add( "-IFJDCS ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "-IFJDCS ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "-IFJDCS ");	  tokens.add(   "-IFJDCS       ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
4	[BUG]  [BUGGY]  tokens.add( "-IFJDCS "  +  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "-IFJDCS "  +  ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "-IFJDCS "  +  ch);	  tokens.add(   "-IFJDCS       ".charAt(i));    	non-compiled	[CE]  <identifier>  expected	30	None	replace
5	[BUG]  [BUGGY]  tokens.add(ch);  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(ch);  break;  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(ch);  break;	  tokens.add(token.substring(i));    break;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
6	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  break;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch);  break;  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch);  break;	  tokens.add(token.substring(i));    break;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
7	[BUG]  [BUGGY]  options.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  options.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	options.add( "- "  +  i);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
8	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  non-option ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch  + ",  non-option ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  + ",  non-option ");	  tokens.add(   "-   "    +    ch    +       ";non-option   ");    	non-compiled	[CE]  <identifier>  expected	34	None	replace
9	[BUG]  [BUGGY]  tokens.add(i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(i);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(i);	  tokens.add(ch);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
10	[BUG]  [BUGGY]  tokens.add( "- "  +  i,  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  i,  eatTheRest);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  i,  eatTheRest);	  tokens.add(   "-   "    +    i,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
11	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS ",  ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".s.IFJDCS ",  ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS ",  ch);	  tokens.add(   ".s.IFJDCS   "    +    i);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
12	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption; ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption; ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  + ",  stopAtNonOption; ");	  tokens.add(   "-   "    +    ch    +       ";   ");    	non-compiled	[CE]  <identifier>  expected	17	None	replace
13	[BUG]  [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
14	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  +  1);	  tokens.add(   "-   "    +    i    +    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
15	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
16	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  currentOption  =  options.getOption(i  +  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(i  +  1);	  Option    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
17	[BUG]  [BUGGY]  Options  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Options  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Options  currentOption  =  options.getOption(ch);	  Option    currentOption    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
18	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS "+token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".s.IFJDCS "+token.substring(i  +  1));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS "+token.substring(i  +  1));	  tokens.add(   ".s.IFJDCS   "+token.substring(i));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
19	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS "+token.substring(1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".s.IFJDCS "+token.substring(1));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS "+token.substring(1));	  tokens.add(   ".s.IFJDCS   "+token.substring(i));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
20	[BUG]  [BUGGY]  tokens.add( "/.s.IFJDCS "+token.substring(i));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "/.s.IFJDCS "+token.substring(i));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "/.s.IFJDCS "+token.substring(i));	  tokens.add(   ".s.IFJDCS   "+token.substring(i));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
21	[BUG]  [BUGGY]  tokens.add( "- "  +  i,   "stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  i,   "stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  i,   "stopAtNonOption);	  tokens.add(   "-   "    +    ch,       "stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
22	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,   "stopAtNonOption, ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch,   "stopAtNonOption, ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch,   "stopAtNonOption, ");	  tokens.add(   "-   "    +    ch,       "stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
23	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,   "stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch,   "stopAtNonOption;  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch,   "stopAtNonOption;	  tokens.add(   "-   "    +    ch,       "stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
24	[BUG]  [BUGGY]  n   ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  n   ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	n   ");	  tokens.add(   "-   "    +    ch    +       ";eatTheRest;n   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
25	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";stopAtNonOption;n ");  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch  +   ";stopAtNonOption;n ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  +   ";stopAtNonOption;n ");	  tokens.add(   "-   "    +    ch    +       ";eatTheRest;n   ");    	non-compiled	[CE]  <identifier>  expected	35	None	replace
26	[BUG]  [BUGGY]  Option  options  =  options.getOption(i  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(i  -  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(i  -  1);	  Option    options    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
27	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch  -  1  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(ch  -  1  +  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch  -  1  +  1);	  Option    options    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
28	[BUG]  [BUGGY]  tokens.add(ch.substring(i,  i  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(ch.substring(i,  i  +  1));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(ch.substring(i,  i  +  1));	  tokens.add(token.substring(i,    i    +    1));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
29	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(0,  i  +  1));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(0,  i  +  1));	  tokens.add(token.substring(i,    i    +    1));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
30	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1));  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(0,  i  +  1));  break;  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(0,  i  +  1));  break;	  tokens.add(token.substring(i,    i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
31	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  i  +  1));  break;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  i  +  1));  break;  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1,  i  +  1));  break;	  tokens.add(token.substring(i,    i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
32	[BUG]  [BUGGY]  tokens.add( "/.s.IFJDCS ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "/.s.IFJDCS ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "/.s.IFJDCS ");	  tokens.add(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
33	[BUG]  [BUGGY]  tokens.add( ".IFJDCS ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".IFJDCS ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".IFJDCS ");	  tokens.add(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
34	[BUG]  [BUGGY]  Option  options  =  options.getOption(i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(i  +  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(i  +  1);	  Option    options    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
35	[BUG]  [BUGGY]  Options  options  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Options  options  =  options.getOption(ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Options  options  =  options.getOption(ch);	  Option    options    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
36	[BUG]  [BUGGY]  options.add( "- "  +  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  options.add( "- "  +  i);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	options.add( "- "  +  i);	  options.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
37	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  eatTheRest);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(ch,  eatTheRest);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch,  eatTheRest);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
38	[BUG]  [BUGGY]  Option  options  =  options.getOption(i,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(i,  stopAtNonOption);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(i,  stopAtNonOption);	  Option    options    =    options.getOption(ch,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
39	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  currentOption  =  options.getOption(i  -  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(i  -  1);	  Option    currentOption    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
40	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1  +  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1  +  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(ch  -  1  +  1);	  Option    currentOption    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
41	[BUG]  [BUGGY]  tors.add( "- "  +  i);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tors.add( "- "  +  i);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tors.add( "- "  +  i);	  tors.add(   "-   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
42	[BUG]  [BUGGY]  tokens.add(ch.substring(i));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(ch.substring(i));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(ch.substring(i));	  tokens.add(token.substring(i));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
43	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(0,  i));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(0,  i));	  tokens.add(token.substring(i));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
44	[BUG]  [BUGGY]  tokens.add(token.substring(1));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(1));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(1));	  tokens.add(token.substring(i));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
45	[BUG]  [BUGGY]  tokens.add(token.substring(i,  ch  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i,  ch  +  1));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i,  ch  +  1));	  tokens.add(token.substring(i,    ch));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
46	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i,  i));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i,  i));	  tokens.add(token.substring(i,    ch));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
47	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  i  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(ch,  i  +  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch,  i  +  1);	  Option    options    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
48	[BUG]  [BUGGY]  Option  options  =  options.getOption(i,  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(i,  ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(i,  ch);	  Option    options    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
49	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch,  i++);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(ch,  i++);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch,  i++);	  Option    options    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
50	[BUG]  [BUGGY]  tokens.add(ch.substring(i  +  1),  token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(ch.substring(i  +  1),  token);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(ch.substring(i  +  1),  token);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
51	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  ch));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  ch));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1),  ch));	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
52	[BUG]  [BUGGY]  tokens.add(buffer,  token.substring(i  +  1),  ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(buffer,  token.substring(i  +  1),  ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(buffer,  token.substring(i  +  1),  ch);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
53	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption.eatTheRest);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch,  StopAtNonOption.eatTheRest);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch,  StopAtNonOption.eatTheRest);	  tokens.add(   "-   "    +    ch,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
54	[BUG]  [BUGGY]  tokens.add( "/.s.IFJDCS "  +  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "/.s.IFJDCS "  +  ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "/.s.IFJDCS "  +  ch);	  tokens.add(   ".s.IFJDCS   "    +    ch);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
55	[BUG]  [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	options.add( "- "  +  ch);  currentOption  =  options.getOption(i);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
56	[BUG]  [BUGGY]  tokens.add( ".IFJDCS "  +  ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".IFJDCS "  +  ch);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".IFJDCS "  +  ch);	  tokens.add(   ".IFJDCS   ".substring(i));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
57	[BUG]  [BUGGY]  tokens.add( ".IFJDCS "  +  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".IFJDCS "  +  i);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".IFJDCS "  +  i);	  tokens.add(   ".IFJDCS   ".substring(i));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
58	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  i  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  currentOption  =  options.getOption(ch,  i  +  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(ch,  i  +  1);	  Option    currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
59	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i,  ch);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  currentOption  =  options.getOption(i,  ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(i,  ch);	  Option    currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
60	[BUG]  [BUGGY]  tokens.add( "- "  +  ch.substring(i  +  1));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch.substring(i  +  1));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch.substring(i  +  1));	  tokens.add(ch.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  tokens.add(Token.substring(i  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(Token.substring(i  +  1));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(Token.substring(i  +  1));	  tokens.add(ch.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
62	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS ").substring(i  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".s.IFJDCS ").substring(i  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS ").substring(i  +  1);	  tokens.add(   ".s.IFJDCS   ").substring(1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
63	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS ").substring(2);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".s.IFJDCS ").substring(2);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS ").substring(2);	  tokens.add(   ".s.IFJDCS   ").substring(1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
64	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS ").substring(i);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".s.IFJDCS ").substring(i);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS ").substring(i);	  tokens.add(   ".s.IFJDCS   ").substring(1);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
65	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1),  currentOption);	  tokens.add(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
66	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  eatTheRest);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  eatTheRest);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1),  eatTheRest);	  tokens.add(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
67	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(token);  }  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(token);  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
68	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),!stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1),!stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1),!stopAtNonOption);	  tokens.add(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
69	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  ch));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  ch));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1,  ch));	  tokens.add(token.substring(i,    ch));    	non-compiled	[CE]  <identifier>  expected	39	None	replace
70	[BUG]  [BUGGY]  kens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  kens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	kens.add( "- "  +  i);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
71	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption,  eatTheRest;n ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption,  eatTheRest;n ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  + ",  stopAtNonOption,  eatTheRest;n ");	  tokens.add(   "-   "    +    ch    +   ",    stopAtNonOption;n   ");    	non-compiled	[CE]  <identifier>  expected	40	None	replace
72	[BUG]  [BUGGY]  tokens.add(token.charAt(i));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.charAt(i));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.charAt(i));	  tokens.add(token.substring(i));    	non-compiled	[CE]  <identifier>  expected	22	None	replace
73	[BUG]  [BUGGY]  tokens.add( "/.s.IFJDCS "  +  i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "/.s.IFJDCS "  +  i);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "/.s.IFJDCS "  +  i);	  tokens.add(   ".s.IFJDCS   "    +    i);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
74	[BUG]  [BUGGY]  tokens.add( "@IFJDCS ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "@IFJDCS ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "@IFJDCS ");	  tokens.add(   ".s.IFJDCS   ");    	non-compiled	[CE]  <identifier>  expected	23	None	replace
75	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  i++);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  currentOption  =  options.getOption(ch,  i++);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  currentOption  =  options.getOption(ch,  i++);	  Option    currentOption    =    options.getOption(ch,    i);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
76	[BUG]  [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	kens.add( "- "  +  ch);  currentOption  =  options.getOption(i);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
77	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  +   ";non-optional ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch  +   ";non-optional ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  +   ";non-optional ");	  tokens.add(   "-   "    +    ch    +       ";non-option   ");    	non-compiled	[CE]  <identifier>  expected	34	None	replace
78	[BUG]  [BUGGY]  tokens.add( ".IFJDCS "+token.substring(i));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".IFJDCS "+token.substring(i));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".IFJDCS "+token.substring(i));	  tokens.add(   ".IFJDCS   ".substring(i));    	non-compiled	[CE]  <identifier>  expected	46	None	replace
79	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,   "-stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch,   "-stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch,   "-stopAtNonOption);	  tokens.add(   "-   "    +    ch,       "stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
80	[BUG]  [BUGGY]  tokens.add(i  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(i  +  1);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(i  +  1);	  tokens.add(ch);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
81	[BUG]  [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	kens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(token);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
82	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),   "- "  +  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1),   "- "  +  ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1),   "- "  +  ch);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
83	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  i  +  1));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  i  +  1));  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1,  i  +  1));	  tokens.add(token.substring(i,    i    +    1));    	non-compiled	[CE]  <identifier>  expected	15	None	replace
84	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "-- "  +  ch,  stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "-- "  +  ch,  stopAtNonOption);	  tokens.add(   "-   "    +    ch,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
85	[BUG]  [BUGGY]  tokens.add( ".s.IFJDCS "+token.substring(i,  ch));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( ".s.IFJDCS "+token.substring(i,  ch));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( ".s.IFJDCS "+token.substring(i,  ch));	  tokens.add(   ".s.IFJDCS   "+token.substring(i));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
86	[BUG]  [BUGGY]  tokens.add( "-IFJDCS "+token.substring(i));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "-IFJDCS "+token.substring(i));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "-IFJDCS "+token.substring(i));	  tokens.add(   ".s.IFJDCS   "+token.substring(i));    	non-compiled	[CE]  <identifier>  expected	28	None	replace
87	[BUG]  [BUGGY]  tokens.add(ch.substring(i  +  1),  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(ch.substring(i  +  1),  ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(ch.substring(i  +  1),  ch);	  tokens.add(ch.substring(i    +    1));    	non-compiled	[CE]  <identifier>  expected	14	None	replace
88	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  StopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  StopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1),  StopAtNonOption);	  tokens.add(   "-   "    +    ch,    StopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
89	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  stopAtNonOption));  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  stopAtNonOption));  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1,  stopAtNonOption));	  tokens.add(   "-   "    +    i,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
90	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  ch),  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  ch),  stopAtNonOption);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1,  ch),  stopAtNonOption);	  tokens.add(token.substring(i    +    1),    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
91	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  ch));  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  ch));  break;  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i  +  1,  ch));  break;	  tokens.add(token.substring(i,    i    +    1));    break;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
92	[BUG]  [BUGGY]  Option  options  =  options.getOption(ch  -  1L);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  options  =  options.getOption(ch  -  1L);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  options  =  options.getOption(ch  -  1L);	  Option    options    =    options.getOption(ch    -    1);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
93	[BUG]  [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption:n ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add( "- "  +  ch  + ",  stopAtNonOption:n ");  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add( "- "  +  ch  + ",  stopAtNonOption:n ");	  tokens.add(   "-   "    +    ch    +   ":n   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
94	[BUG]  [BUGGY]  Option  option  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  Option  option  =  options.getOption(ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	Option  option  =  options.getOption(ch);	  Option    options    =    options.getOption(i);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
95	[BUG]  [BUGGY]  tokens.add(token.substring(i,  ch));  break;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i,  ch));  break;  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i,  ch));  break;	  tokens.add(token.substring(i));    break;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
96	[BUG]  [BUGGY]  tokens.add(token.substring(i,  i  +  1),  ch);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(token.substring(i,  i  +  1),  ch);  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(token.substring(i,  i  +  1),  ch);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
97	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
98	[BUG]  [BUGGY]  tokens.add(ch  + "- "  +  i  +  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {      [BUGGY]  tokens.add(ch  + "- "  +  i  +  1);  [BUGGY]      currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	tokens.add(ch  + "- "  +  i  +  1);	  tokens.add(   "-   "    +    i    +    1);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
