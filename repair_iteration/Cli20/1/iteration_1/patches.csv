bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));	  	compilable	  [FE]  AssertionFailedError  	8	1	add
2	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));	  	compilable	  [FE]  AssertionFailedError  	8	1	add
3	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  Token  tokens.add(token.substring(0,  token.length()));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  Token  tokens.add(token.substring(0,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    Token  tokens.add(token.substring(0,  token.length()));	  	non-compiled	[CE]  ';'  expected	8	None	add
4	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  tokens.add(Token.substring(0,  token.length()));  [CE]  cannot  find  symbol  Token  [FE]        AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  tokens.add(Token.substring(0,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    tokens.add(Token.substring(0,  token.length()));	  	non-compiled	[CE]  cannot  find  symbol  Token	8	None	add
5	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  Token  tokens  =  new  Token(token.substring(0,  token.length()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  Token  tokens  =  new  Token(token.substring(0,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    Token  tokens  =  new  Token(token.substring(0,  token.length()));	  	non-compiled	[CE]  cannot  find  symbol	8	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  tokens.add(token);  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	        tokens.add(token);    tokens.add(token);	  	compilable	  [FE]  AssertionFailedError  	16	1	add
7	[BUG]  [BUGGY]      tokens.add(token);  tokens.add(token);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  tokens.add(token);  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    tokens.add(token);	  	compilable	  [FE]  AssertionFailedError  	16	1	add
8	[BUG]  [BUGGY]      tokens.add(token);  Token  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  Token  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    Token  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
9	[BUG]  [BUGGY]      tokens.add(token);  Token  tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')));  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  Token  tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    Token  tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
10	[BUG]  [BUGGY]      tokens.add(token);  Token  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  Token  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    Token  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()));	  	non-compiled	[CE]  ';'  expected	16	None	add
11	[BUG]  [BUGGY]      tokens.add(token);  Token  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  tokens.add(token);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  Token  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  tokens.add(token);  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    Token  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  tokens.add(token);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
12	[BUG]  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  [CE]  cannot  find  symbol  Token  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(Token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  cannot  find  symbol  Token	1	None	add
13	[BUG]  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('= ")));  [CE]  unclosed  character  literal  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('= ")));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('= ")));	  	non-compiled	[CE]  unclosed  character  literal	1	None	add
14	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  no  suitable  method  found  for  substring(int,int,int)  [FE]            AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(-1,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  no  suitable  method  found  for  substring(int,int,int)	4	None	replace
15	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length());  [CE]  no  suitable  method  found  for  add(String,int)  [FE]              AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length());  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')),  token.length());	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(-1,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  no  suitable  method  found  for  add(String,int)	4	None	replace
16	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()));  [CE]  no  suitable  method  found  for  substring(int,int,int)  [FE]                AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()));	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(-1,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  no  suitable  method  found  for  substring(int,int,int)	4	None	replace
17	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));	      tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	15	None	replace
18	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));	      tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	15	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	token  =  token.substring(0,  token.indexOf('=')+  1);	      token    =    token.substring(0,    token.indexOf('='));    	compilable	  [FE]  AssertionFailedError  	19	1	replace
20	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  [FE]  AssertionFailedError  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+  1);	      token    =    token.substring(0,    token.indexOf('='));    	compilable	  [FE]  AssertionFailedError  	19	1	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	token  =  token.substring(0,  token.lastIndexOf('='));	      token    =    token.substring(0,    token.indexOf('='));    	compilable	  [FE]  AssertionFailedError  	19	1	replace
22	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  [FE]  AssertionFailedError  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.lastIndexOf('='));	      token    =    token.substring(0,    token.indexOf('='));    	compilable	  [FE]  AssertionFailedError  	19	1	replace
23	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));	  	compilable	  [FE]  AssertionFailedError  	6	1	add
24	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));	  	compilable	  [FE]  AssertionFailedError  	6	1	add
25	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.indexOf('=')+    1));    Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));	  	non-compiled	[CE]  ';'  expected	6	None	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,  token.length()  -  1));	  tokens.add(token.substring(0,    token.length()));    	compilable	  [FE]  AssertionFailedError  	9	1	replace
27	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()  -  1));	  tokens.add(token.substring(0,    token.length()));    	compilable	  [FE]  AssertionFailedError  	9	1	replace
28	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,  token.length()  +  1));	  tokens.add(token.substring(0,    token.length()));    	compilable	  [FE]  StringIndexOutOfBoundsException  	9	2	replace
29	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()  +  1));	  tokens.add(token.substring(0,    token.length()));    	compilable	  [FE]  StringIndexOutOfBoundsException  	9	2	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));	  	compilable	  [FE]  AssertionFailedError  	22	2	add
31	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));	  	compilable	  [FE]  AssertionFailedError  	22	2	add
32	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));	  	non-compiled	[CE]  ';'  expected	22	None	add
33	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));	  	compilable	  [FE]  AssertionFailedError  	10	2	add
34	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));	  	compilable	  [FE]  AssertionFailedError  	10	2	add
35	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  Token  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  Token  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.lastIndexOf('=')));    Token  tokens.add(token.substring(0,  token.lastIndexOf('=')));	  	non-compiled	[CE]  ';'  expected	10	None	add
36	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(Token.substring(0,  token.lastIndexOf('=')));  [CE]  cannot  find  symbol  Token  [FE]        AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(Token.substring(0,  token.lastIndexOf('=')));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(Token.substring(0,  token.lastIndexOf('=')));	  	non-compiled	[CE]  cannot  find  symbol  Token	10	None	add
37	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));	  	compilable	  [FE]  AssertionFailedError  	13	2	add
38	[BUG]  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));	  	compilable	  [FE]  AssertionFailedError  	13	2	add
39	[BUG]  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [CE]  cannot  find  symbol  Token  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  cannot  find  symbol  Token	13	None	add
40	[BUG]  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  ')'  expected	13	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    	compilable	  [FE]  AssertionFailedError  	7	2	replace
42	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    	compilable	  [FE]  AssertionFailedError  	7	2	replace
43	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1)));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1)));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()  -  1)));	  tokens.add(token.substring(0,    token.length())));    	non-compiled	[CE]  ';'  expected	12	None	replace
44	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1)));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1)));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()  +  1)));	  tokens.add(token.substring(0,    token.length())));    	non-compiled	[CE]  ';'  expected	12	None	replace
45	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length())+  1));  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length())+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length())+  1));	  tokens.add(token.substring(0,    token.length())));    	non-compiled	[CE]  ';'  expected	12	None	replace
46	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	14	None	replace
47	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	14	None	replace
48	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1;  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1;  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim()  +  1;	      token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  	21	None	replace
49	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+1).trim();  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+1).trim();  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+1).trim();	      token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  	21	None	replace
50	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('=')).trim();  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('=')).trim();  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.lastIndexOf('=')).trim();	      token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  	21	None	replace
51	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('=')).trim();    token  =  token.substring(0,  token.indexOf('=')).trim();	  	non-compiled	[CE]  	20	None	add
52	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim());  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim());  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('=')).trim();    token  =  token.substring(0,  token.indexOf('=')).trim());	  	non-compiled	[CE]  	20	None	add
53	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf( "=')).trim();  [CE]  unclosed  string  literal  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf( "=')).trim();  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('=')).trim();    token  =  token.substring(0,  token.indexOf( "=')).trim();	  	non-compiled	[CE]  unclosed  string  literal	20	None	add
54	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1);  [CE]  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1);  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1);	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  	23	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  	3	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {  tokens.add  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {  tokens.add  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {  tokens.add	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	3	None	replace
57	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  	3	None	replace
58	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('='));  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('='));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('='));    token  =  token.substring(0,  token.indexOf('='));	  	non-compiled	[CE]  	18	None	add
59	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='));  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('='));    token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='));	  	non-compiled	[CE]  	18	None	add
60	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')).toLowerCase();  [CE]  [FE]        StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')).toLowerCase();  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('='));    token  =  token.substring(0,  token.indexOf('=')).toLowerCase();	  	non-compiled	[CE]  	18	None	add
61	[BUG]  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [CE]  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  	13	None	add
62	[BUG]  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [CE]  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));	  	non-compiled	[CE]  	13	None	add
63	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  else  {  tokens.add(  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  else  {  tokens.add(  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  else  {  tokens.add(	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	14	None	replace
64	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1);	  	non-compiled	[CE]  ')'  expected	6	None	add
65	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1);  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1);	      tokens.add(Token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	5	None	replace
66	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	3	None	replace
67	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {  tokens  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {  tokens  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  else  {  tokens	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	3	None	replace
68	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')  +  1,  token.length()));  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('='));    token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')  +  1,  token.length()));	  	non-compiled	[CE]  ';'  expected	18	None	add
69	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf( "='));  [CE]  unclosed  string  literal  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf( "='));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('='));    token  =  token.substring(0,  token.indexOf( "='));	  	non-compiled	[CE]  unclosed  string  literal	18	None	add
70	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add(token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add(token.substring(0,  token.length()));  }  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add(token.substring(0,  token.length()));  }	  	non-compiled	[CE]  ')'  expected	8	None	add
71	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }	  	non-compiled	[CE]  ')'  expected	8	None	add
72	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }	  	non-compiled	[CE]  ')'  expected	8	None	add
73	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token.add(token.substring(0,  token.indexOf('=')-  1));	  	non-compiled	[CE]  ')'  expected	22	None	add
74	[BUG]  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));	  	non-compiled	[CE]  ';'  expected	1	None	add
75	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.length()));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(1,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(1,  token.length()));	  tokens.add(token.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	9	None	replace
76	[BUG]  [BUGGY]      tokens.add(token);  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add(token);  }	  	non-compiled	[CE]  ')'  expected	16	None	add
77	[BUG]  [BUGGY]      tokens.add(token);  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  ')'  expected	16	None	add
78	[BUG]  [BUGGY]      tokens.add(token);  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    if(stopAtNonOption)  {  tokens.add(token);  }	  	non-compiled	[CE]  ')'  expected	16	None	add
79	[BUG]  [BUGGY]      tokens.add(token);  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add( "- ");  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add( "- ");  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add( "- ");  }	  	non-compiled	[CE]  ')'  expected	16	None	add
80	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  Token.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  Token.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.lastIndexOf('=')));    Token.add(token.substring(0,  token.lastIndexOf('=')));	  	non-compiled	[CE]  ')'  expected	10	None	add
81	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()));  }  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(-1,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	4	None	replace
82	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	3	None	replace
83	[BUG]  [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        token    =    token.substring(0,    token.indexOf('='));    token  =  token.substring(0,  token.indexOf('=')  +  1,  token.length()));	  	non-compiled	[CE]  ';'  expected	18	None	add
84	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')),  token.substring(0,  token.indexOf('=')+  1,  token.length()));	      tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(-1,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	4	None	replace
85	[BUG]  [BUGGY]      tokens.add(token);  tokens.add(Token);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  tokens.add(Token);  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    tokens.add(Token);	  	non-compiled	[CE]  ')'  expected	16	None	add
86	[BUG]  [BUGGY]      tokens.add(token);  iter.remove();  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]      tokens.add(token);  iter.remove();  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	        tokens.add(token);    iter.remove();	  	non-compiled	[CE]  ')'  expected	16	None	add
87	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  Token.add(token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  Token.add(token.substring(0,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    Token.add(token.substring(0,  token.length()));	  	non-compiled	[CE]  ')'  expected	8	None	add
88	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()));    tokens.add(tok.substring(0,  token.length()));	  	non-compiled	[CE]  ')'  expected	8	None	add
89	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toLowerCase();  [CE]  ')'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toLowerCase();  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).toLowerCase();	      token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  ')'  expected	21	None	replace
90	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length());  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length());  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length());	      token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  ';'  expected	21	None	replace
91	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());	      tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	15	None	replace
92	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.indexOf('=')+    1));    Token.add(token.substring(0,  token.indexOf('=')+  1));	  	non-compiled	[CE]  ')'  expected	6	None	add
93	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('='  +  1));  [CE]  ')'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  token  =  token.substring(0,  token.indexOf('='  +  1));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('='  +  1));	      token    =    token.substring(0,    token.indexOf('='));    	non-compiled	[CE]  ')'  expected	19	None	replace
94	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(1,  token.indexOf('=')));	      tokens.add(token);    	non-compiled	[CE]  ')'  expected	17	None	replace
95	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]    if  (token.startsWith(   "--   "))  {  if  (token.indexOf('=')  !=  -1)  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (   "-   ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(Token.substring(0,  token.indexOf('=')-  1));	  	non-compiled	[CE]  ')'  expected	22	None	add
