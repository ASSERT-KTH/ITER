bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	    tokens.add(token.substring(0,  token.indexOf('=')));		compilable	  [FE]  AssertionFailedError  	2	1	add
2	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    tokens.add(token.substring(0,  token.indexOf('=')));		compilable	  [FE]  AssertionFailedError  	2	1	add
3	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [CE]  no  suitable  method  found  for  substring(int,int,int)  [FE]      AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));		non-compiled	[CE]  no  suitable  method  found  for  substring(int,int,int)	2	None	add
4	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')  +  1,  token.length()));  [CE]  no  suitable  method  found  for  substring(int,int,int)  [FE]        AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')  +  1,  token.length()));		non-compiled	[CE]  no  suitable  method  found  for  substring(int,int,int)	2	None	add
5	[BUG]  [BUGGY]    tokens.add(Token.substring(0,  token.indexOf('=')));  [CE]  cannot  find  symbol  Token  [FE]          AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(Token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    tokens.add(Token.substring(0,  token.indexOf('=')));		non-compiled	[CE]  cannot  find  symbol  Token	2	None	add
6	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,  token.indexOf('=')+  1));	tokens.add(token.substring(0,  token.indexOf('=')));  	compilable	  [FE]  AssertionFailedError  	1	1	replace
7	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1));	tokens.add(token.substring(0,  token.indexOf('=')));  	compilable	  [FE]  AssertionFailedError  	1	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.length()));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,  token.length()));	tokens.add(token.substring(0,  token.indexOf('=')));  	compilable	  [FE]  AssertionFailedError  	1	1	replace
9	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.length()));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()));	tokens.add(token.substring(0,  token.indexOf('=')));  	compilable	  [FE]  AssertionFailedError  	1	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,  token.lastIndexOf('=')));	tokens.add(token.substring(0,  token.indexOf('=')));  	compilable	  [FE]  AssertionFailedError  	1	1	replace
11	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')));	tokens.add(token.substring(0,  token.indexOf('=')));  	compilable	  [FE]  AssertionFailedError  	1	1	replace
12	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length())));  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.length())));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length())));	tokens.add(token.substring(0,  token.indexOf('=')));  	non-compiled	[CE]  ';'  expected	1	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));		compilable	  [FE]  AssertionFailedError  	2	1	add
14	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));		compilable	  [FE]  AssertionFailedError  	2	1	add
15	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [CE]  ';'  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));		non-compiled	[CE]  ';'  expected	2	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token);  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	    tokens.add(token);		compilable	  [FE]  AssertionFailedError  	2	1	add
17	[BUG]  [BUGGY]    tokens.add(token);  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    tokens.add(token);  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    tokens.add(token);		compilable	  [FE]  AssertionFailedError  	2	1	add
18	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    token  =  token.substring(0,  token.indexOf('='));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	    token  =  token.substring(0,  token.indexOf('='));		compilable	  [FE]  StringIndexOutOfBoundsException  	2	1	add
19	[BUG]  [BUGGY]    token  =  token.substring(0,  token.indexOf('='));  [FE]  StringIndexOutOfBoundsException  [FE]      AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    token  =  token.substring(0,  token.indexOf('='));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    token  =  token.substring(0,  token.indexOf('='));		compilable	  [FE]  StringIndexOutOfBoundsException  	2	1	add
20	[BUG]  [BUGGY]  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    token  =  token.substring(0,  token.indexOf('=')).trim();  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	    token  =  token.substring(0,  token.indexOf('=')).trim();		compilable	  [FE]  StringIndexOutOfBoundsException  	2	1	add
21	[BUG]  [BUGGY]    token  =  token.substring(0,  token.indexOf('=')).trim();  [FE]  StringIndexOutOfBoundsException  [FE]        AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]    token  =  token.substring(0,  token.indexOf('=')).trim();  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	    token  =  token.substring(0,  token.indexOf('=')).trim();		compilable	  [FE]  StringIndexOutOfBoundsException  	2	1	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	tokens.add(token.substring(0,  token.indexOf('=')-  1));	tokens.add(token.substring(0,  token.indexOf('=')));  	compilable	  [FE]  AssertionFailedError  	1	1	replace
23	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  if  (token.startsWith( "-- "))  {  if  (token.indexOf('=')  !=  -1)  {  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  ( "- ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1));	tokens.add(token.substring(0,  token.indexOf('=')));  	compilable	  [FE]  AssertionFailedError  	1	1	replace
