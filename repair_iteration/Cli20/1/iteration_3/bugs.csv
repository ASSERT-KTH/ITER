bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  ')'  expected	55	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  }  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  }	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	74	None	replace
3	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.length()  -  1));  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(1,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(1,  token.length()  -  1));	  tokens.add(token.substring(1,    token.length()));    	non-compiled	[CE]  ')'  expected	75	None	replace
4	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.length()  +  1));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(1,  token.length()  +  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(1,  token.length()  +  1));	  tokens.add(token.substring(1,    token.length()));    	non-compiled	[CE]  ')'  expected	75	None	replace
5	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  ')'  expected	32	None	replace
6	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  ';'  expected	32	None	replace
7	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  ')'  expected	32	None	replace
8	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  ')'  expected	25	None	replace
9	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  ')'  expected	25	None	replace
10	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  ';'  expected	25	None	replace
11	[BUG]  [BUGGY]          tokens.add(token);    tokens.add(token);  tokens.add(token);  tokens.add(token);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token);    tokens.add(token);  tokens.add(token);  tokens.add(token);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token);        tokens.add(token);    tokens.add(token);  tokens.add(token);	  	non-compiled	[CE]  ')'  expected	6	None	add
12	[BUG]  [BUGGY]          tokens.add(token);    tokens.add(token);  tokens.add(token);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token);    tokens.add(token);  tokens.add(token);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token);        tokens.add(token);    tokens.add(token);	  	non-compiled	[CE]  ')'  expected	6	None	add
13	[BUG]  [BUGGY]          tokens.add(token);    tokens.add(token);  tokens.add(Token);  tokens.add(token);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token);    tokens.add(token);  tokens.add(Token);  tokens.add(token);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token);        tokens.add(token);    tokens.add(Token);  tokens.add(token);	  	non-compiled	[CE]  ')'  expected	6	None	add
14	[BUG]  [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  Token(token.substring(0,  token.indexOf('=')));	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	8	None	replace
15	[BUG]  [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(0,  token.indexOf('=')-  1));	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(Token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  ')'  expected	95	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(Token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  ')'  expected	95	None	replace
17	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	68	None	replace
18	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length()  -  1,  token.length()));  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length()  -  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length()  -  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	68	None	replace
19	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	68	None	replace
20	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.lastIndexOf('=')+  1,  token.length()));  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.lastIndexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.lastIndexOf('=')+  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	68	None	replace
21	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+1).trim()  +  1;  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+1).trim()  +  1;  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+1).trim()  +  1;	  token    =    token.substring(0,    token.indexOf('=')+1).trim();    	non-compiled	[CE]  ')'  expected	49	None	replace
22	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  Token  tokens  =  new  Token(token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  Token  tokens  =  new  Token(token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()  -  1));  Token  tokens  =  new  Token(token.substring(0,  token.length()));	  tokens.add(token.substring(0,    token.length()));    Token    tokens    =    new    Token(token.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	5	None	replace
23	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  -  1;  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  -  1;  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim()  -  1;	  token    =    token.substring(0,    token.indexOf('=')).trim()    +    1;    	non-compiled	[CE]  ')'  expected	48	None	replace
24	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf( "= ")).trim();  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf( "= ")).trim();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf( "= ")).trim();	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf(   "=')).trim();    	non-compiled	[CE]  ')'  expected	53	None	replace
25	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf( "=')).trim();  [CE]  unclosed  string  literal  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf( "=')).trim();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf( "=')).trim();	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf(   "=')).trim();    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
26	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')).trim());  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')).trim());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')).trim());	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf(   "=')).trim();    	non-compiled	[CE]  ')'  expected	53	None	replace
27	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('='));    tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  ')'  expected	82	None	replace
28	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length()  -  1);  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length()  -  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length()  -  1);	  token    =    token.substring(0,    token.indexOf('=')).trim()    +    1,    token.length());    	non-compiled	[CE]  ';'  expected	90	None	replace
29	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim(),  token.length());  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim(),  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim(),  token.length());	  token    =    token.substring(0,    token.indexOf('=')).trim()    +    1,    token.length());    	non-compiled	[CE]  ';'  expected	90	None	replace
30	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length()  -  2);  [CE]  ';'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length()  -  2);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length()  -  2);	  token    =    token.substring(0,    token.indexOf('=')).trim()    +    1,    token.length());    	non-compiled	[CE]  ';'  expected	90	None	replace
31	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.lastIndexOf('=')));        tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));	  	non-compiled	[CE]  ')'  expected	33	None	add
32	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(Token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(Token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.lastIndexOf('=')));        tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(Token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));	  	non-compiled	[CE]  ')'  expected	33	None	add
33	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('='));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('='));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.lastIndexOf('=')));        tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('='));  tokens.add(token.substring(0,  token.lastIndexOf('=')));	  	non-compiled	[CE]  ')'  expected	33	None	add
34	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.lastIndexOf('=')));        tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));	  	non-compiled	[CE]  ')'  expected	33	None	add
35	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length());  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+  1,  token.length());	  token    =    token.substring(0,    token.indexOf('=')+    1);    	non-compiled	[CE]  ')'  expected	20	None	replace
36	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  2);  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  2);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+  2);	  token    =    token.substring(0,    token.indexOf('=')+    1);    	non-compiled	[CE]  ')'  expected	20	None	replace
37	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1);	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length());    	non-compiled	[CE]  ')'  expected	91	None	replace
38	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()),  token.length()));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()),  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()),  token.length()));	  tokens.add(token.substring(0,    token.length()    -    1));    	non-compiled	[CE]  ';'  expected	27	None	replace
39	[BUG]  [BUGGY]  token  =  token.substring(1,  token.indexOf('=')).toLowerCase();  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(1,  token.indexOf('=')).toLowerCase();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(1,  token.indexOf('=')).toLowerCase();	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).toLowerCase();    	non-compiled	[CE]  ')'  expected	60	None	replace
40	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toUpperCase();  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toUpperCase();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).toUpperCase();	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).toLowerCase();    	non-compiled	[CE]  ')'  expected	60	None	replace
41	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+1).toLowerCase();  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+1).toLowerCase();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+1).toLowerCase();	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).toLowerCase();    	non-compiled	[CE]  ')'  expected	60	None	replace
42	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add( "- ");  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add( "- ");  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  tokens.add( "- ");  }	          tokens.add(token);    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  ')'  expected	79	None	replace
43	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add( "- ");  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add( "- ");	          tokens.add(token);    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  ')'  expected	79	None	replace
44	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    Token    tokens.add(token.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	3	None	replace
45	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  Token  tokens.add(token.substring(0,  token.length()));  }  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  Token  tokens.add(token.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  Token  tokens.add(token.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    Token    tokens.add(token.substring(0,    token.length()));    	non-compiled	[CE]  ';'  expected	3	None	replace
46	[BUG]  [BUGGY]  tokens.add(Token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(0,  token.length()));	  tokens.add(token.substring(0,    token.length()));    tokens.add(Token.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	4	None	replace
47	[BUG]  [BUGGY]  tokens.add(Token.substring(0,  token.length()  -  1));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(0,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(0,  token.length()  -  1));	  tokens.add(token.substring(0,    token.length()));    tokens.add(Token.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	4	None	replace
48	[BUG]  [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  ')'  expected	37	None	add
49	[BUG]  [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));	  	non-compiled	[CE]  ')'  expected	37	None	add
50	[BUG]  [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  ')'  expected	37	None	add
51	[BUG]  [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));	  	non-compiled	[CE]  ')'  expected	37	None	add
52	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')+    1));    }    	non-compiled	[CE]  ')'  expected	47	None	replace
53	[BUG]  [BUGGY]  ters.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  ters.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	ters.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1));	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')+    1));    }    	non-compiled	[CE]  ')'  expected	47	None	replace
54	[BUG]  [BUGGY]  tokens.add(0,  token.indexOf('='));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(0,  token.indexOf('='));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(0,  token.indexOf('='));	          tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  ')'  expected	7	None	replace
55	[BUG]  [BUGGY]  tokens.add(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(0,  token.indexOf('=')+  1,  token.length()));	          tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  ';'  expected	7	None	replace
56	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.length()  -  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(0,  token.length()  -  1));	  	non-compiled	[CE]  ')'  expected	26	None	add
57	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  Token  tokens.add(token.substring(0,  token.length()  -  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  Token  tokens.add(token.substring(0,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    -    1));    Token  tokens.add(token.substring(0,  token.length()  -  1));	  	non-compiled	[CE]  ';'  expected	26	None	add
58	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(Token.substring(0,  token.length()  -  1));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(Token.substring(0,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(Token.substring(0,  token.length()  -  1));	  	non-compiled	[CE]  ')'  expected	26	None	add
59	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(0,  token.length()));	  	non-compiled	[CE]  ')'  expected	26	None	add
60	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	||  stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    }    else    {    tokens.add(    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
61	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length());  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length());	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('='));    	non-compiled	[CE]  ')'  expected	59	None	replace
62	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1);  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1);	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('='));    	non-compiled	[CE]  ')'  expected	59	None	replace
63	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length()  -  1);  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length()  -  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.length()  -  1);	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('='));    	non-compiled	[CE]  ')'  expected	59	None	replace
64	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='));  [CE]  ')'  expected  [FE]                StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('='));    	non-compiled	[CE]  ')'  expected	59	None	replace
65	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token);	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('=')));    tokens.add(token);    	non-compiled	[CE]  ')'  expected	11	None	replace
66	[BUG]  [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  tokens.add(token);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  tokens.add(token);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  Token(token.substring(0,  token.indexOf('=')));  tokens.add(token);	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('=')));    tokens.add(token);    	non-compiled	[CE]  ')'  expected	11	None	replace
67	[BUG]  [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(0,  token.indexOf('=')));  tokens.add(token);	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('=')));    tokens.add(token);    	non-compiled	[CE]  ')'  expected	11	None	replace
68	[BUG]  [BUGGY]  tokens.add(Token.substring(0,  token.lastIndexOf('=')));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(0,  token.lastIndexOf('=')));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(0,  token.lastIndexOf('=')));	  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(Token.substring(0,    token.lastIndexOf('=')));    	non-compiled	[CE]  ')'  expected	36	None	replace
69	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1)+  1);  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1)+  1);  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1)+  1);	  tokens.add(token.substring(0,    token.indexOf('=')-    1)+    1);    	non-compiled	[CE]  ')'  expected	54	None	replace
70	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1,  token.length()));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('=')-    1)+    1);    	non-compiled	[CE]  ';'  expected	54	None	replace
71	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1,  token.length());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1,  token.length());  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1,  token.length());	  tokens.add(token.substring(0,    token.indexOf('=')-    1)+    1);    	non-compiled	[CE]  ')'  expected	54	None	replace
72	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  }	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(Token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	12	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token.add(token.substring(0,  token.indexOf('=')-  1));  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token.add(token.substring(0,  token.indexOf('=')-  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  Token.add(token.substring(0,  token.indexOf('=')-  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  ')'  expected	73	None	replace
74	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  token.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  token.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1));  token.add(token.substring(0,  token.indexOf('=')-  1));	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  ')'  expected	73	None	replace
75	[BUG]  [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()));	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	10	None	replace
76	[BUG]  [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1);	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	10	None	replace
77	[BUG]  [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	10	None	replace
78	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1));  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+  1));	  token    =    token.substring(0,    token.indexOf('='    +    1));    	non-compiled	[CE]  ';'  expected	93	None	replace
79	[BUG]  [BUGGY]  tokens.add(tok.substring(0,  token.length()));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(tok.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(tok.substring(0,  token.length()));	  tokens.add(token.substring(0,    token.length()));    tokens.add(tok.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	88	None	replace
80	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    tokens.add(tok.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	88	None	replace
81	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()    -    1));    	non-compiled	[CE]  ')'  expected	57	None	replace
82	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.length()));        tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));	  	non-compiled	[CE]  ')'  expected	1	None	add
83	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(Token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(Token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.length()));        tokens.add(token.substring(0,    token.length()));    tokens.add(Token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));	  	non-compiled	[CE]  ')'  expected	1	None	add
84	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(t,  token.substring(0,  token.length()));  tokens.add(t,  token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(t,  token.substring(0,  token.length()));  tokens.add(t,  token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.length()));        tokens.add(token.substring(0,    token.length()));    tokens.add(t,  token.substring(0,  token.length()));  tokens.add(t,  token.substring(0,  token.length()));	  	non-compiled	[CE]  ')'  expected	1	None	add
85	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')+        1));        tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));	  	non-compiled	[CE]  ')'  expected	23	None	add
86	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')+        1));        tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1);  tokens.add(token.substring(0,  token.indexOf('=')+  1));	  	non-compiled	[CE]  ')'  expected	23	None	add
87	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(Token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(Token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')+        1));        tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(Token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));	  	non-compiled	[CE]  ')'  expected	23	None	add
88	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')+  1,  token.length()));	  tokens.add(token.substring(0,    token.lastIndexOf('=')+    1));    	non-compiled	[CE]  ')'  expected	42	None	replace
89	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('=')+  1);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('=')+  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.lastIndexOf('=')+  1);	  token    =    token.substring(0,    token.lastIndexOf('='));    	non-compiled	[CE]  ')'  expected	22	None	replace
90	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  1)));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  1)));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()  1)));	  tokens.add(token.substring(0,    token.length()    -    1)));    	non-compiled	[CE]  ')'  expected	43	None	replace
91	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf( "= "));  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf( "= "));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf( "= "));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf(   "='));    	non-compiled	[CE]  ')'  expected	69	None	replace
92	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')-        1));        tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));	  	non-compiled	[CE]  ')'  expected	30	None	add
93	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(Token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')-        1));        tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(Token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));	  	non-compiled	[CE]  ')'  expected	30	None	add
94	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1);  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1);  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')-        1));        tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1);  tokens.add(token.substring(0,  token.indexOf('=')-  1));	  	non-compiled	[CE]  ')'  expected	30	None	add
95	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token.add(token.substring(0,  token.indexOf('=')+  1));  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token.add(token.substring(0,  token.indexOf('=')+  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  Token.add(token.substring(0,  token.indexOf('=')+  1));  }	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    Token.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  ')'  expected	92	None	replace
96	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1),  token.length()));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1),  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1),  token.length()));	  tokens.add(token.substring(0,    token.indexOf('=')),    token.length()));    	non-compiled	[CE]  ';'  expected	18	None	replace
97	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  [CE]  'else'  without  'if'  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
98	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  tokens.add(token.substring(0,  token.length()  +  1));  [CE]  'else'  without  'if'  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  tokens.add(token.substring(0,  token.length()  +  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    tokens.add(token.substring(0,  token.length()  +  1));	  	non-compiled	[CE]  'else'  without  'if'	28	None	add
99	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  tokens.add(Token.substring(0,  token.length()  +  1));  [CE]  'else'  without  'if'  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  tokens.add(Token.substring(0,  token.length()  +  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    tokens.add(Token.substring(0,  token.length()  +  1));	  	non-compiled	[CE]  'else'  without  'if'	28	None	add
100	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  Token  tokens.add(token.substring(0,  token.length()  +  1));  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  Token  tokens.add(token.substring(0,  token.length()  +  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    Token  tokens.add(token.substring(0,  token.length()  +  1));	  	non-compiled	[CE]  ';'  expected	28	None	add
101	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }  else  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }  else  {  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }  else  {	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    }    else    {    	non-compiled	[CE]  	66	None	replace
102	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  ')'  expected	51	None	replace
103	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  ')'  expected	51	None	replace
104	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add(token.substring  [CE]  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add(token.substring  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add(token.substring	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  	51	None	replace
105	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  Token.add(token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  Token.add(token.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  Token.add(token.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    Token.add(token.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	87	None	replace
106	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  Token.add(token.substring(0,  token.length()  -  1));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  Token.add(token.substring(0,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()  -  1));  Token.add(token.substring(0,  token.length()  -  1));	  tokens.add(token.substring(0,    token.length()));    Token.add(token.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	87	None	replace
107	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim());  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim());	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim());    	non-compiled	[CE]  ';'  expected	52	None	replace
108	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  	24	None	replace
109	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('='));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('='));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.lastIndexOf('='));    token  =  token.substring(0,  token.lastIndexOf('='));	  	non-compiled	[CE]  	21	None	add
110	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.indexOf('='));  [CE]  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.indexOf('='));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.lastIndexOf('='));    token  =  token.substring(0,  token.indexOf('='));	  	non-compiled	[CE]  	21	None	add
111	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  'else'  without  'if'	62	None	replace
112	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));	          tokens.add(token);    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  ')'  expected	77	None	replace
113	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length())+  1,  token.length()));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length())+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length())+  1,  token.length()));	  tokens.add(token.substring(0,    token.length())+    1));    	non-compiled	[CE]  ';'  expected	45	None	replace
114	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()));    }    else    {    tokens.add(   "-   "    +    token.substring(0,    token.length()));    }    	non-compiled	[CE]  ')'  expected	71	None	replace
115	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add( "- "  +  token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add( "- "  +  token.substring(0,  token.length()));	  tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()));    }    else    {    tokens.add(   "-   "    +    token.substring(0,    token.length()));    }    	non-compiled	[CE]  ')'  expected	71	None	replace
116	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()));  if(stopAtNonOption)  {  tokens.add( "- "  +  token.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()));    }    else    {    tokens.add(   "-   "    +    token.substring(0,    token.length()));    }    	non-compiled	[CE]  ')'  expected	71	None	replace
117	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	2	None	replace
118	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	83	None	replace
119	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	83	None	replace
120	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1);  [CE]  no  suitable  method  found  for  substring(int,int,int)  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1);	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  no  suitable  method  found  for  substring(int,int,int)	83	None	replace
121	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('=')+  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	token    =    token.substring(0,    token.indexOf('=')+    1);    token  =  token.substring(0,  token.indexOf('=')+  1);	  	compilable	  [FE]  AssertionFailedError  	19	3	add
122	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('=')+  1);  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('=')+  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.indexOf('=')+    1);    token  =  token.substring(0,  token.indexOf('=')+  1);	  	compilable	  [FE]  AssertionFailedError  	19	3	add
123	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('='),+  1);  [CE]  no  suitable  method  found  for  substring(int,int,int)  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('='),+  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.indexOf('=')+    1);    token  =  token.substring(0,  token.indexOf('='),+  1);	  	non-compiled	[CE]  no  suitable  method  found  for  substring(int,int,int)	19	None	add
124	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('=')+  1;  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('=')+  1;  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.indexOf('=')+    1);    token  =  token.substring(0,  token.indexOf('=')+  1;	  	non-compiled	[CE]  ')'  expected	19	None	add
125	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.lastIndexOf('=')+    1));    tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));	  	non-compiled	[CE]  ')'  expected	41	None	add
126	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  Token  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  Token  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.lastIndexOf('=')+    1));    Token  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));	  	non-compiled	[CE]  ';'  expected	41	None	add
127	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  else  {  tokens.add  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  else  {  tokens.add  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  }  else  {  tokens.add	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  ')'  expected	31	None	replace
128	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toLowerCase()  +  1;  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toLowerCase()  +  1;  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).toLowerCase()  +  1;	  token    =    token.substring(0,    token.indexOf('=')).toLowerCase();    	non-compiled	[CE]  ')'  expected	89	None	replace
129	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toLowerCase(Locale.ENGLISH);  [CE]  ')'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toLowerCase(Locale.ENGLISH);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).toLowerCase(Locale.ENGLISH);	  token    =    token.substring(0,    token.indexOf('=')).toLowerCase();    	non-compiled	[CE]  ')'  expected	89	None	replace
130	[BUG]  [BUGGY]  tokens.add(token);  iter.next();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token);  iter.next();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token);  iter.next();	          tokens.add(token);    iter.remove();    	non-compiled	[CE]  ')'  expected	86	None	replace
131	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1);    	non-compiled	[CE]  ')'  expected	64	None	replace
132	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens.add  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens.add  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens.add	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1);    	non-compiled	[CE]  ')'  expected	64	None	replace
133	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1);    	non-compiled	[CE]  ')'  expected	64	None	replace
134	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(1,  token.indexOf('=')+  1));	  tokens.add(token.substring(1,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	94	None	replace
135	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('=')).trim()  +  1;  [CE]  ')'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('=')).trim()  +  1;  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.lastIndexOf('=')).trim()  +  1;	  token    =    token.substring(0,    token.lastIndexOf('=')).trim();    	non-compiled	[CE]  ')'  expected	50	None	replace
136	[BUG]  [BUGGY]  token  =  token.substring(0,  token.length()).trim();  [CE]  ')'  expected  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.length()).trim();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.length()).trim();	  token    =    token.substring(0,    token.lastIndexOf('=')).trim();    	non-compiled	[CE]  ')'  expected	50	None	replace
137	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add(token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add(token.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  else  {  tokens.add(token.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()));    }    else    {    tokens.add(token.substring(0,    token.length()));    }    	non-compiled	[CE]  ')'  expected	70	None	replace
138	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()));    }    else    {    tokens.add(token.substring(0,    token.length()));    }    	non-compiled	[CE]  ')'  expected	70	None	replace
139	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  token.length());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  token.length());	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	14	None	replace
140	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length());	  tokens.add(token.substring(0,    token.indexOf('=')),    token.length());    	non-compiled	[CE]  ')'  expected	15	None	replace
141	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(Token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	39	None	replace
142	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(Token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	39	None	replace
143	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()  -  1));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()  -  1));	  tokens.add(token.substring(0,    token.indexOf('=')-    1,    token.length()));    	non-compiled	[CE]  ')'  expected	16	None	replace
144	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()  +  1));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()  +  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()  +  1));	  tokens.add(token.substring(0,    token.indexOf('=')-    1,    token.length()));    	non-compiled	[CE]  ')'  expected	16	None	replace
145	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()),  token.length());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()),  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()),  token.length());	  tokens.add(token.substring(0,    token.indexOf('=')-    1,    token.length()));    	non-compiled	[CE]  ')'  expected	16	None	replace
146	[BUG]  [BUGGY]  tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')));	          tokens.add(token);    Token    tokens    =    new    TokenIterator(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	9	None	replace
147	[BUG]  [BUGGY]  tokens.add(new  Token(token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(new  Token(token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(new  Token(token.substring(0,  token.indexOf('=')));	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('=')));    tokens.add(token);    	non-compiled	[CE]  ')'  expected	11	None	replace
148	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.length()  +  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.length()  +  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(0,  token.length()  +  1));	  	non-compiled	[CE]  ')'  expected	26	None	add
149	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.length()  *  1));  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  tokens.add(token.substring(0,  token.length()  *  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    -    1));    tokens.add(token.substring(0,  token.length()  *  1));	  	non-compiled	[CE]  ')'  expected	26	None	add
150	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')-  1);  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')-  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')-  1);	  token    =    token.substring(0,    token.indexOf('=')+    1);    	non-compiled	[CE]  ')'  expected	20	None	replace
151	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toLowerCase()  -  1;  [CE]  'else'  without  'if'  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).toLowerCase()  -  1;  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).toLowerCase()  -  1;	  token    =    token.substring(0,    token.indexOf('=')).toLowerCase();    	non-compiled	[CE]  'else'  without  'if'	89	None	replace
152	[BUG]  [BUGGY]  tokens.add( "-- "  +  token.substring(0,  token.length()));  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add( "-- "  +  token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add( "-- "  +  token.substring(0,  token.length()));	  tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()));    }    else    {    tokens.add(   "-   "    +    token.substring(0,    token.length()));    }    	non-compiled	[CE]  'else'  without  'if'	71	None	replace
153	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.indexOf('='));  [CE]  'else'  without  'if'  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.indexOf('='));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.lastIndexOf('='));    token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.indexOf('='));	  	non-compiled	[CE]  'else'  without  'if'	21	None	add
154	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.lastIndexOf('='));  [CE]  'else'  without  'if'  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.lastIndexOf('='));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.lastIndexOf('='));    token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.lastIndexOf('='));	  	non-compiled	[CE]  'else'  without  'if'	21	None	add
155	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('='));  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('='));  }  [CE]  'else'  without  'if'  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('='));  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('='));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.lastIndexOf('='));    token  =  token.substring(0,  token.lastIndexOf('='));  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('='));  }	  	non-compiled	[CE]  'else'  without  'if'	21	None	add
156	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('='));  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('='));  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.lastIndexOf('='));    token  =  token.substring(0,  token.lastIndexOf('='));  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }	  	non-compiled	[CE]  ';'  expected	21	None	add
157	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          tokens.add(token);    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
158	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  'else'  without  'if'  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }	          tokens.add(token);    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'else'  without  'if'	77	None	replace
159	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- ");  }  else  {  tokens.add( "- ");  }  [CE]  'else'  without  'if'  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- ");  }  else  {  tokens.add( "- ");  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add( "- ");  }  else  {  tokens.add( "- ");  }	          tokens.add(token);    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  'else'  without  'if'	79	None	replace
160	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf  [CE]  'else'  without  'if'  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  'else'  without  'if'	61	None	replace
161	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens  =  new  Token(token.substring(0,  token.indexOf('='))+  1,  token.length()));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  tokens  =  new  Token(token.substring(0,  token.indexOf('='))+  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token);  tokens  =  new  Token(token.substring(0,  token.indexOf('='))+  1,  token.length()));  }	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  	10	None	replace
162	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('='));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	83	None	replace
163	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	83	None	replace
164	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  ';'  expected  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  token  =  token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	83	None	replace
165	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')+  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	68	None	replace
166	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')-  1,  token.length()));  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')-  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('=')-  1,  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	68	None	replace
167	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1),  token.length());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1),  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1),  token.length());	  tokens.add(token.substring(0,    token.indexOf('=')),    token.length());    	non-compiled	[CE]  ')'  expected	15	None	replace
168	[BUG]  [BUGGY]  tokens.add('-');  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add('-');  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add('-');	          tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  ')'  expected	7	None	replace
169	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add( "-- ");  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add( "-- ");	          tokens.add(token);    tokens.add(token);    	non-compiled	[CE]  ')'  expected	7	None	replace
170	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }  [CE]  'else'  without  'if'  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }	  tokens.add(token.substring(0,    token.length()));    tokens.add(tok.substring(0,    token.length()));    	non-compiled	[CE]  'else'  without  'if'	88	None	replace
171	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()));  tokens.add(tok.substring(0,  token.length()));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.add(token.substring(0,    token.length()));    tokens.add(tok.substring(0,    token.length()));    	non-compiled	[CE]  ')'  expected	88	None	replace
172	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	14	None	replace
173	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.length()));        tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));	  	non-compiled	[CE]  ')'  expected	1	None	add
174	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(1,  token.length()));  tokens.add(token.substring(0,  token.length()));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.substring(1,  token.length()));  tokens.add(token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.length()));        tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(1,  token.length()));  tokens.add(token.substring(0,  token.length()));	  	non-compiled	[CE]  ';'  expected	1	None	add
175	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  Iterator  iter  =  options.iterator();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	Iterator  iter  =  options.iterator();	          tokens.add(token);    iter.remove();    	non-compiled	[CE]  ')'  expected	86	None	replace
176	[BUG]  [BUGGY]  iter.remove();  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  iter.remove();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	iter.remove();	          tokens.add(token);    iter.remove();    	non-compiled	[CE]  ')'  expected	86	None	replace
177	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  tokens.add(token.substring(0,  token.length()  +  1));  }  [CE]  ';'  expected  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  tokens.add(token.substring(0,  token.length()  +  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  tokens.add(token.substring(0,  token.length()  +  1));  }	  	non-compiled	[CE]  ';'  expected	28	None	add
178	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  options.add(token.substring(0,  token.length()  +  1));  }  [CE]  ';'  expected  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  options.add(token.substring(0,  token.length()  +  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  options.add(token.substring(0,  token.length()  +  1));  }	  	non-compiled	[CE]  ';'  expected	28	None	add
179	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  tokens.add( "- "+token.substring(0,  token.length()  +  1));  }  [CE]  ';'  expected  [FE]        StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  tokens.add( "- "+token.substring(0,  token.length()  +  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  else  {  tokens.add( "- "+token.substring(0,  token.length()  +  1));  }	  	non-compiled	[CE]  ';'  expected	28	None	add
180	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.length()  +  1));  }	  	non-compiled	[CE]  ';'  expected	28	None	add
181	[BUG]  [BUGGY]  tors.add(token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tors.add(token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tors.add(token.substring(0,  token.indexOf('=')));	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')+    1));    }    	non-compiled	[CE]  ')'  expected	47	None	replace
182	[BUG]  [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1,  token.length()));  }	  	non-compiled	[CE]  ';'  expected	37	None	add
183	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()),  stopAtNonOption);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()),  stopAtNonOption);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.length()),  stopAtNonOption);	  tokens.add(token.substring(0,    token.indexOf('=')-    1,    token.length()));    	non-compiled	[CE]  ')'  expected	16	None	replace
184	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')));	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    }    	non-compiled	[CE]  ')'  expected	46	None	replace
185	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')-        1));        tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));	  	non-compiled	[CE]  ')'  expected	30	None	add
186	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')-  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')-        1));        tokens.add(token.substring(0,    token.indexOf('=')-    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')-  1));	  	non-compiled	[CE]  ';'  expected	30	None	add
187	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length()  1));	  tokens.add(token.substring(0,    token.length()    -    1));    	non-compiled	[CE]  ')'  expected	27	None	replace
188	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.indexOf('=')+        1));        tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,  token.indexOf('=')+  1));	  	non-compiled	[CE]  ')'  expected	23	None	add
189	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.lastIndexOf('=')));        tokens.add(token.substring(0,    token.lastIndexOf('=')));    tokens.add(token.substring(0,  token.lastIndexOf('=')));	  	non-compiled	[CE]  ')'  expected	33	None	add
190	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  Token.add(token.substring(0,  token.lastIndexOf('=')+  1));  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  Token.add(token.substring(0,  token.lastIndexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.lastIndexOf('=')+    1));    Token.add(token.substring(0,  token.lastIndexOf('=')+  1));	  	non-compiled	[CE]  ')'  expected	41	None	add
191	[BUG]  [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(0,  token.indexOf('=')+  1));	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(Token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	12	None	replace
192	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('=')+  1));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')+  1);  token  =  token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.indexOf('=')+    1);    token  =  token.substring(0,  token.indexOf('=')+  1));	  	non-compiled	[CE]  ';'  expected	19	None	add
193	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim());  }  [CE]  ';'  expected  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim());  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim());  }	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim());    	non-compiled	[CE]  ';'  expected	52	None	replace
194	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim());  }  else  {  tokens.add( "- ");  }  [CE]  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim());  }  else  {  tokens.add( "- ");  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim());  }  else  {  tokens.add( "- ");  }	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim());    	non-compiled	[CE]  	52	None	replace
195	[BUG]  [BUGGY]  tokens  =  new  TokenIterator(token,  token.substring(0,  token.indexOf('=')));  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  TokenIterator(token,  token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  TokenIterator(token,  token.substring(0,  token.indexOf('=')));	          tokens.add(token);    Token    tokens    =    new    TokenIterator(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	9	None	replace
196	[BUG]  [BUGGY]  tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')),  stopAtNonOption);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')),  stopAtNonOption);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  TokenIterator(token.substring(0,  token.indexOf('=')),  stopAtNonOption);	          tokens.add(token);    Token    tokens    =    new    TokenIterator(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	9	None	replace
197	[BUG]  [BUGGY]  tokens.add(Token.indexOf('=')+  1,  token.length()));  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.indexOf('=')+  1,  token.length()));	          tokens.add(token);    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
198	[BUG]  [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(0,  token.indexOf('='))  +  1,  token.length()));	          tokens.add(token);    if(stopAtNonOption)    {    tokens.add(token);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  ';'  expected	76	None	replace
199	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1);    	non-compiled	[CE]  ')'  expected	64	None	replace
200	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens.add(  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens.add(  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')+  1));  tokens.add(token.substring(0,  token.indexOf('=')+  1);  }  else  {  tokens.add(	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1);    	non-compiled	[CE]  ')'  expected	64	None	replace
201	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf( "=')).trim();  }  [CE]  unclosed  string  literal  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf( "=')).trim();  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf( "=')).trim();  }	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf(   "=')).trim();    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
202	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf( ".=')).trim();  }  [CE]  unclosed  string  literal  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf( ".=')).trim();  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf( ".=')).trim();  }	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf(   "=')).trim();    	non-compiled	[CE]  unclosed  string  literal	53	None	replace
203	[BUG]  [BUGGY]  tokens.add(')');  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(')');  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(')');	          tokens.add(token);    tokens.add(Token);    	non-compiled	[CE]  	85	None	replace
204	[BUG]  [BUGGY]  tokens.add(Token.NAME);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.NAME);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.NAME);	          tokens.add(token);    tokens.add(Token);    	non-compiled	[CE]  	85	None	replace
205	[BUG]  [BUGGY]          tokens.add(token);    tokens.add(token);  tokens.add(token;  tokens.add(token);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token);    tokens.add(token);  tokens.add(token;  tokens.add(token);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token);        tokens.add(token);    tokens.add(token;  tokens.add(token);	  	non-compiled	[CE]  	6	None	add
206	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add(token);  }  [CE]  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add(token);  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add(token);  }	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  	51	None	replace
207	[BUG]  [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add( "- ");  }  [CE]  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add( "- ");  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  token  =  token.substring(0,  token.indexOf('=')).trim();  token  =  token.substring(0,  token.indexOf('=')).trim();  }  else  {  tokens.add( "- ");  }	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim();    	non-compiled	[CE]  	51	None	replace
208	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    }    else    {    tokens.add    	non-compiled	[CE]  	56	None	replace
209	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1);  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1);  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1);	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  	24	None	replace
210	[BUG]  [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  Token(token.substring(0,  token.indexOf('='))  +  1,  token.length());	          tokens.add(token);    Token    tokens    =    new    Token(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  	10	None	replace
211	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')-1).trim();  [CE]  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')-1).trim();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')-1).trim();	  token    =    token.substring(0,    token.indexOf('=')+1).trim();    	non-compiled	[CE]  	49	None	replace
212	[BUG]  [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(Token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	                tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,        token.indexOf('=')));        tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(Token.substring(0,  token.indexOf('=')));	  	non-compiled	[CE]  	37	None	add
213	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  else  {  tokens.add(token.substring  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  else  {  tokens.add(token.substring  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')));  }  else  {  tokens.add(token.substring	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	61	None	replace
214	[BUG]  [BUGGY]  Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	Token  tokens.add(token.substring(0,  token.indexOf('=')+  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  	25	None	replace
215	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  token.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1));  token.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1));  token.add(token.substring(0,  token.indexOf('=')+  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1));    Token.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  	92	None	replace
216	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1);  [CE]  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim()  +  1);	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf('=')).trim());    	non-compiled	[CE]  	52	None	replace
217	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length())  +  1,  token.length());  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length())  +  1,  token.length());  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.length())  +  1,  token.length());	  tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()));    }    else    {    tokens.add(   "-   "    +    token.substring(0,    token.length()));    }    	non-compiled	[CE]  	71	None	replace
218	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	38	None	replace
219	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf  [CE]  [FE]      AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.indexOf	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	38	None	replace
220	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.  [CE]  [FE]        AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('='));  tokens.add(token.substring(0,  token.	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	38	None	replace
221	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length());  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length());	  tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length());    	non-compiled	[CE]  	91	None	replace
222	[BUG]  [BUGGY]  tokens.add(token.indexOf('=')  +  1,  token.length()));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.indexOf('=')  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.indexOf('=')  +  1,  token.length()));	  tokens.add(token.substring(0,    token.length()));    if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.length()));    }    else    {    tokens.add(token.substring(0,    token.length()));    }    	non-compiled	[CE]  	70	None	replace
223	[BUG]  [BUGGY]  tokens  =  new  Token(token.substring(0,  token.length()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  new  Token(token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  new  Token(token.substring(0,  token.length()));	  tokens.add(token.substring(0,    token.length()));    Token    tokens    =    new    Token(token.substring(0,    token.length()));    	non-compiled	[CE]  	5	None	replace
224	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1),  token.length()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1),  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1),  token.length()));	  tokens.add(token.substring(0,    token.indexOf('=')),    token.length()));    	non-compiled	[CE]  	18	None	replace
225	[BUG]  [BUGGY]  tokens  =  token.substring(0,  token.indexOf('=')).trim();  [CE]  [FE]            StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens  =  token.substring(0,  token.indexOf('=')).trim();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens  =  token.substring(0,  token.indexOf('=')).trim();	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf(   "=')).trim();    	non-compiled	[CE]  	53	None	replace
226	[BUG]  [BUGGY]  token  =  token.substring(1,  token.indexOf('=')).trim();  [CE]  [FE]              StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(1,  token.indexOf('=')).trim();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(1,  token.indexOf('=')).trim();	          token    =    token.substring(0,    token.indexOf('=')).trim();    token    =    token.substring(0,    token.indexOf(   "=')).trim();    	non-compiled	[CE]  	53	None	replace
227	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  tokens.add(tok.substring(0,  token.length()  +  1));  [CE]  [FE]    StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  tokens.add(tok.substring(0,  token.length()  +  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    tokens.add(tok.substring(0,  token.length()  +  1));	  	non-compiled	[CE]  	28	None	add
228	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  tokens.add(token.substring(0,  token.length()  +  1)));  [CE]  [FE]      StringIndexOutOfBoundsException    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.length()  +  1));  tokens.add(token.substring(0,  token.length()  +  1)));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.length()    +    1));    tokens.add(token.substring(0,  token.length()  +  1)));	  	non-compiled	[CE]  	28	None	add
229	[BUG]  [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.string(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,    token.length()));    tokens.add(token.substring(0,  token.length()));  tokens.add(token.string(0,  token.length()));  tokens.add(token.substring(0,  token.length()));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,        token.length()));        tokens.add(token.substring(0,    token.length()));    tokens.add(token.string(0,  token.length()));  tokens.add(token.substring(0,  token.length()));	  	non-compiled	[CE]  	1	None	add
230	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti);	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    }    	non-compiled	[CE]  not  a  statement	46	None	replace
231	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')));    }    	non-compiled	[CE]  	46	None	replace
232	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='),  token.length()));  [CE]  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='),  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).substring(0,  token.indexOf('='),  token.length()));	          token    =    token.substring(0,    token.indexOf('='));    token    =    token.substring(0,    token.indexOf('=')).substring(0,    token.indexOf('=')    +    1,    token.length()));    	non-compiled	[CE]  	68	None	replace
233	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  tokens.add(Token.substring(0,  token.lastIndexOf('=')+  1));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  tokens.add(Token.substring(0,  token.lastIndexOf('=')+  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,    token.lastIndexOf('=')+    1));    tokens.add(Token.substring(0,  token.lastIndexOf('=')+  1));	  	non-compiled	[CE]  	41	None	add
234	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	Iterator  iter  =  tokens.iterator();	          tokens.add(token);    iter.remove();    	non-compiled	[CE]  	86	None	replace
235	[BUG]  [BUGGY]  tokens.add(tok.substring(0,  token.length()  -  1));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(tok.substring(0,  token.length()  -  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(tok.substring(0,  token.length()  -  1));	  tokens.add(token.substring(0,    token.length()));    tokens.add(tok.substring(0,    token.length()));    	non-compiled	[CE]  	88	None	replace
236	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='  +  1));  [CE]  [FE]        StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='  +  1));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.lastIndexOf('='  +  1));	  token    =    token.substring(0,    token.indexOf('='    +    1));    	non-compiled	[CE]  	93	None	replace
237	[BUG]  [BUGGY]  tokens.add(Token.substring(-1,  token.indexOf('=')));  [CE]  [FE]        AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(-1,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(-1,  token.indexOf('=')));	          tokens.add(token);    tokens.add(Token);    	non-compiled	[CE]  	85	None	replace
238	[BUG]  [BUGGY]  tokens.add(Token.substring(1,  token.indexOf('=')));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(Token.substring(1,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(Token.substring(1,  token.indexOf('=')));	          tokens.add(token);    tokens.add(Token);    	non-compiled	[CE]  	85	None	replace
239	[BUG]  [BUGGY]  tokens.add(new  TokenIterator(token.substring(0,  token.indexOf('=')));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(new  TokenIterator(token.substring(0,  token.indexOf('=')));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(new  TokenIterator(token.substring(0,  token.indexOf('=')));	          tokens.add(token);    Token    tokens    =    new    TokenIterator(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	9	None	replace
240	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1,  token.substring(0,  token.indexOf('=')+  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('=')),    token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  	84	None	replace
241	[BUG]  [BUGGY]  }  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')  +  1,  token.length()));  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  }  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')  +  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	}  else  if(stopAtNonOption)  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(-1,  token.indexOf('=')  +  1,  token.length()));  }	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(-1,    token.indexOf('=')+    1,    token.length()));    }    	non-compiled	[CE]  	81	None	replace
242	[BUG]  [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length();  [CE]  [FE]          StringIndexOutOfBoundsException      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length();  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token  =  token.substring(0,  token.indexOf('=')).trim()  +  1,  token.length();	  token    =    token.substring(0,    token.indexOf('=')).trim()    +    1,    token.length());    	non-compiled	[CE]  	90	None	replace
243	[BUG]  [BUGGY]  if(token.indexOf('=')  >=  -1)  {  tokens.add(token.substring(0,  token.indexOf('='));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(token.indexOf('=')  >=  -1)  {  tokens.add(token.substring(0,  token.indexOf('='));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(token.indexOf('=')  >=  -1)  {  tokens.add(token.substring(0,  token.indexOf('='));  }  else  {  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  }	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=   ")));    	non-compiled	[CE]  	13	None	replace
244	[BUG]  [BUGGY]  if(token.indexOf('=')  >=  -1)  {  tokens.add(token.substring(0,  token.indexOf('='));  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  if(token.indexOf('=')  >=  -1)  {  tokens.add(token.substring(0,  token.indexOf('='));  }  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	if(token.indexOf('=')  >=  -1)  {  tokens.add(token.substring(0,  token.indexOf('='));  }	          tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=   ")));    	non-compiled	[CE]  	13	None	replace
245	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1);  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1);  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(0,  token.indexOf('=')  +  1);	  if(stopAtNonOption)    {    tokens.add(token.substring(0,    token.indexOf('=')));    tokens.add(token.substring(0,    token.indexOf('=')+    1));    }    	non-compiled	[CE]  	47	None	replace
246	[BUG]  [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.indexOf('=')  +  1,  token.length()));  [CE]  [FE]    AssertionFailedError    [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  token  =  token.substring(0,  token.lastIndexOf('='));  token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.indexOf('=')  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	token    =    token.substring(0,    token.lastIndexOf('='));    token  =  token.substring(0,  token.lastIndexOf('=')).substring(0,  token.indexOf('=')  +  1,  token.length()));	  	non-compiled	[CE]  	21	None	add
247	[BUG]  [BUGGY]  Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  [FE]          AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	Token  tokens.add(token.substring(0,  token.indexOf('=')-  1));	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  	32	None	replace
248	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')-  1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (token.startsWith(     "--     "))  {  if  (token.indexOf('=')  !=  -1)  {      [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')-  1));  [BUGGY]      tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	tokens.add(token.substring(1,  token.indexOf('=')-  1));	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    Token    tokens.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  	32	None	replace
