bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest();  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  eatTheRest();  }	  if(stopAtNonOption)    {    eatTheRest();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
2	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  eatTheRest();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  eatTheRest();  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(!stopAtNonOption)  {  eatTheRest();  }	  if(stopAtNonOption)    {    eatTheRest();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
3	[BUG]  [BUGGY]  While(stopAtNonOption)  {  currentOption  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  currentOption  =  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  currentOption  =  stopAtNonOption;	  if(stopAtNonOption)    {    eatTheRest();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
4	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(arguments,  stopAtNonOption);	  Option    currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
5	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this.options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(this.options);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(this.options);	  Option    currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
6	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(tokens);	  Option    currentOption    =    options.getOption(arguments);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
7	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.get(0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.get(0);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.get(0);	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.remove();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
8	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get(0);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get(0);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get(0);	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.remove();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
9	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ",  arguments);	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
10	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption. ");  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption. ");  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption. ");	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
11	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption(this);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  eatTheRest  =  stopAtNonOption(this);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	eatTheRest  =  stopAtNonOption(this);	  stopAtNonOption(this);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
12	[BUG]  [BUGGY]  stopAtNonOption(this,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption(this,  arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption(this,  arguments);	  stopAtNonOption(this);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
13	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  }	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
15	[BUG]  [BUGGY]  StopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  StopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	StopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
16	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  token,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.ASSIGN,  token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.ASSIGN,    token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
17	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  argument);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  argument);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.ASSIGN,  argument);	  Option    currentOption    =    options.getOption(Token.ASSIGN,    token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
18	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  this.arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  this.arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.ASSIGN,  this.arguments);	  Option    currentOption    =    options.getOption(Token.ASSIGN,    token);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
19	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  Option>  iter  =  this.currentOption.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  Option>  iter  =  this.currentOption.iterator();	  Iterator    <    Option>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
20	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption(arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  eatTheRest  =  stopAtNonOption(arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	eatTheRest  =  stopAtNonOption(arguments);	  stopAtNonOption(arguments);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
21	[BUG]  [BUGGY]  stopAtNonOption(this.options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption(this.options);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption(this.options);	  stopAtNonOption(arguments);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
22	[BUG]  [BUGGY]  ||  stopAtNonOption(arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  stopAtNonOption(arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	||  stopAtNonOption(arguments);	  stopAtNonOption(arguments);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
23	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.false;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.false;	  this.stopAtNonOption    =    StopAtNonOption.eatTheRest;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
24	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.STANDARD;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.STANDARD;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.STANDARD;	  this.stopAtNonOption    =    StopAtNonOption.eatTheRest;    	non-compiled	[CE]  <identifier>  expected	23	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	if(stopAtNonOption)  {  eatTheRest  =  stopAtNonOption;  }	  eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
26	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  iter  =  this.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
27	[BUG]  [BUGGY]  This.stopAtNonOption  =  true;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  This.stopAtNonOption  =  true;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	This.stopAtNonOption  =  true;	  this.stopAtNonOption    =    false;    	non-compiled	[CE]  <identifier>  expected	32	None	replace
28	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Ilerator  <  Option>  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Ilerator  <  Option>  iter  =  Arrays.asList(arguments).iterator();	  Iterator    <    Option>    iter    =    Arrays.asList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
29	[BUG]  [BUGGY]  Option  <  Option>  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  <  Option>  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  <  Option>  iter  =  Arrays.asList(arguments).iterator();	  Iterator    <    Option>    iter    =    Arrays.asList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
30	[BUG]  [BUGGY]  options  =(Option)this.currentOption.clone();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  options  =(Option)this.currentOption.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	options  =(Option)this.currentOption.clone();	  Option    currentOption    =(Option)this.currentOption.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
31	[BUG]  [BUGGY]  Option  currentOption  =(Option)this.currentOption).clone();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)this.currentOption).clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)this.currentOption).clone();	  Option    currentOption    =(Option)this.currentOption.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
32	[BUG]  [BUGGY]  Option  currentOption  =(Option)this.currentOption.cloneTree();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)this.currentOption.cloneTree();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)this.currentOption.cloneTree();	  Option    currentOption    =(Option)this.currentOption.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
33	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  &&  arguments.length  >  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  &&  arguments.length  >  0;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.EXTENDS  &&  arguments.length  >  0;	  stopAtNonOption    =    StopAtNonOption.EXTENDS;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
34	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.FALSE;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.FALSE;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.FALSE;	  stopAtNonOption    =    StopAtNonOption.EXTENDS;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
35	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.STOPPED;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.STOPPED;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.STOPPED;	  stopAtNonOption    =    StopAtNonOption.EXTENDS;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
36	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
37	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(!stopAtNonOption)  {  eatTheRest  =  true;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
38	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(!stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
39	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
40	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
41	[BUG]  [BUGGY]  While(stopAtNonOption  &&  arguments.length  >  0)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption  &&  arguments.length  >  0)  {  tokens.add(token);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption  &&  arguments.length  >  0)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
42	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
43	[BUG]  [BUGGY]  Option  currentOption  =(Option)this.options.get(0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)this.options.get(0);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)this.options.get(0);	  Option    currentOption    =(Option)this.options.clone();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
44	[BUG]  [BUGGY]  options  =(Option)this.options.clone();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  options  =(Option)this.options.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	options  =(Option)this.options.clone();	  Option    currentOption    =(Option)this.options.clone();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
45	[BUG]  [BUGGY]  Option  currentOption  =(Option)this.options.get(arguments);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)this.options.get(arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)this.options.get(arguments);	  Option    currentOption    =(Option)this.options.clone();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
46	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  Option>  iter  =  this.arguments.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  Option>  iter  =  this.arguments.iterator();	  Iterator    <    Option>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
47	[BUG]  [BUGGY]  posixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.next();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  posixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.next();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	posixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.next();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.next()    -    1;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
48	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  token,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  argument);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  argument);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  argument);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
50	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  token,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  token,  null);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  token,  null);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    token);    	non-compiled	[CE]  <identifier>  expected	7	None	replace
51	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	||  stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
52	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
53	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	||  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
54	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  arguments.length  >  0;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  arguments.length  >  0;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  arguments.length  >  0;	  this.stopAtNonOption    =    stopAtNonOption    &&    arguments.length    >    0;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
55	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  arguments.length  >  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  arguments.length  >  1;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  &&  arguments.length  >  1;	  this.stopAtNonOption    =    stopAtNonOption    &&    arguments.length    >    0;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
56	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  arguments.length  >  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  arguments.length  >  2;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  &&  arguments.length  >  2;	  this.stopAtNonOption    =    stopAtNonOption    &&    arguments.length    >    0;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
57	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
58	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(token,  arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(token,  arguments);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
59	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(token,  eatTheRest);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(token,  eatTheRest);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
60	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(token,  null);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(token,  null);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
61	[BUG]  [BUGGY]  StopAtNonOption(false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  StopAtNonOption(false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	StopAtNonOption(false);	  stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
62	[BUG]  [BUGGY]  stopAtNonOption(false,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption(false,  false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption(false,  false);	  stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
63	[BUG]  [BUGGY]  ||  stopAtNonOption(false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  stopAtNonOption(false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	||  stopAtNonOption(false);	  stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
64	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  currentOption  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  currentOption  =  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(!stopAtNonOption)  {  currentOption  =  stopAtNonOption;	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
65	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  arguments,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  arguments,  stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    arguments);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
66	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  tokens);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  tokens);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    arguments);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
67	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  eatTheRest;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  &&  eatTheRest;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  &&  eatTheRest;	  this.stopAtNonOption    =    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
68	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  currentOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  currentOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  currentOption;	  this.stopAtNonOption    =    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
69	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  arguments;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  arguments;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  arguments;	  this.stopAtNonOption    =    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
70	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  eatTheRest  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  eatTheRest  +  1;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  eatTheRest  +  1;	  this.stopAtNonOption    =    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
71	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  arguments,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  arguments,  stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.NAME,    arguments);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
72	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  tokens);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  tokens);	  Option    currentOption    =    options.getOption(Token.NAME,    arguments);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
73	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.getValue();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.getValue();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.getValue();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.previous();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
74	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments;  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments;	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.options;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
75	[BUG]  [BUGGY]  this.currentOption  =  new  Option(tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  new  Option(tokens);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  new  Option(tokens);	  this.currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
76	[BUG]  [BUGGY]  this.currentOption  =  new  Option(this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  new  Option(this.stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  new  Option(this.stopAtNonOption);	  this.currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
77	[BUG]  [BUGGY]  this.currentOption  =  new  Option(arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  new  Option(arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  new  Option(arguments);	  this.currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
78	[BUG]  [BUGGY]  this.stopAtNonOption  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  null;	  this.stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
79	[BUG]  [BUGGY]  This.stopAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  This.stopAtNonOption  =  false;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	This.stopAtNonOption  =  false;	  this.stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
80	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption;	  this.stopAtNonOption    =    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
81	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  stopAtNonOption;	  this.stopAtNonOption    =    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
82	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(arguments);	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
83	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(true);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(true);	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
84	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.eatTheRest();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.eatTheRest();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.eatTheRest();	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
85	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  this);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  this);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  this);	  Option    currentOption    =    options.getOption(Token.NAME,    null);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
86	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  argument);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  argument);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  argument);	  Option    currentOption    =    options.getOption(Token.NAME,    null);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
87	[BUG]  [BUGGY]  Option  currentOption  =  options.get(arguments);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.get(arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.get(arguments);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
88	[BUG]  [BUGGY]  Option  currentOption  =  options.get(arguments[0]);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.get(arguments[0]);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.get(arguments[0]);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
89	[BUG]  [BUGGY]  Option  currentOption  =  options.get(0);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.get(0);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.get(0);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
90	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(arguments[1]);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(arguments[1]);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
91	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(arguments[0],  arguments[1]);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
92	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]  +  1);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]  +  1);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(arguments[0]  +  1);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
93	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this.stopAtNonOption,  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(this.stopAtNonOption,  token);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(this.stopAtNonOption,  token);	  Option    currentOption    =    options.getOption(token,    this.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
94	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  this.stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(token,  this.stopAtNonOption,  arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(token,  this.stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(token,    this.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
95	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(this.stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(this.stopAtNonOption);	  Option    currentOption    =    options.getOption(token,    this.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
96	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  this.eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(token,  this.eatTheRest);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(token,  this.eatTheRest);	  Option    currentOption    =    options.getOption(token,    this.stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	85	None	replace
97	[BUG]  [BUGGY]  this.eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.eatTheRest  =  true;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.eatTheRest  =  true;	  this.eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
98	[BUG]  [BUGGY]  this.eattheRest  =  true;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.eattheRest  =  true;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.eattheRest  =  true;	  this.eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
99	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.ERROR;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.ERROR;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.ERROR;	  stopAtNonOption    =    StopAtNonOption.eatTheRest;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
100	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.false;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.false;	  stopAtNonOption    =    StopAtNonOption.eatTheRest;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
101	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.STANDARD;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.STANDARD;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.STANDARD;	  stopAtNonOption    =    StopAtNonOption.eatTheRest;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
102	[BUG]  [BUGGY]  this.currentOption  =  currentOption.cloneTree();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  currentOption.cloneTree();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  currentOption.cloneTree();	  this.currentOption    =    currentOption;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
103	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  false;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(!stopAtNonOption)  {  eatTheRest  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
104	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  eatTheRest  =  false;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(!stopAtNonOption)  {  eatTheRest  =  false;	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
105	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXTENDS;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXTENDS;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EXTENDS;	  this.stopAtNonOption    =    StopAtNonOption.ERROR;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
106	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.ERROR;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.ERROR;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.ERROR;	  this.stopAtNonOption    =    StopAtNonOption.ERROR;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
107	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.EMPTY;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.EMPTY;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.EMPTY;	  this.stopAtNonOption    =    StopAtNonOption.ERROR;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
108	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.clone();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.clone();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)options.clone();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
109	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  token,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.NAME,    token);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
110	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  this.arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  this.arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  this.arguments);	  Option    currentOption    =    options.getOption(Token.NAME,    token);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
111	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.super.clone();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.super.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.super.clone();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)super.clone();    	non-compiled	[CE]  <identifier>  expected	96	None	replace
112	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  arguments[0]);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  arguments[0]);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
113	[BUG]  [BUGGY]  Options  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  Options  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Options  currentOption  =  options.getOption(token,  stopAtNonOption,  arguments);	  Options    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
114	[BUG]  [BUGGY]  Options  currentOption  =  options.getOption(token,  arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Options  currentOption  =  options.getOption(token,  arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Options  currentOption  =  options.getOption(token,  arguments);	  Options    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	83	None	replace
115	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <?>)iter.next();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <?>)iter.next();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <?>)iter.next();	  PosixParser    <    String>    currentOption    =(PosixParser    <    Object>)iter.next();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
116	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <?  extends  Object>)iter.next();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <?  extends  Object>)iter.next();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <?  extends  Object>)iter.next();	  PosixParser    <    String>    currentOption    =(PosixParser    <    Object>)iter.next();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
117	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.get();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.get();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.get();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.get();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
118	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.get();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
119	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	||  stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
120	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  tokens);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  tokens);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.ASSIGN,  tokens);	  Option    currentOption    =    options.getOption(Token.ASSIGN,    arguments);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
121	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments,  stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.ASSIGN,    arguments);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
122	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments[stopAtNonOption]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments[stopAtNonOption]);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments[stopAtNonOption]);	  Option    currentOption    =    options.getOption(Token.ASSIGN,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
123	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments[0]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments[0]);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.ASSIGN,  arguments[0]);	  Option    currentOption    =    options.getOption(Token.ASSIGN,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
124	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.get(0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.get(0);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.get(0);	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.options.clone();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
125	[BUG]  [BUGGY]  Option  currentOption  =(Option)arguments.clone();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)arguments.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)arguments.clone();	  Option    currentOption    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
126	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newLinkedList();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newLinkedList();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newLinkedList();	  List    <    String>    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
127	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(0);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(0);	  List    <    String>    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
128	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments.length  +  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments.length  +  1);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments.length  +  1);	  List    <    String>    tokens    =    Lists.newArrayList(arguments.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
129	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments.length  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments.length  -  1);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments.length  -  1);	  List    <    String>    tokens    =    Lists.newArrayList(arguments.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
130	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments.length,  arguments.length);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments.length,  arguments.length);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments.length,  arguments.length);	  List    <    String>    tokens    =    Lists.newArrayList(arguments.length);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
131	[BUG]  [BUGGY]  StopAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  StopAtNonOption  =  false;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	StopAtNonOption  =  false;	  StopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
132	[BUG]  [BUGGY]  StopAtNonOption  =  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  StopAtNonOption  =  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	StopAtNonOption  =  null;	  StopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
133	[BUG]  [BUGGY]  HalteAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  HalteAtNonOption  =  false;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	HalteAtNonOption  =  false;	  StopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	47	None	replace
134	[BUG]  [BUGGY]  Option  currentOption  =(Option)this.super.clone();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)this.super.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)this.super.clone();	  Option    currentOption    =(Option)super.clone();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
135	[BUG]  [BUGGY]  options  =(Option)super.clone();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  options  =(Option)super.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	options  =(Option)super.clone();	  Option    currentOption    =(Option)super.clone();    	non-compiled	[CE]  <identifier>  expected	89	None	replace
136	[BUG]  [BUGGY]  this.currentOption  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  stopAtNonOption;	  this.currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
137	[BUG]  [BUGGY]  While(stopAtNonOption)  {  arguments.add(arguments[0]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  arguments.add(arguments[0]);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  arguments.add(arguments[0]);	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
138	[BUG]  [BUGGY]  options.add(arguments[0]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  options.add(arguments[0]);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	options.add(arguments[0]);	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
139	[BUG]  [BUGGY]  While(stopAtNonOption)  {  arguments[0]  =  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  arguments[0]  =  false;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  arguments[0]  =  false;	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
140	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  String>  iter  =  this.arguments.iterator();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  String>  iter  =  this.arguments.iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
141	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  String>  iter  =  Arrays.asList(arguments).iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
142	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	  Iterator    <    String>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
143	[BUG]  [BUGGY]  StopAtNonOption(true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  StopAtNonOption(true);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	StopAtNonOption(true);	  stopAtNonOption(false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
144	[BUG]  [BUGGY]  ||  stopAtNonOption(true);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  ||  stopAtNonOption(true);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	||  stopAtNonOption(true);	  stopAtNonOption(false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
145	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.STRING,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.STRING,  arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.STRING,  arguments);	  Option    currentOption    =    options.getOption(Token.STRING);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
146	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.STRING,  token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.STRING,  token);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.STRING,  token);	  Option    currentOption    =    options.getOption(Token.STRING);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
147	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
148	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
149	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
150	[BUG]  [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(!stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
151	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  this);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  this);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  this);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    null);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
152	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
153	[BUG]  [BUGGY]  While(stopAtNonOption)  {  eatTheRest();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  eatTheRest();  }  else  {  tokens.add(token);  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  eatTheRest();  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
154	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  iter  =  this.currentOptions.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	63	None	replace
155	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.EXPR_RESULT;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.EXPR_RESULT;	  this.stopAtNonOption    =    StopAtNonOption.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
156	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.EXPR_FAILURE;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.EXPR_FAILURE;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.EXPR_FAILURE;	  this.stopAtNonOption    =    StopAtNonOption.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
157	[BUG]  [BUGGY]  Iterator  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  iter  =  Arrays.asList(arguments).iterator();	  Iterator    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	9	None	replace
158	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  iter  =  this.tokens.iterator();	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	11	None	replace
159	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption  +  1;  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption  +  1;	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.currentOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
160	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  Option>  iter  =  this.tokens.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  Option>  iter  =  this.tokens.iterator();	  Iterator    <    Option>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
161	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.toArray(new  PosixParser  <  String>());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.toArray(new  PosixParser  <  String>());  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.toArray(new  PosixParser  <  String>());	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)arguments.clone();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
162	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.toArray(new  PosixParser[arguments.size()  ]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.toArray(new  PosixParser[arguments.size()  ]);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.toArray(new  PosixParser[arguments.size()  ]);	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)arguments.clone();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
163	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.eatTheRest();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.eatTheRest();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.eatTheRest();	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
164	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.stopAtNonOption(arguments);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
165	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.cloneTree();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.cloneTree();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.cloneTree();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)currentOption.cloneTree();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
166	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.cloneTree();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.cloneTree();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.cloneTree();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)currentOption.cloneTree();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
167	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  this.currentOptions.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  Option>  iter  =  this.currentOptions.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  Option>  iter  =  this.currentOptions.iterator();	  Iterator    <    Option>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	65	None	replace
168	[BUG]  [BUGGY]  this.currentOption  =  OptionFactory.newInstance(this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  OptionFactory.newInstance(this.stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  OptionFactory.newInstance(this.stopAtNonOption);	  this.currentOption    =    OptionFactory.newInstance();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
169	[BUG]  [BUGGY]  this.currentOption  =  OptionFactory.newInstance(arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  OptionFactory.newInstance(arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  OptionFactory.newInstance(arguments);	  this.currentOption    =    OptionFactory.newInstance();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
170	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
171	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingArguments(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingArguments(arguments[0],  stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingArguments(arguments[0],  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
172	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingArgument(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingArgument(arguments[0],  stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingArgument(arguments[0],  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
173	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  currentOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  currentOption);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
174	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  currentOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  currentOption);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
175	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  options);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  options);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  options);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
176	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  eatTheRest);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  stopAtNonOption,  eatTheRest);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
177	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  arguments);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(this);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
178	[BUG]  [BUGGY]  if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);  }	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(this);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
179	[BUG]  [BUGGY]  if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	if(stopAtNonOption)  {  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(this);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
180	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption  +  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption  +  2;  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption  +  2;	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)currentOption    +    1;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
181	[BUG]  [BUGGY]  stopsAtNonOption  =  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopsAtNonOption  =  false;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopsAtNonOption  =  false;	  stopsAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
182	[BUG]  [BUGGY]  stopsAtNonOption  =  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopsAtNonOption  =  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopsAtNonOption  =  null;	  stopsAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	48	None	replace
183	[BUG]  [BUGGY]  stopAtNonOption  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  null;	  stopAtNonOption    =    true;    	non-compiled	[CE]  <identifier>  expected	46	None	replace
184	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  this.stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  this.stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.NAME,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
185	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.ESCAPE;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.ESCAPE;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.ESCAPE;	  stopAtNonOption    =    StopAtNonOption.EXTENDS;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
186	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.ALL;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.ALL;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.EXTENDS  |  StopAtNonOption.ALL;	  stopAtNonOption    =    StopAtNonOption.EXTENDS;    	non-compiled	[CE]  <identifier>  expected	19	None	replace
187	[BUG]  [BUGGY]  PosixParser  <  String>  super  =(PosixParser  <  String>)super.clone();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  super  =(PosixParser  <  String>)super.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  super  =(PosixParser  <  String>)super.clone();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)super.clone();    	non-compiled	[CE]  <identifier>  expected	96	None	replace
188	[BUG]  [BUGGY]  Option  currentOption  =(Option)options.get(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)options.get(token);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)options.get(token);	  Option    currentOption    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
189	[BUG]  [BUGGY]  Option  currentOption  =(Option)options.get(0);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)options.get(0);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)options.get(0);	  Option    currentOption    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
190	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption(false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  eatTheRest  =  stopAtNonOption(false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	eatTheRest  =  stopAtNonOption(false);	  stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	35	None	replace
191	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.get();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.get();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.get();	  PosixParser    <    String>    currentOption    =(PosixParser    <    Object>)iter.next();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
192	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  null,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  null,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  null,  stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.NAME,    null);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
193	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption,  eatTheRest);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption,  eatTheRest);	  Option    currentOption    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
194	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this);	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
195	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this.eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this.eatTheRest);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this.eatTheRest);	  this.stopAtNonOption    =    StopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
196	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption?  null  :  stopAtNonOption;	  this.stopAtNonOption    =    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	33	None	replace
197	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  tokens;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  tokens;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  tokens;	  this.stopAtNonOption    =    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
198	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.EXPR_RESULT;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.EXPR_RESULT;	  this.stopAtNonOption    =    StopAtNonOption.ERROR;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
199	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.STANDARD;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.STANDARD;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.ERROR  |  StopAtNonOption.STANDARD;	  this.stopAtNonOption    =    StopAtNonOption.ERROR;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
200	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(options).iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  String>  iter  =  Arrays.asList(options).iterator();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  String>  iter  =  Arrays.asList(options).iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
201	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  stopAtNonOption,  arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  stopAtNonOption,  arguments);	  Option    currentOption    =    options.getOption(Token.NAME,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
202	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption  -  1;  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption  -  1;	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.currentOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
203	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  iter  =  currentOption.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
204	[BUG]  [BUGGY]  this.currentOption  =  OptionFactory.newInstance(tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  OptionFactory.newInstance(tokens);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  OptionFactory.newInstance(tokens);	  this.currentOption    =    OptionFactory.newInstance();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
205	[BUG]  [BUGGY]  this.currentOption  =  OptionFactory.newInstance(options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  OptionFactory.newInstance(options);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  OptionFactory.newInstance(options);	  this.currentOption    =    OptionFactory.newInstance();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
206	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  false);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(this);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
207	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EOF;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EOF;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EOF;	  this.stopAtNonOption    =    StopAtNonOption.EMPTY;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
208	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "startAtNonOption ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption( "startAtNonOption ");  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption( "startAtNonOption ");	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
209	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(arguments,  stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(arguments,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
210	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(token);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(token);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
211	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.get();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.get();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.get();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.currentOption.clone();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
212	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.reset();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.reset();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.reset();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.currentOption.clone();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
213	[BUG]  [BUGGY]  stopAtNonOption(this.arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption(this.arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption(this.arguments);	  stopAtNonOption(arguments);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
214	[BUG]  [BUGGY]  stopAtNonOption(tokens);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption(tokens);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption(tokens);	  stopAtNonOption(arguments);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
215	[BUG]  [BUGGY]  this.currentOption  =  new  Option(0);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  new  Option(0);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  new  Option(0);	  this.currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
216	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.ASSIGN,  this.stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.ASSIGN,  this.stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.ASSIGN,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
217	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  Arrays.asList(options).iterator();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  Arrays.asList(options).iterator();  }  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  Arrays.asList(options).iterator();  }	  Iterator    <    Option>    iter    =    Arrays.asList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
218	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption  +  1L;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption  +  1L;  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption  +  1L;	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)currentOption    +    1;    	non-compiled	[CE]  <identifier>  expected	80	None	replace
219	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption  ==  null;	  eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
220	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption!=  null;	  eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
221	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ").toLowerCase();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ").toLowerCase();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ").toLowerCase();	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
222	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.get(token,  stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.get(token,  stopAtNonOption);	  Option    currentOption    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
223	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.getNext();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.getNext();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.getNext();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.previous();    	non-compiled	[CE]  <identifier>  expected	95	None	replace
224	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  +  1;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  +  1;	  this.stopAtNonOption    =    StopAtNonOption.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
225	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.FALSE;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.FALSE;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  |  StopAtNonOption.FALSE;	  this.stopAtNonOption    =    StopAtNonOption.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
226	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  stopAtNonOption!=  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  stopAtNonOption!=  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  stopAtNonOption!=  null;	  this.stopAtNonOption    =    StopAtNonOption.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
227	[BUG]  [BUGGY]  Option  currentOption  =(Option)this.currentOption.getOption();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)this.currentOption.getOption();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)this.currentOption.getOption();	  Option    currentOption    =(Option)this.currentOption.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
228	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
229	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest();  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest();  }	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    throw    new    IllegalStateException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	71	None	replace
230	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption.cloneTree(0);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption.cloneTree(0);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption.cloneTree(0);	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)currentOption.cloneTree();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
231	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)modules.clone();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)modules.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)modules.clone();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)options.clone();    	non-compiled	[CE]  <identifier>  expected	70	None	replace
232	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(arguments[0],  stopAtNonOption);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
233	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]  -  1);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(arguments[0]  -  1);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(arguments[0]  -  1);	  Option    currentOption    =    options.getOption(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
234	[BUG]  [BUGGY]  StopAtNonOption  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  StopAtNonOption  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	StopAtNonOption  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
235	[BUG]  [BUGGY]  allowEscaped(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowEscaped(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowEscaped(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
236	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  [Delete]  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	[Delete]	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
237	[BUG]  [BUGGY]  allowEscaped( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowEscaped( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowEscaped( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
238	[BUG]  [BUGGY]  allowEscaped(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowEscaped(stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowEscaped(stopAtNonOption);	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
239	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.clone();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)iter.clone();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.remove();    	non-compiled	[CE]  <identifier>  expected	94	None	replace
240	[BUG]  [BUGGY]  aughtExceptionHandler  =  new  AssertionFailedErrorHandler(this,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler  =  new  AssertionFailedErrorHandler(this,  stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler  =  new  AssertionFailedErrorHandler(this,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
241	[BUG]  [BUGGY]  aughtExceptionHandler  =  new  AssertionFailedErrorHandler(tokens,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler  =  new  AssertionFailedErrorHandler(tokens,  stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler  =  new  AssertionFailedErrorHandler(tokens,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
242	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  null,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  null,  stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  null,  stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    null);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
243	[BUG]  [BUGGY]  allowNonOption(stopAtNonOption)  {  eatTheRest();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowNonOption(stopAtNonOption)  {  eatTheRest();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowNonOption(stopAtNonOption)  {  eatTheRest();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
244	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
245	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.STRING,  null);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.STRING,  null);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.STRING,  null);	  Option    currentOption    =    options.getOption(Token.STRING);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
246	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get(arguments[0].clone());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get(arguments[0].clone());  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)arguments.get(arguments[0].clone());	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)arguments.clone();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
247	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(arguments[1]);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(arguments[1]);  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(arguments[1]);  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
248	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(arguments[0]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(arguments[0]);  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  false;  }  else  {  tokens.add(arguments[0]);  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	54	None	replace
249	[BUG]  [BUGGY]  Option  currentOption  =(Option)this.options.get(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)this.options.get(token);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)this.options.get(token);	  Option    currentOption    =(Option)this.options.clone();    	non-compiled	[CE]  <identifier>  expected	50	None	replace
250	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOption.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  <  Option>  iter  =  currentOption.arguments.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  <  Option>  iter  =  currentOption.arguments.iterator();	  Iterator    <    Option>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
251	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  this.stopAtNonOption);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.EXPR_RESULT,  this.stopAtNonOption);	  Option    currentOption    =    options.getOption(Token.EXPR_RESULT,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	67	None	replace
252	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.toArray(new  PosixParser  <  String>());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.toArray(new  PosixParser  <  String>());  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.options.toArray(new  PosixParser  <  String>());	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.options.clone();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
253	[BUG]  [BUGGY]  this.eatTheRest  =  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.eatTheRest  =  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.eatTheRest  =  null;	  this.eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
254	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayListWithArguments(arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayListWithArguments(arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayListWithArguments(arguments);	  List    <    String>    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
255	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption(true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  eatTheRest  =  stopAtNonOption(true);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	eatTheRest  =  stopAtNonOption(true);	  stopAtNonOption(false);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
256	[BUG]  [BUGGY]  allowNonOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowNonOption(stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowNonOption(stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
257	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName();	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
258	[BUG]  [BUGGY]  While(stopAtNonOption)  {  currentOption  =  false;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  While(stopAtNonOption)  {  currentOption  =  false;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	While(stopAtNonOption)  {  currentOption  =  false;  }	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
259	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayList(arguments,  eatTheRest);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayList(arguments,  eatTheRest);	  List    <    String>    tokens    =    Lists.newArrayList(arguments,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
260	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  Arrays.asList(arguments).iterator();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  Arrays.asList(arguments).iterator();  }  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  Arrays.asList(arguments).iterator();  }	  Iterator    <    Option>    iter    =    Arrays.asList(arguments).iterator();    	non-compiled	[CE]  <identifier>  expected	88	None	replace
261	[BUG]  [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  true;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler.handleMissingName(arguments[0],  stopAtNonOption)  {  eatTheRest  =  true;  }	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
262	[BUG]  [BUGGY]  allowMutator(stopAtNonOption)  {  eatTheRest();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowMutator(stopAtNonOption)  {  eatTheRest();  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowMutator(stopAtNonOption)  {  eatTheRest();  }	  if(stopAtNonOption)    {    eatTheRest();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
263	[BUG]  [BUGGY]  allowMutator(stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowMutator(stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowMutator(stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
264	[BUG]  [BUGGY]  allowMutator(stopAtNonOption)  {  allowMutator();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowMutator(stopAtNonOption)  {  allowMutator();  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowMutator(stopAtNonOption)  {  allowMutator();  }	  if(stopAtNonOption)    {    eatTheRest();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
265	[BUG]  [BUGGY]  Option  currentOption  =(Option)this.currentOptions.clone();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)this.currentOptions.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)this.currentOptions.clone();	  Option    currentOption    =(Option)this.currentOption.clone();    	non-compiled	[CE]  <identifier>  expected	49	None	replace
266	[BUG]  [BUGGY]  aughtExceptionHandler  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler  =  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler  =  stopAtNonOption;	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
267	[BUG]  [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	if(stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  if(stopAtNonOption)    {    eatTheRest();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
268	[BUG]  [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  if(stopAtNonOption)  {  currentOption  =  null;  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	if(stopAtNonOption)  {  currentOption  =  null;  }	  if(stopAtNonOption)    {    eatTheRest();    }    	non-compiled	[CE]  <identifier>  expected	59	None	replace
269	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EAT;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EAT;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EAT;	  this.stopAtNonOption    =    StopAtNonOption.EMPTY;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
270	[BUG]  [BUGGY]  aughtExceptionHandler(tokens,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler(tokens,  stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler(tokens,  stopAtNonOption);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
271	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments;  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments;	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.options;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
272	[BUG]  [BUGGY]  allowSideEffects(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowSideEffects(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowSideEffects(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
273	[BUG]  [BUGGY]  allowSideEffects(stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowSideEffects(stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowSideEffects(stopAtNonOption))  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
274	[BUG]  [BUGGY]  allowSideEffects( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  allowSideEffects( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	allowSideEffects( "stopAtNonOption "))  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	61	None	replace
275	[BUG]  [BUGGY]  StopAtNonOption  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  StopAtNonOption  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	StopAtNonOption  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(this,  arguments);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(this);    	non-compiled	[CE]  <identifier>  expected	91	None	replace
276	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  arguments[stopAtNonOption]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption(Token.NAME,  arguments[stopAtNonOption]);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption(Token.NAME,  arguments[stopAtNonOption]);	  Option    currentOption    =    options.getOption(Token.NAME,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
277	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption.cloneAtNonOption();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption.cloneAtNonOption();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)currentOption.cloneAtNonOption();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)currentOption.cloneTree();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
278	[BUG]  [BUGGY]  this.currentOption  =  new  Option(stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  new  Option(stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  new  Option(stopAtNonOption);	  this.currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	86	None	replace
279	[BUG]  [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  arguments.length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  stopAtNonOption  ||  arguments.length;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  stopAtNonOption  ||  arguments.length;	  this.stopAtNonOption    =    stopAtNonOption    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
280	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.remove();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.remove();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.currentOption.remove();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.currentOption.clone();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
281	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  arguments.length  >  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  arguments.length  >  0;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  arguments.length  >  0;	  this.stopAtNonOption    =    StopAtNonOption.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
282	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.EXPR_RESULT  &&  stopAtNonOption;	  this.stopAtNonOption    =    StopAtNonOption.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	90	None	replace
283	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.remove();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.remove();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.remove();	  PosixParser    <    String>    currentOption    =(PosixParser    <    Object>)iter.next();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
284	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.previous();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.previous();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  Object>)iter.previous();	  PosixParser    <    String>    currentOption    =(PosixParser    <    Object>)iter.next();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
285	[BUG]  [BUGGY]  Option  currentOption  =(Option)modules.clone();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =(Option)modules.clone();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =(Option)modules.clone();	  Option    currentOption    =(Option)options.clone();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
286	[BUG]  [BUGGY]  this.currentOption  =  stopAtNonOption?  options  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  stopAtNonOption?  options  :  null;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  stopAtNonOption?  options  :  null;	  this.currentOption    =    options;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
287	[BUG]  [BUGGY]  this.eatTheRest  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.eatTheRest  =  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.eatTheRest  =  stopAtNonOption;	  this.eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	93	None	replace
288	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.EMPTY;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.EMPTY;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.EMPTY;	  stopAtNonOption    =    StopAtNonOption.eatTheRest;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
289	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  this.stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  currentOption  =  options.getOption( "stopAtNonOption ",  this.stopAtNonOption);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  currentOption  =  options.getOption( "stopAtNonOption ",  this.stopAtNonOption);	  Option    currentOption    =    options.getOption(   "stopAtNonOption   ");    	non-compiled	[CE]  <identifier>  expected	77	None	replace
290	[BUG]  [BUGGY]  List  <  String>  tokens  =  Lists.newArrayListWithCapacity(arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  List  <  String>  tokens  =  Lists.newArrayListWithCapacity(arguments);  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	List  <  String>  tokens  =  Lists.newArrayListWithCapacity(arguments);	  List    <    String>    tokens    =    Lists.newArrayList();    	non-compiled	[CE]  <identifier>  expected	25	None	replace
291	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  Iterator  iter  =  this.currentOption.options.iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Iterator  iter  =  this.currentOption.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	64	None	replace
292	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)super.currentOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)super.currentOption;  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)super.currentOption;	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)this.currentOption;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
293	[BUG]  [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  ||  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.stopAtNonOption  =  StopAtNonOption.ERROR  ||  stopAtNonOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.stopAtNonOption  =  StopAtNonOption.ERROR  ||  stopAtNonOption;	  this.stopAtNonOption    =    StopAtNonOption.ERROR;    	non-compiled	[CE]  <identifier>  expected	69	None	replace
294	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)super.clone()  :  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)super.clone()  :  null;  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)super.clone()  :  null;	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)super.clone();    	non-compiled	[CE]  <identifier>  expected	96	None	replace
295	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
296	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
297	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  eatTheRest();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  eatTheRest();  }  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	parent  ==  null  &&  stopAtNonOption)  {  eatTheRest();  }	  if(stopAtNonOption)    {    eatTheRest();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	62	None	replace
298	[BUG]  [BUGGY]  aughtExceptionHandler  =  new  AssertionFailedErrorHandler();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler  =  new  AssertionFailedErrorHandler();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler  =  new  AssertionFailedErrorHandler();	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
299	[BUG]  [BUGGY]  aughtExceptionHandler  =  new  AssertionFailedErrorHandler( "Unexpected  error: "  +  toString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  aughtExceptionHandler  =  new  AssertionFailedErrorHandler( "Unexpected  error: "  +  toString());  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	aughtExceptionHandler  =  new  AssertionFailedErrorHandler( "Unexpected  error: "  +  toString());	  if(stopAtNonOption)    {    eatTheRest    =    false;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
300	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNon(arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNon(arguments);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.stopAtNon(arguments);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
301	[BUG]  [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.get();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {      [BUGGY]  PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.get();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	PosixParser  <  String>  currentOption  =(PosixParser  <  String>)this.arguments.get();	  PosixParser    <    String>    currentOption    =(PosixParser    <    String>)iter.get();    	non-compiled	[CE]  <identifier>  expected	75	None	replace
302	[BUG]  [BUGGY]  Option  option  =  options.getOption(arguments[0]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {      [BUGGY]  Option  option  =  options.getOption(arguments[0]);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	Option  option  =  options.getOption(arguments[0]);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(arguments[0]);    }    	non-compiled	[CE]  <identifier>  expected	58	None	replace
303	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false,  false);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false,  false);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
304	[BUG]  [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false,  true);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption  =  StopAtNonOption.stopAtNonOption(false,  true);	  stopAtNonOption    =    StopAtNonOption.stopAtNonOption(true);    	non-compiled	[CE]  <identifier>  expected	68	None	replace
305	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    eatTheRest    =    true;    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	76	None	replace
306	[BUG]  [BUGGY]  stopAtNonOption(arguments,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  stopAtNonOption(arguments,  eatTheRest);  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	stopAtNonOption(arguments,  eatTheRest);	  stopAtNonOption(arguments);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
307	[BUG]  [BUGGY]  this.currentOption  =  currentOption.getOption();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {      [BUGGY]  this.currentOption  =  currentOption.getOption();  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	this.currentOption  =  currentOption.getOption();	  this.currentOption    =    currentOption;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
308	[BUG]  [BUGGY]  AssertionFailedError.  <  Option>  iter  =  Arrays.asList(arguments).iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {      [BUGGY]  AssertionFailedError.  <  Option>  iter  =  Arrays.asList(arguments).iterator();  [BUGGY]      init();  this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	AssertionFailedError.  <  Option>  iter  =  Arrays.asList(arguments).iterator();	  Iterator    <    Option>    iter    =    Arrays.asList(options).iterator();    	non-compiled	[CE]  <identifier>  expected	66	None	replace
309	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {      [BUGGY]  eatTheRest  =  stopAtNonOption  ||  currentOption;  [BUGGY]      this.options  =  options;  Iterator  iter  =  Arrays.asList(arguments).iterator();  while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	99	99	1	replace	eatTheRest  =  stopAtNonOption  ||  currentOption;	  eatTheRest    =    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	82	None	replace
