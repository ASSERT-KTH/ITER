bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||   "- ".equals(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||   "- ".equals(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||   "- ".equals(token))  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
3	[BUG]  [BUGGY]  }  else  if(options.hasOption(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasOption(token)&&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasOption(token)&&  options.hasOption(token))  {	  }    else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
4	[BUG]  [BUGGY]  }  else  if(options.hasValue(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasValue(token)||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasValue(token)||  options.hasOption(token))  {	  }    else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
5	[BUG]  [BUGGY]  }  else  if(options.hasArg(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasArg(token)||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasArg(token)||  options.hasOption(token))  {	  }    else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
6	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption,  arguments);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption,  argument);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption,  argument);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption,  argument);	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(stopAtNonOption    ||    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
9	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "- "))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
10	[BUG]  [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.equals( "- ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.equals( "- ")&&  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
11	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  token.startsWith( "-- "))  {	  else    if(stopAtNonOption    ||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
12	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  token.equals( "-- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  token.equals( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  ||  token.equals( "-- "))  {	  else    if(stopAtNonOption    ||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
13	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption,  eatTheRest ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption,  eatTheRest ");  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption( "stopAtNonOption,  eatTheRest ");	  Option    option    =    options.getOption(   "stopAtNonOption,   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
14	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption,  null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption,  null ");  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption( "stopAtNonOption,  null ");	  Option    option    =    options.getOption(   "stopAtNonOption,   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
15	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(1));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "+token.substring(1));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "- "+token.substring(1));	  tokens.add(   "-   "+token.equals(token));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  tokens.add( "- "+token.substring(2));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "+token.substring(2));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "- "+token.substring(2));	  tokens.add(   "-   "+token.equals(token));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
17	[BUG]  [BUGGY]  tokens.add( "- "+token.startsWith( "- "));  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "+token.startsWith( "- "));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "- "+token.startsWith( "- "));	  tokens.add(   "-   "+token.equals(token));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
18	[BUG]  [BUGGY]  else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "-- ")&&  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "--   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
19	[BUG]  [BUGGY]  else  if(token.startsWith( "-- ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "-- ")||  token.startsWith( "--))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "-- ")||  token.startsWith( "--))  {	  else    if(token.startsWith(   "--   ")||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
20	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.equals( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.equals( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.equals( "- "))  {	  else    if(stopAtNonOption    &&    token.equals(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
21	[BUG]  [BUGGY]  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}	  else    if(options.hasOption(token))    {    tokens.add(   "-   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
22	[BUG]  [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add( "- ".equals(token));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add( "- ".equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasOption(token))  {  tokens.add( "- ".equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
23	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  arguments.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  arguments.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  arguments.hasOption(token))  {	  else    if(   "-   ".equals(token)||       "-   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
24	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)/  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)/  1;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)/  1;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
25	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)+  2;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)+  2;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
26	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)-  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)-  1;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)-  1;	  Option    option    =    options.getOption(token)+    1;    	non-compiled	[CE]  <identifier>  expected	60	None	replace
27	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	List  <  String>  iter  =  currentOption.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
28	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Ilerator  <  String>  iter  =  options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
29	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length()  ==  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length()  ==  1)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  ||  arguments.length()  ==  1)  {	  else    if(stopAtNonOption    ||    arguments.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
30	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length()  ==  2)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.length()  ==  2)  {	  else    if(stopAtNonOption    ||    arguments.length()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
31	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.length()  ==  0)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  ||  arguments.length()  ==  0)  {	  else    if(stopAtNonOption    ||    arguments.length()    ==    2)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
32	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  currentOption.arguments.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  <  String>  iter  =  currentOption.arguments.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
33	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    if(!options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
34	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	parent!=  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
35	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
36	[BUG]  [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "-   "))  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
37	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOption.iterator();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  currentOption.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	List  <  String>  iter  =  currentOption.iterator();	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
38	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ").equals(token));  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ").equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ").equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ").equals(token));    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
39	[BUG]  [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add( "- ").equals(token));  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasOption(token))  {  tokens.add( "- ").equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasOption(token))  {  tokens.add( "- ").equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ").equals(token));    }    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
40	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||  token.length()  ==  2)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)||  token.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-- ".equals(token)||  token.length()  ==  2)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
41	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.length()  ==  2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.length()  ==  2)  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
42	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  options.hasOption(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
43	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.length()  ==  2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  arguments.length()  ==  2)  {	  else    if(options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
44	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  stopAtNonOption  ||  options.hasOption(token))  {	  else    if(options.hasOption(token)||    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
45	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "- ")||  token.startsWith( "-))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
46	[BUG]  [BUGGY]  else  if(token.equals( "- ")||  token.equals( "- "))  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.equals( "- ")||  token.equals( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.equals( "- ")||  token.equals( "- "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
47	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add('-');  }  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token))  {  tokens.add('-');  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token))  {  tokens.add('-');  }	  tokens.add('-');    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
48	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add('-');  }  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add('-');  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add('-');  }	  tokens.add('-');    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
49	[BUG]  [BUGGY]  tokens.add( "-- "  +  token);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-- "  +  token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-- "  +  token);	  tokens.add(   "--   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
50	[BUG]  [BUGGY]  tokens.add( "-- ").toLowerCase();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-- ").toLowerCase();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-- ").toLowerCase();	  tokens.add(   "--   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
51	[BUG]  [BUGGY]  tokens.add( "-- ").equals(token);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-- ").equals(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-- ").equals(token);	  tokens.add(   "--   ");    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
52	[BUG]  [BUGGY]  Ilerator  iter  =  options.iterator();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Ilerator  iter  =  options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
53	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  while(options.hasOption(token))  {  tokens.add(token);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  while(options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	parent!=  null  &&  stopAtNonOption)  {  while(options.hasOption(token))  {  tokens.add(token);  }	  if(stopAtNonOption)    {    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
54	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	parent!=  null  &&  stopAtNonOption  ||  options.hasOption(token))  {  tokens.add(token);  }	  if(stopAtNonOption)    {    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
55	[BUG]  [BUGGY]  tokens.add( "- "  +  token.toLowerCase());  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  token.toLowerCase());  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "- "  +  token.toLowerCase());	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  tokens.add( "- "  +  token.toString());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  token.toString());  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "- "  +  token.toString());	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
57	[BUG]  [BUGGY]  else  if( "-   ".equals(token)||  token.startsWith( "- "))  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)||  token.startsWith( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-   ".equals(token)||  token.startsWith( "- "))  {	  else    if(   "-   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
58	[BUG]  [BUGGY]  else  if( "-   ".equals(token)&&  token.startsWith( "-- "))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)&&  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-   ".equals(token)&&  token.startsWith( "-- "))  {	  else    if(   "-   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
59	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  arguments;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)+  arguments;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)+  arguments;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
60	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)/  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)/  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)/  stopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
61	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  argument;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)+  argument;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)+  argument;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
62	[BUG]  [BUGGY]  else  if( "-   ".equals(token)&&  token.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)&&  token.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-   ".equals(token)&&  token.length()  ==  2)  {	  else    if(   "-   ".equals(token)||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
63	[BUG]  [BUGGY]  else  if( "-   ".equals(token)||  token.length()  ==  0)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)||  token.length()  ==  0)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-   ".equals(token)||  token.length()  ==  0)  {	  else    if(   "-   ".equals(token)||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
64	[BUG]  [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  options.entrySet().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  iter  =  options.entrySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
65	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  iter  =  this.arguments.iterator();	  Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	17	None	replace
66	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ",  stopAtNonOption).toLowerCase();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ",  stopAtNonOption).toLowerCase();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption( "stopAtNonOption ",  stopAtNonOption).toLowerCase();	  Option    option    =    options.getOption(   "stopAtNonOption   ").toLowerCase();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
67	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption   ").toLowerCase(Locale.ENGLISH);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption   ").toLowerCase(Locale.ENGLISH);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption( "stopAtNonOption   ").toLowerCase(Locale.ENGLISH);	  Option    option    =    options.getOption(   "stopAtNonOption   ").toLowerCase();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
68	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "--))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
69	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  <  Option>  iter  =  currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
70	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  options.contains(token))  {	  else    if(stopAtNonOption    &&    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
71	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
72	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasValue(token)||  options.hasOption(token))  {  tokens.add(token);  }	  else    if(options.hasOption(token)||    options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( ".- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( ".- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( ".- "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   ".-   "))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
74	[BUG]  [BUGGY]  else  if(token.startsWith( ".- ")||  token.startsWith( ".- "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( ".- ")||  token.startsWith( ".- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( ".- ")||  token.startsWith( ".- "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   ".-   "))    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
75	[BUG]  [BUGGY]  tokens.add( "-- "+token.equals(token));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-- "+token.equals(token));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-- "+token.equals(token));	  tokens.add(   "--   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
76	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)&&  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)&&  options.hasOption(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)&&  options.hasOption(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
77	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)||  options.hasOption(token,  stopAtNonOption);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
78	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasValue(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasValue(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)||  options.hasValue(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
79	[BUG]  [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	List  <  String>  iter  =  options.keySet().iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
80	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ");  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
81	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "- ")||  arguments.contains( "- "))  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
82	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.equals( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.equals( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  ||  arguments.equals( "- "))  {	  else    if(stopAtNonOption    ||    token.equals(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
83	[BUG]  [BUGGY]  Option  option  =  options.get(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.get(token,  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.get(token,  stopAtNonOption);	  Option    option    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
84	[BUG]  [BUGGY]  Option  option  =  options.get(0);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.get(0);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.get(0);	  Option    option    =    options.get(token);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
85	[BUG]  [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  ||  arguments.contains( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  ||  arguments.contains( "-- "))  {	  else    if(stopAtNonOption    ||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
86	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.contains( "-   "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  &&  arguments.contains( "-   "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(!stopAtNonOption  &&  arguments.contains( "-   "))  {	  else    if(stopAtNonOption    ||    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
87	[BUG]  [BUGGY]  }  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add(token);  }	  }    else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
88	[BUG]  [BUGGY]  }  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add(token);  }	  }    else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
89	[BUG]  [BUGGY]  }  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(token.startsWith( "-   "))  {  tokens.add(token);  }	  }    else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
90	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  arguments.length  >  2)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  &&  arguments.length  >  2)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(!stopAtNonOption  &&  arguments.length  >  2)  {	  else    if(!stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
91	[BUG]  [BUGGY]  else  if(!stopAtNonOption  &&  options.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  &&  options.contains(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(!stopAtNonOption  &&  options.contains(token))  {	  else    if(!stopAtNonOption    &&    arguments.contains(token))    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
92	[BUG]  [BUGGY]  options.put(token,  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  options.put(token,  null);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	options.put(token,  null);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
93	[BUG]  [BUGGY]  options.put(token,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  options.put(token,  eatTheRest);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	options.put(token,  eatTheRest);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
94	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  options.hasOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
95	[BUG]  [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasValue(token)||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasValue(token)||  options.hasOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
96	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
97	[BUG]  [BUGGY]  tokens.add( "-null ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-null ");  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-null ");	  tokens.add(   "-n   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
98	[BUG]  [BUGGY]  tokens.add( "--? ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "--? ");  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "--? ");	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	50	None	replace
99	[BUG]  [BUGGY]  else  if( "--.equals(token)||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "--.equals(token)||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "--.equals(token)||  token.startsWith( "-- "))  {	  else    if(   "-   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
100	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-- ".equals(token)||  token.startsWith( "-- "))  {	  else    if(   "-   ".equals(token)||    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	57	None	replace
101	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.length  >  0)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.length  >  0)  {	  else    if(stopAtNonOption    &&    token.equals(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
102	[BUG]  [BUGGY]  Option  options  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(token);  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  options  =  options.getOption(token);	  if(stopAtNonOption)    {    if(!options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
103	[BUG]  [BUGGY]  Option  options  =  options.getOptions(token);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOptions(token);  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  options  =  options.getOptions(token);	  if(stopAtNonOption)    {    if(!options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
104	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  arguments.contains( "-- "))  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
105	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.contains( "- "))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.contains( "- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  options.contains( "- "))  {	  else    if(stopAtNonOption    &&    arguments.contains(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	23	None	replace
106	[BUG]  [BUGGY]  options.put(token,  stopAtNonOption  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  options.put(token,  stopAtNonOption  +  1);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	options.put(token,  stopAtNonOption  +  1);	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
107	[BUG]  [BUGGY]  tokens.add( "-n "  +  token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-n "  +  token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-n "  +  token);	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
108	[BUG]  [BUGGY]  tokens.add( "- "  +  name);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  name);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "- "  +  name);	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
109	[BUG]  [BUGGY]  tokens.add( "- "  +  getName());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  getName());  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "- "  +  getName());	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
110	[BUG]  [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  options.keySet().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Ilerator  iter  =  options.keySet().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
111	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)||  options.hasArg(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)||  options.hasArg(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)||  options.hasArg(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
112	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)+  stopAtNonOption  +  1;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)+  stopAtNonOption  +  1;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
113	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  <  Option>  iter  =  options.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
114	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "- ")||  token.startsWith( "-+ "))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "-   "))    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
115	[BUG]  [BUGGY]  options.addOption(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  options.addOption(token);  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	options.addOption(token);	  if(stopAtNonOption)    {    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
116	[BUG]  [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token,  stopAtNonOption)+  1;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token,  stopAtNonOption)+  1;	  Option    option    =    options.getOption(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
117	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption,  eattheRest ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption,  eattheRest ");  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption( "stopAtNonOption,  eattheRest ");	  Option    option    =    options.getOption(   "stopAtNonOption,   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
118	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption,  eatTheRest, ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption,  eatTheRest, ");  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption( "stopAtNonOption,  eatTheRest, ");	  Option    option    =    options.getOption(   "stopAtNonOption,   ");    	non-compiled	[CE]  <identifier>  expected	43	None	replace
119	[BUG]  [BUGGY]  }  else  if(options.hasValue(token)&&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasValue(token)&&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasValue(token)&&  options.hasOption(token))  {	  }    else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
120	[BUG]  [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( "- ")&&  token.startsWith( "-- ")||  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
121	[BUG]  [BUGGY]  else  if(token.startsWith( ".- ")||  token.startsWith( "-- "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.startsWith( ".- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.startsWith( ".- ")||  token.startsWith( "-- "))  {	  else    if(token.startsWith(   "-   ")&&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
122	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add( "- ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add( "- ");  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
123	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add( "- ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add( "- ");  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
124	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Ilerator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
125	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add( "- ".equals(token));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add( "- ".equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption!=  false)  {  tokens.add( "- ".equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
126	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "- ".equals(token));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "- ".equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption)  {  tokens.add( "- ".equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
127	[BUG]  [BUGGY]  else  if(options.hasArg(token)||  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasArg(token)||  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasArg(token)||  options.hasOption(token))  {	  else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
128	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
129	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
130	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }	  else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
131	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Ilerator  iter  =  options.values().iterator();	  Iterator    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
132	[BUG]  [BUGGY]  tokens.add( "-n "+token.equals(token));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-n "+token.equals(token));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-n "+token.equals(token));	  tokens.add(   "-   "+token.equals(token));    	non-compiled	[CE]  <identifier>  expected	5	None	replace
133	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)||  stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-- ".equals(token)||  stopAtNonOption)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
134	[BUG]  [BUGGY]  else  if(!stopAtNonOption  && "-- ".equals(token))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption  && "-- ".equals(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(!stopAtNonOption  && "-- ".equals(token))  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
135	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "- ").equals(token));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  tokens.add( "- ").equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption)  {  tokens.add( "- ").equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ").equals(token));    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
136	[BUG]  [BUGGY]  else  if( "-   ".equals(token)||  token.length()  ==  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-   ".equals(token)||  token.length()  ==  1)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-   ".equals(token)||  token.length()  ==  1)  {	  else    if(   "-   ".equals(token)||    token.length()    ==    2)    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
137	[BUG]  [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(stopAtNonOption  &&  options.hasOption(token)||  stopAtNonOption)  {	  else    if(stopAtNonOption    &&    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
138	[BUG]  [BUGGY]  }  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add(token);  }	  }    else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
139	[BUG]  [BUGGY]  }  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasOption(token)&&  stopAtNonOption  ==  false)  {  tokens.add(token);  }	  }    else    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	56	None	replace
140	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    if(!options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  	33	None	replace
141	[BUG]  [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	parent  ==  null  ||  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    if(!options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  	33	None	replace
142	[BUG]  [BUGGY]  else  if( "-- ".equals(token)||   "-- ".equals(token))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)||   "-- ".equals(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-- ".equals(token)||   "-- ".equals(token))  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
143	[BUG]  [BUGGY]  else  if( "-- ".equals(token)&&  token.length()  ==  2)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if( "-- ".equals(token)&&  token.length()  ==  2)  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if( "-- ".equals(token)&&  token.length()  ==  2)  {	  else    if(   "--   ".equals(token))    {    	non-compiled	[CE]  <identifier>  expected	42	None	replace
144	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ").toUpperCase();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ").toUpperCase();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption( "stopAtNonOption ").toUpperCase();	  Option    option    =    options.getOption(   "stopAtNonOption   ").toLowerCase();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
145	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ").booleanValue();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ").booleanValue();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption( "stopAtNonOption ").booleanValue();	  Option    option    =    options.getOption(   "stopAtNonOption   ").toLowerCase();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
146	[BUG]  [BUGGY]  tokens.add( "-? ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-? ");  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-? ");	  tokens.add(   "-n   ");    	non-compiled	[CE]  <identifier>  expected	12	None	replace
147	[BUG]  [BUGGY]  else  if(options.hasOption(token))  {  tokens.add( "-- ".equals(token));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token))  {  tokens.add( "-- ".equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token))  {  tokens.add( "-- ".equals(token));  }	  tokens.add(   "--   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
148	[BUG]  [BUGGY]  tokens.add( "-- ".equals(token)&&!stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "-- ".equals(token)&&!stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "-- ".equals(token)&&!stopAtNonOption);	  tokens.add(   "--   ".equals(token));    	non-compiled	[CE]  <identifier>  expected	45	None	replace
149	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)-  stopAtNonOption;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)-  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)-  stopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
150	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)*  stopAtNonOption;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)*  stopAtNonOption;  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)*  stopAtNonOption;	  Option    option    =    options.getOption(token)+    stopAtNonOption;    	non-compiled	[CE]  <identifier>  expected	53	None	replace
151	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ");  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
152	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ");  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ");  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ");    }    	non-compiled	[CE]  <identifier>  expected	46	None	replace
153	[BUG]  [BUGGY]  options.put(token,  processOptionToken(token,  stopAtNonOption));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  options.put(token,  processOptionToken(token,  stopAtNonOption));  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	options.put(token,  processOptionToken(token,  stopAtNonOption));	  options.put(token,    stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
154	[BUG]  [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  tokens.add( "- "  +  token,  stopAtNonOption);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	tokens.add( "- "  +  token,  stopAtNonOption);	  tokens.add(   "-   "    +    token);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
155	[BUG]  [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "--))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(token.equals( "- ")||  token.startsWith( "--))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(token.equals( "- ")||  token.startsWith( "--))  {	  else    if(token.startsWith(   "-   ")||    token.startsWith(   "--))    {    	non-compiled	[CE]  <identifier>  expected	48	None	replace
156	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  iter  =  this.options.iterator();	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
157	[BUG]  [BUGGY]  }  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(options.hasOption(token)||  options.hasOption(token,  stopAtNonOption))  {	  }    else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
158	[BUG]  [BUGGY]  }  else  if(!stopAtNonOption  &&  options.hasOption(token))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  }  else  if(!stopAtNonOption  &&  options.hasOption(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	}  else  if(!stopAtNonOption  &&  options.hasOption(token))  {	  }    else    if(options.hasOption(token)||    options.hasOption(token))    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
159	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption  ||  arguments.contains(token))  {	  else    if(options.hasOption(token)&&    stopAtNonOption)    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
160	[BUG]  [BUGGY]  Option  option  =  options.getOption(token)/  ||  options.hasOption(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token)/  ||  options.hasOption(token);  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Option  option  =  options.getOption(token)/  ||  options.hasOption(token);	  Option    option    =    options.getOption(token)||    options.hasOption(token);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
161	[BUG]  [BUGGY]  Iterator  iter  =  options.list().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  options.list().iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  iter  =  options.list().iterator();	  Iterator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	52	None	replace
162	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ").equals(token));  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ").equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ").equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ").equals(token));    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
163	[BUG]  [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add( "- ").equals(token));  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(!stopAtNonOption)  {  tokens.add( "- ").equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(!stopAtNonOption)  {  tokens.add( "- ").equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ").equals(token));    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
164	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	  Iterator    <    String>    iter    =    this.arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
165	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ".equals(token));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ".equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  token.startsWith( "-   "))  {  tokens.add( "- ".equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
166	[BUG]  [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ".equals(token));  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ".equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)||  options.hasOption(token))  {  tokens.add( "- ".equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
167	[BUG]  [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ".equals(token));  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ".equals(token));  }  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	else  if(options.hasOption(token)&&  stopAtNonOption)  {  tokens.add( "- ".equals(token));  }	  else    if(options.hasOption(token))    {    tokens.add(   "-   ".equals(token));    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
168	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
169	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [BUGGY]      else  if  (token.startsWith(     "-     "))    {  {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	Iterator  iter  =  this.currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
170	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  [Delete]  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	[Delete]	  if(stopAtNonOption)    {    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
171	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      {  tokens.add(token);  }  }  else  if  (     "-     ".equals(token))  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      {  if  (token.length()  ==  2)  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	130	131	1	replace	parent  ==  null  &&  stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    if(options.hasOption(token))    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
