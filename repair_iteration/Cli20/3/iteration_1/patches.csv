bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length()  -  1)!=  ')')  {  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length()  -  1)!=  ')')  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.charAt(token.length()  -  1)!=  ')')  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
2	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- "))  {  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- "))  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.startsWith( "- "))  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length()  -  1)  ==  ')')  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length()  -  1)  ==  ')')  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.charAt(token.length()  -  1)  ==  ')')  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')>  -1)  {  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')>  -1)  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf('=')>  -1)  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  ')'  expected	11	None	replace
5	[BUG]  [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(Token.substring(0,  token.indexOf('=')+  1));  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(Token.substring(0,  token.indexOf('=')+  1));	      tokens.add(Token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	6	None	replace
6	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1));	      tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  	4	None	replace
7	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next().iterator();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  tokens  =  iter.next().iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =  iter.next().iterator();	      Iterator    <    String>    tokens    =    iter.next();    	non-compiled	[CE]  	13	None	replace
8	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  null;  [CE]  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  null;  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  null;	      Iterator    <    String>    tokens    =    iter.next();    	non-compiled	[CE]  	13	None	replace
9	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next().toString();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  tokens  =  iter.next().toString();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =  iter.next().toString();	      Iterator    <    String>    tokens    =    iter.next();    	non-compiled	[CE]  	13	None	replace
10	[BUG]  [BUGGY]  Iterator  iter  =  tokens.iterator();  [CE]  [FE]        AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  iter  =  tokens.iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  tokens.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  	12	None	replace
11	[BUG]  [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  iter  =  this.arguments.iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  this.arguments.iterator();	      Iterator    iter    =    arguments.iterator();    	non-compiled	[CE]  ')'  expected	12	None	replace
12	[BUG]  [BUGGY]  tokens  =(String[])iter.remove();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens  =(String[])iter.remove();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens  =(String[])iter.remove();	      tokens    =(String[])iter.next();    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  tokens  =(String[])iter.clone();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens  =(String[])iter.clone();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens  =(String[])iter.clone();	      tokens    =(String[])iter.next();    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1));  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('-')+  1));	      tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1);  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1);	      tokens.add(token.substring(0,    token.indexOf('-')));    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  iter  =  tokens.iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  tokens.iterator();	      Iterator    <    String>    token    =    iter.next();    	non-compiled	[CE]  	15	None	replace
17	[BUG]  [BUGGY]  Iterator  <  String>  token  =  iter.next().iterator();  [CE]  'else'  without  'if'  [FE]                AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  token  =  iter.next().iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  token  =  iter.next().iterator();	      Iterator    <    String>    token    =    iter.next();    	non-compiled	[CE]  'else'  without  'if'	15	None	replace
18	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.iterator();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  iter  =  currentOption.iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  currentOption.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	14	None	replace
19	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  iter  =  currentOption.options.iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  currentOption.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  	14	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	      tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1  -  1));  [CE]  [FE]              AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1  -  1));  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1  -  1));	      tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')));  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('/')));	      tokens.add(token.substring(0,    token.indexOf(   "-   ")));    	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')));  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf(':')));	      tokens.add(token.substring(0,    token.indexOf(   "-   ")));    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  [CE]  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  options.iterator();	      	non-compiled	[CE]  	2	None	replace
25	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Option  currentOption  =  options.getOption(token);	      	non-compiled	[CE]  	2	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "-- "))  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "-- "))  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.startsWith( "-- "))  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf( "-- ")  >=  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(stopAtNonOption  &&  token.indexOf( "-- ")  >=  0)  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf( "-- ")  >=  0)  {	  if(stopAtNonOption)    {    	non-compiled	[CE]  ';'  expected	11	None	replace
28	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token;  [CE]  'else'  without  'if'  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token;  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token;	      Iterator    <    String>    tokens    =    iter.next();    	non-compiled	[CE]  'else'  without  'if'	13	None	replace
29	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())? "-- "  :  iter.next();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())? "-- "  :  iter.next();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())? "-- "  :  iter.next();	      Iterator    <    String>    tokens    =    iter.next();    	non-compiled	[CE]  	13	None	replace
30	[BUG]  [BUGGY]  tokens  =(String[])iter.next()  -  1;  [CE]  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens  =(String[])iter.next()  -  1;  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens  =(String[])iter.next()  -  1;	      tokens    =(String[])iter.next();    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  [FE]        AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add( "-- ");  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add( "-- ");	      tokens.add(token);    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  Iterator  <  String>  token  =  iter.next()  +  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  <  String>  token  =  iter.next()  +  1;  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  token  =  iter.next()  +  1;	      Iterator    <    String>    token    =    iter.next();    	non-compiled	[CE]  	15	None	replace
33	[BUG]  [BUGGY]  Iterator  iter  =  currentOptions.iterator();  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  iter  =  currentOptions.iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  currentOptions.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  ==  -1)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  ==  -1)  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.indexOf('=')  ==  -1)  {	  if    (token.indexOf('=')    ==    -1)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
35	[BUG]  [BUGGY]  Iterator  iter  =  this.options.iterator();  [CE]  'else'  without  'if'  [FE]            AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  Iterator  iter  =  this.options.iterator();  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  this.options.iterator();	      Iterator    iter    =    options.iterator();    	non-compiled	[CE]  'else'  without  'if'	14	None	replace
36	[BUG]  [BUGGY]  if(token.indexOf('=')>  -1)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(token.indexOf('=')>  -1)  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(token.indexOf('=')>  -1)  {	  if    (token.indexOf('=')    >=    -1)    {    	non-compiled	[CE]  ';'  expected	10	None	replace
37	[BUG]  [BUGGY]  if(token.indexOf('=')  <  -1)  {  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  if(token.indexOf('=')  <  -1)  {  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(token.indexOf('=')  <  -1)  {	  if    (token.indexOf('=')    ==    -1)    {    	non-compiled	[CE]  ';'  expected	1	None	replace
38	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  [FE]        AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]    if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')));	      tokens.add(token);    	non-compiled	[CE]  	3	None	replace
39	[BUG]  [BUGGY]  token  =(String)iter.next();  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(   "--   "))  {    [BUGGY]  token  =(String)iter.next();  [BUGGY]    {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	token  =(String)iter.next();	      	non-compiled	[CE]  ';'  expected	2	None	replace
