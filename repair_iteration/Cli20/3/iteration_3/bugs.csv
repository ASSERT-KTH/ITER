bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')+  1));	  tokens.add(token.substring(0,    token.lastIndexOf('=')));    	non-compiled	[CE]  ';'  expected	38	None	replace
2	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')-  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')-  1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')-  1));	  tokens.add(token.substring(0,    token.lastIndexOf('=')));    	non-compiled	[CE]  	38	None	replace
3	[BUG]  [BUGGY]  tokens  =(String[])iter.getValue()  -  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens  =(String[])iter.getValue()  -  1;  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens  =(String[])iter.getValue()  -  1;	  tokens    =(String[])iter.next()    -    1;    	non-compiled	[CE]  ';'  expected	30	None	replace
4	[BUG]  [BUGGY]  if(token.indexOf('=')>  -1  ||  token.indexOf('=')>  -1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(token.indexOf('=')>  -1  ||  token.indexOf('=')>  -1)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(token.indexOf('=')>  -1  ||  token.indexOf('=')>  -1)  {	  if(token.indexOf('=')>    -1)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
5	[BUG]  [BUGGY]  if(token.indexOf('=')>  -1  ||  token.indexOf(':')>  -1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(token.indexOf('=')>  -1  ||  token.indexOf(':')>  -1)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(token.indexOf('=')>  -1  ||  token.indexOf(':')>  -1)  {	  if(token.indexOf('=')>    -1)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
6	[BUG]  [BUGGY]  if(token.indexOf('=')  <  0)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(token.indexOf('=')  <  0)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(token.indexOf('=')  <  0)  {	  if(token.indexOf('=')    <    -1)    {    	non-compiled	[CE]  ';'  expected	37	None	replace
7	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Option  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Option  currentOption  =  options.getOption(token,  stopAtNonOption);	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	25	None	replace
8	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Option  currentOption  =  options.getOption(token)+  1;  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Option  currentOption  =  options.getOption(token)+  1;	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	25	None	replace
9	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token  +  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Option  currentOption  =  options.getOption(token  +  1);  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Option  currentOption  =  options.getOption(token  +  1);	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	25	None	replace
10	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')+  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')+  1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf(':')+  1));	  tokens.add(token.substring(0,    token.indexOf(':')));    	non-compiled	[CE]  	23	None	replace
11	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')-  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')-  1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf(':')-  1));	  tokens.add(token.substring(0,    token.indexOf(':')));    	non-compiled	[CE]  	23	None	replace
12	[BUG]  [BUGGY]  Iterator  <  String>  token  =  iter.next().values().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  token  =  iter.next().values().iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  token  =  iter.next().values().iterator();	  Iterator    <    String>    token    =    iter.next().iterator();    	non-compiled	[CE]  	17	None	replace
13	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.startsWith( "- ")||  token.startsWith( "-- "))  {	  if(stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
14	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "- "))  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "- "))  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.startsWith( "- "))  {	  if(stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  ';'  expected	2	None	replace
15	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  iter.next();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  iter.next();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  token  :  iter.next();	  Iterator    <    String>    tokens    =(iter.hasNext())?   "--   "    :    iter.next();    	non-compiled	[CE]  	29	None	replace
16	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?   "-- "  :  token.next();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?   "-- "  :  token.next();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?   "-- "  :  token.next();	  Iterator    <    String>    tokens    =(iter.hasNext())?   "--   "    :    iter.next();    	non-compiled	[CE]  	29	None	replace
17	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?   "-- "  :  token;  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?   "-- "  :  token;  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?   "-- "  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?   "--   "    :    iter.next();    	non-compiled	[CE]  ';'  expected	29	None	replace
18	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token  :   "-- "  :  iter.next();  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  token  :   "-- "  :  iter.next();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  token  :   "-- "  :  iter.next();	  Iterator    <    String>    tokens    =(iter.hasNext())?   "--   "    :    iter.next();    	non-compiled	[CE]  	29	None	replace
19	[BUG]  [BUGGY]  tokens  =(String[])iter.getValue();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens  =(String[])iter.getValue();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens  =(String[])iter.getValue();	  tokens    =(String[])iter.remove();    	non-compiled	[CE]  ';'  expected	12	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1,  token.length()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  1,  token.length()));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('-')+  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('-')+    1));    	non-compiled	[CE]  	14	None	replace
21	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  2));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-')+  2));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('-')+  2));	  tokens.add(token.substring(0,    token.indexOf('-')+    1));    	non-compiled	[CE]  ';'  expected	14	None	replace
22	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf( "-- ")  >=  0)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  ||  token.indexOf( "-- ")  >=  0)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.indexOf( "-- ")  >=  0)  {	  if(stopAtNonOption    &&    token.indexOf(   "--   ")    >=    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf( "-- ")  ==  0)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.indexOf( "-- ")  ==  0)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf( "-- ")  ==  0)  {	  if(stopAtNonOption    &&    token.indexOf(   "--   ")    >=    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf('-')  >=  0)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.indexOf('-')  >=  0)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf('-')  >=  0)  {	  if(stopAtNonOption    &&    token.indexOf(   "--   ")    >=    0)    {    	non-compiled	[CE]  ';'  expected	27	None	replace
25	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  iter  =  this.currentOption.iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  this.currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  ';'  expected	18	None	replace
26	[BUG]  [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  iter  =  currentOption.arguments.iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  currentOption.arguments.iterator();	  Iterator    iter    =    this.arguments.iterator();    	non-compiled	[CE]  	11	None	replace
27	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  iter  =  currentOption.iterator();  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  currentOption.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  	24	None	replace
28	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  iter  =  arguments.iterator();  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  arguments.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  	24	None	replace
29	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  currentOption.options.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  	24	None	replace
30	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  new  HashSet  <  String>();	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  Token.EMPTY;  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  Token.EMPTY;  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  Token.EMPTY;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  ';'  expected	8	None	replace
32	[BUG]  [BUGGY]  token  =(String)iter.next()  +  1;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  token  =(String)iter.next()  +  1;  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	token  =(String)iter.next()  +  1;	  token    =(String)iter.next();    	non-compiled	[CE]  	39	None	replace
33	[BUG]  [BUGGY]  token  =(String)iter.next()  -  1;  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  token  =(String)iter.next()  -  1;  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	token  =(String)iter.next()  -  1;	  token    =(String)iter.next();    	non-compiled	[CE]  ';'  expected	39	None	replace
34	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length())!=  ')')  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length())!=  ')')  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.charAt(token.length())!=  ')')  {	  if(stopAtNonOption    &&    token.charAt(token.length()    -    1)!=    ')')    {    	non-compiled	[CE]  ';'  expected	1	None	replace
35	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.charAt(token.length()  -  1)!=  ')')  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  ||  token.charAt(token.length()  -  1)!=  ')')  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.charAt(token.length()  -  1)!=  ')')  {	  if(stopAtNonOption    &&    token.charAt(token.length()    -    1)!=    ')')    {    	non-compiled	[CE]  ';'  expected	1	None	replace
36	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token  +  1;  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token  +  1;  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token  +  1;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  ';'  expected	28	None	replace
37	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next().toLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  iter.next().toLowerCase();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =  iter.next().toLowerCase();	  Iterator    <    String>    tokens    =    iter.next().toString();    	non-compiled	[CE]  	9	None	replace
38	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  currentOptions.iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  Option>  iter  =  currentOptions.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  	33	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')  ==  -1)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')  ==  -1)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf('=')  ==  -1)  {	  if(stopAtNonOption    ||    token.indexOf('=')    ==    -1)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
40	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  >=  -1)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')  >=  -1)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.indexOf('=')  >=  -1)  {	  if(stopAtNonOption    ||    token.indexOf('=')    ==    -1)    {    	non-compiled	[CE]  ';'  expected	34	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')!=  -1)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')!=  -1)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.indexOf('=')!=  -1)  {	  if(stopAtNonOption    ||    token.indexOf('=')    ==    -1)    {    	non-compiled	[CE]  	34	None	replace
42	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  	20	None	replace
43	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  	20	None	replace
44	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  this.tokens.iterator();	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  ';'  expected	10	None	replace
45	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next().values().iterator();  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  iter.next().values().iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =  iter.next().values().iterator();	  Iterator    <    String>    tokens    =    iter.next().iterator();    	non-compiled	[CE]  ';'  expected	7	None	replace
46	[BUG]  [BUGGY]  List  <  String>  tokens  =  iter.next().iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  List  <  String>  tokens  =  iter.next().iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	List  <  String>  tokens  =  iter.next().iterator();	  Iterator    <    String>    tokens    =    iter.next().iterator();    	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  tokens.add( "-- "  +  token);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add( "-- "  +  token);  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add( "-- "  +  token);	  tokens.add(   "--   ");    	non-compiled	[CE]  	31	None	replace
48	[BUG]  [BUGGY]  tokens.add( "-- ",  token);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add( "-- ",  token);  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add( "-- ",  token);	  tokens.add(   "--   ");    	non-compiled	[CE]  	31	None	replace
49	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length());  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length());	  tokens.add(token.substring(0,    token.indexOf('-'))    +    1);    	non-compiled	[CE]  	15	None	replace
50	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('-'))  +  1,  token.length()));	  tokens.add(token.substring(0,    token.indexOf('-'))    +    1);    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "-- "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  ||  token.startsWith( "-- "))  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.startsWith( "-- "))  {	  if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  	26	None	replace
52	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "-- ")||  token.startsWith( "--))  {  [CE]  unclosed  string  literal  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "-- ")||  token.startsWith( "--))  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.startsWith( "-- ")||  token.startsWith( "--))  {	  if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  unclosed  string  literal	26	None	replace
53	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  iter.next();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  iter  =  iter.next();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  iter.next();	  Iterator    <    String>    token    =    iter.next()    +    1;    	non-compiled	[CE]  	32	None	replace
54	[BUG]  [BUGGY]  Iterator  <  String>  token  =  itser.next();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  token  =  itser.next();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  token  =  itser.next();	  Iterator    <    String>    token    =    iter.next()    +    1;    	non-compiled	[CE]  	32	None	replace
55	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')+  1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')+  1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('/')+  1));	  tokens.add(token.substring(0,    token.indexOf('/')));    	non-compiled	[CE]  	22	None	replace
56	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')-  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('/')-  1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('/')-  1));	  tokens.add(token.substring(0,    token.indexOf('/')));    	non-compiled	[CE]  	22	None	replace
57	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1);  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1)+  1);	  tokens.add(token.substring(0,    token.indexOf('=')-    1));    	non-compiled	[CE]  	6	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length())  ==  ')')  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length())  ==  ')')  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.charAt(token.length())  ==  ')')  {	  if(stopAtNonOption    &&    token.charAt(token.length()    -    1)    ==    ')')    {    	non-compiled	[CE]  	3	None	replace
59	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.charAt(token.length()  -  1)  ==  ')')  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  ||  token.charAt(token.length()  -  1)  ==  ')')  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.charAt(token.length()  -  1)  ==  ')')  {	  if(stopAtNonOption    &&    token.charAt(token.length()    -    1)    ==    ')')    {    	non-compiled	[CE]  	3	None	replace
60	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')>  0)  {  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')>  0)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf('=')>  0)  {	  if(stopAtNonOption    &&    token.indexOf('=')>    -1)    {    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')>  -1)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  ||  token.indexOf('=')>  -1)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  ||  token.indexOf('=')>  -1)  {	  if(stopAtNonOption    &&    token.indexOf('=')>    -1)    {    	non-compiled	[CE]  	4	None	replace
62	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')>  -1  ||  token.indexOf('=')>  -1)  {  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')>  -1  ||  token.indexOf('=')>  -1)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf('=')>  -1  ||  token.indexOf('=')>  -1)  {	  if(stopAtNonOption    &&    token.indexOf('=')>    -1)    {    	non-compiled	[CE]  	4	None	replace
63	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  this.tokens.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  	16	None	replace
64	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?   "--n "  :  iter.next();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?   "--n "  :  iter.next();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?   "--n "  :  iter.next();	  Iterator    <    String>    tokens    =(iter.hasNext())?   "--   "    :    iter.next();    	non-compiled	[CE]  	29	None	replace
65	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =  iter.next().keySet().iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =  iter.next().keySet().iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =  iter.next().keySet().iterator();	  Iterator    <    String>    tokens    =    iter.next().iterator();    	non-compiled	[CE]  	7	None	replace
66	[BUG]  [BUGGY]  Ilerator  <  String>  token  =  iter.next();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Ilerator  <  String>  token  =  iter.next();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Ilerator  <  String>  token  =  iter.next();	  Iterator    <    String>    token    =    iter.next()    +    1;    	non-compiled	[CE]  	32	None	replace
67	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "-- ")||  stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "-- ")||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.startsWith( "-- ")||  stopAtNonOption)  {	  if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  	26	None	replace
68	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  currentOptions.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  iter  =  currentOptions.iterator();  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  currentOptions.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  	24	None	replace
69	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :   "-- ";  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :   "-- ";  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :   "-- ";	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    null;    	non-compiled	[CE]  	8	None	replace
70	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token,  stopAtNonOption;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token,  stopAtNonOption;  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token,  stopAtNonOption;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  	28	None	replace
71	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.startsWith( "- ")||  stopAtNonOption)  {	  if(stopAtNonOption    &&    token.startsWith(   "-   "))    {    	non-compiled	[CE]  	2	None	replace
72	[BUG]  [BUGGY]  Iterator  <  String>  token  =  iter.next().keySet().iterator();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  token  =  iter.next().keySet().iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  token  =  iter.next().keySet().iterator();	  Iterator    <    String>    token    =    iter.next().iterator();    	non-compiled	[CE]  	17	None	replace
73	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':'),  -1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':'),  -1));  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add(token.substring(0,  token.indexOf(':'),  -1));	  tokens.add(token.substring(0,    token.indexOf(':')));    	non-compiled	[CE]  	23	None	replace
74	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')>  -1  &&  token.charAt(token.length()  -  1)!=  ')'  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')>  -1  &&  token.charAt(token.length()  -  1)!=  ')'  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf('=')>  -1  &&  token.charAt(token.length()  -  1)!=  ')'	  if(stopAtNonOption    &&    token.indexOf('=')>    -1)    {    	non-compiled	[CE]  	4	None	replace
75	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')  >=  -1)  {  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')  >=  -1)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf('=')  >=  -1)  {	  if(stopAtNonOption    &&    token.indexOf('=')>    -1)    {    	non-compiled	[CE]  	4	None	replace
76	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  currentOption.iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  Option>  iter  =  currentOption.iterator();	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  	18	None	replace
77	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  Option>  iter  =  options.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  	33	None	replace
78	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  +  1  :  token;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  +  1  :  token;  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  +  1  :  token;	  Iterator    <    String>    tokens    =(iter.hasNext())?    iter.next()    :    token;    	non-compiled	[CE]  	28	None	replace
79	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "=- "))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.startsWith( "=- "))  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.startsWith( "=- "))  {	  if(stopAtNonOption    &&    token.startsWith(   "--   "))    {    	non-compiled	[CE]  	26	None	replace
80	[BUG]  [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token.toLowerCase();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token.toLowerCase();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  tokens  =(iter.hasNext())?  iter.next()  :  token.toLowerCase();	  Iterator    <    String>    tokens    =    iter.next().iterator();    	non-compiled	[CE]  	7	None	replace
81	[BUG]  [BUGGY]  tokens.add('-');  [CE]  [FE]            AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  tokens.add('-');  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	tokens.add('-');	  tokens.add(   "--   ");    	non-compiled	[CE]  	31	None	replace
82	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	  Iterator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  	24	None	replace
83	[BUG]  [BUGGY]  Iterator  <  String>  token  =  iter.reext();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  <  String>  token  =  iter.reext();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  <  String>  token  =  iter.reext();	  Iterator    <    String>    token    =    iter.next()    +    1;    	non-compiled	[CE]  	32	None	replace
84	[BUG]  [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Iterator  iter  =  this.currentOptions.iterator();  [BUGGY]      if  (token.indexOf('=')  !=  -1)    {  {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Iterator  iter  =  this.currentOptions.iterator();	  Iterator    iter    =    currentOptions.iterator();    	non-compiled	[CE]  	33	None	replace
85	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')  >=  0)  {  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.indexOf('=')  >=  0)  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.indexOf('=')  >=  0)  {	  if(stopAtNonOption    &&    token.indexOf(   "--   ")    >=    0)    {    	non-compiled	[CE]  	27	None	replace
86	[BUG]  [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length()  -  1)  ==  ')'  {  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  if(stopAtNonOption  &&  token.charAt(token.length()  -  1)  ==  ')'  {  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	if(stopAtNonOption  &&  token.charAt(token.length()  -  1)  ==  ')'  {	  if(stopAtNonOption    &&    token.charAt(token.length()    -    1)    ==    ')')    {    	non-compiled	[CE]  	3	None	replace
87	[BUG]  [BUGGY]  Option  currentOption  =  iter.next();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  Option  currentOption  =  iter.next();  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	Option  currentOption  =  iter.next();	  Option    currentOption    =    options.getOption(token);    	non-compiled	[CE]  	25	None	replace
88	[BUG]  [BUGGY]  token  =(String)iter.getValue();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  token  =(String)iter.getValue();  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	token  =(String)iter.getValue();	  token    =(String)iter.next();    	non-compiled	[CE]  	39	None	replace
89	[BUG]  [BUGGY]  token  =(String)iter.remove();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      while  (iter.hasNext())  {  String  token  =  (String)  iter.next();  if  (token.startsWith(     "--     "))  {      [BUGGY]  token  =(String)iter.remove();  [BUGGY]      {  tokens.add(token.substring(0,  token.indexOf('=')));  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	token  =(String)iter.remove();	  token    =(String)iter.next();    	non-compiled	[CE]  	39	None	replace
