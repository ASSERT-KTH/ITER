bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currentOption  =  options.getOption();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption();	  currentOption    =    option.getOption();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
2	[BUG]  [BUGGY]  currentOption  =  option.getOption(),  tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  option.getOption(),  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  option.getOption(),  tokens);	  currentOption    =    option.getOption();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
3	[BUG]  [BUGGY]  tokens.remove(0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove(0);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.remove(0);	  tokens.remove(   "--   ");    	non-compiled	[CE]  <identifier>  expected	4	None	replace
4	[BUG]  [BUGGY]  currentOption  =  options.clone();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.clone();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.clone();	  currentOption    =    options.options;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
5	[BUG]  [BUGGY]  currentOption  =  options.options();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.options();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.options();	  currentOption    =    options.options;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
6	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
7	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
8	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
9	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
10	[BUG]  [BUGGY]  currentOption  =  new  Option(tokens.size()  -  2);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  new  Option(tokens.size()  -  2);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  new  Option(tokens.size()  -  2);	  currentOption    =    new    Option(tokens.size()    *    2);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
11	[BUG]  [BUGGY]  currentOption  =  new  Option(tokens.size()  /  2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  new  Option(tokens.size()  /  2);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  new  Option(tokens.size()  /  2);	  currentOption    =    new    Option(tokens.size()    *    2);    	non-compiled	[CE]  <identifier>  expected	21	None	replace
12	[BUG]  [BUGGY]  currentOption  =  options.getOption(this);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption(this);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption(this);	  currentOption    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
13	[BUG]  [BUGGY]  currentOption  =  options.getOption(Token.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption(Token.EXPR_RESULT);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption(Token.EXPR_RESULT);	  currentOption    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
14	[BUG]  [BUGGY]  currentOption  =  options.getOption(items);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption(items);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption(items);	  currentOption    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
15	[BUG]  [BUGGY]  currentOption  =  options.getOption(Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption(Token.NAME);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption(Token.NAME);	  currentOption    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
16	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption  ==  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
17	[BUG]  [BUGGY]  if(!currentOption)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!currentOption)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!currentOption)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
18	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "null ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
19	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "- ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
20	[BUG]  [BUGGY]  tokens.add( "   ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "   ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "   ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
21	[BUG]  [BUGGY]  currentOption  =  Option.NONE  ||  tokens.size()  >  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  ||  tokens.size()  >  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  ||  tokens.size()  >  1;	  currentOption    =    Option.NONE    &&    tokens.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
22	[BUG]  [BUGGY]  currentOption  =  Option.NONE  &&  tokens.size()  ==  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  &&  tokens.size()  ==  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  &&  tokens.size()  ==  1;	  currentOption    =    Option.NONE    &&    tokens.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
23	[BUG]  [BUGGY]  currentOption  =  Option.NONE  &&  tokens.size()  >  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  &&  tokens.size()  >  2;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  &&  tokens.size()  >  2;	  currentOption    =    Option.NONE    &&    tokens.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
24	[BUG]  [BUGGY]  currentOption  =  options.clonePosition();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.clonePosition();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.clonePosition();	  currentOption    =    options.cloneTree();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
25	[BUG]  [BUGGY]  currentOption  =  options.cloneOption(this);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.cloneOption(this);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.cloneOption(this);	  currentOption    =    options.cloneTree();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
26	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
27	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  false;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
28	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption  ==  null)  {  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption  ==  null)  {  currentOption  =  null;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
29	[BUG]  [BUGGY]  options.addAll(this.tokens);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.addAll(this.tokens);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.addAll(this.tokens);	  options.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
30	[BUG]  [BUGGY]  options.addAll(tokens.values());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.addAll(tokens.values());  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.addAll(tokens.values());	  options.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
31	[BUG]  [BUGGY]  currentOption  =  new  Option(options,  tokens);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  new  Option(options,  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  new  Option(options,  tokens);	  currentOption    =    new    Option(options);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
32	[BUG]  [BUGGY]  currentOption  =  new  Option(options,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  new  Option(options,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  new  Option(options,  eatTheRest);	  currentOption    =    new    Option(options);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
33	[BUG]  [BUGGY]  options.add(currentOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(currentOption);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.add(currentOption);	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
34	[BUG]  [BUGGY]  currentOption  =  eatTheRest.options;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  eatTheRest.options;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  eatTheRest.options;	  currentOption    =    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	25	None	replace
35	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-- "  +  this.options);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "-- "  +  this.options);	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	51	None	replace
36	[BUG]  [BUGGY]  tokens.add( "-- ").equals(this.options);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-- ").equals(this.options);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "-- ").equals(this.options);	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	51	None	replace
37	[BUG]  [BUGGY]  tokens.add( "-- ").equals(this.options));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-- ").equals(this.options));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "-- ").equals(this.options));	  tokens.add(   "--   ".equals(this.options));    	non-compiled	[CE]  <identifier>  expected	51	None	replace
38	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
39	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this,  eatTheRest,  tokens);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  currentOption  =  options.getOption(this,  eatTheRest,  tokens);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  currentOption  =  options.getOption(this,  eatTheRest,  tokens);	  Option    currentOption    =    options.getOption(this,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
40	[BUG]  [BUGGY]  options.setOption(this,  eatTheRest);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.setOption(this,  eatTheRest);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.setOption(this,  eatTheRest);	  Option    currentOption    =    options.getOption(this,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
41	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this,  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  currentOption  =  options.getOption(this,  null);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  currentOption  =  options.getOption(this,  null);	  Option    currentOption    =    options.getOption(this,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
42	[BUG]  [BUGGY]  options.clear();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.clear();  currentOption  =  null;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.clear();  currentOption  =  null;	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
43	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
44	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-- "  +  currentOption);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "-- "  +  currentOption);	  tokens.add(   "--   "    +    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-- "  +  this.currentOption);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "-- "  +  this.currentOption);	  tokens.add(   "--   "    +    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this,  tokens,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  currentOption  =  options.getOption(this,  tokens,  eatTheRest);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  currentOption  =  options.getOption(this,  tokens,  eatTheRest);	  Option    currentOption    =    options.getOption(this,    tokens);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
47	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this,  tokens,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  currentOption  =  options.getOption(this,  tokens,  false);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  currentOption  =  options.getOption(this,  tokens,  false);	  Option    currentOption    =    options.getOption(this,    tokens);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
48	[BUG]  [BUGGY]  if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
49	[BUG]  [BUGGY]  currentOption  =  Option.NONE  &&  eatTheRest;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  &&  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  &&  eatTheRest;	  currentOption    =    Option.NONE    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
50	[BUG]  [BUGGY]  currentOption  =  Option.NONE  ||  tokens.size()  >  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  ||  tokens.size()  >  0;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  ||  tokens.size()  >  0;	  currentOption    =    Option.NONE    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
51	[BUG]  [BUGGY]  currentOption  =  Option.NONE  ||  tokens;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  ||  tokens;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  ||  tokens;	  currentOption    =    Option.NONE    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
52	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  options);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  options);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.clear();  currentOption  =  new  Option(this,  options);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
53	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  eatTheRest);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.clear();  currentOption  =  new  Option(this,  eatTheRest);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
54	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(tokens);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.clear();  currentOption  =  new  Option(tokens);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.clear();  currentOption  =  new  Option(tokens);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
55	[BUG]  [BUGGY]  currentOption  =  Option.NONE  &&  currentOption!=  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  &&  currentOption!=  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  &&  currentOption!=  null;	  currentOption    =    Option.NONE    ||    currentOption!=    null;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
56	[BUG]  [BUGGY]  currentOption  =  Option.NONE  ||  currentOption  ==  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  ||  currentOption  ==  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  ||  currentOption  ==  null;	  currentOption    =    Option.NONE    ||    currentOption!=    null;    	non-compiled	[CE]  <identifier>  expected	55	None	replace
57	[BUG]  [BUGGY]  options.add(new  Option(this,  currentOption));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(new  Option(this,  currentOption));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.add(new  Option(this,  currentOption));	  options.add(new    Option(this));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
58	[BUG]  [BUGGY]  options.add(new  Option(tokens));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(new  Option(tokens));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.add(new  Option(tokens));	  options.add(new    Option(this));    	non-compiled	[CE]  <identifier>  expected	3	None	replace
59	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
60	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(tokens,    0,    currentOption,    tokens.size()    -1,    tokens.size()    -    1);    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
61	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(tokens,    0,    currentOption,    tokens.size()    -1,    tokens.size()    -    1);    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
62	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(tokens,    0,    currentOption,    tokens.size()    -1,    tokens.size()    -    1);    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
63	[BUG]  [BUGGY]  CurrentOption  currentOption  =  new  Option(tokens.size()  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  CurrentOption  currentOption  =  new  Option(tokens.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	CurrentOption  currentOption  =  new  Option(tokens.size()  -  1);	  CurrentOption    currentOption    =    new    Option(tokens.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
64	[BUG]  [BUGGY]  CurrentOption  currentOption  =  new  Option(tokens.size()  +  1);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  CurrentOption  currentOption  =  new  Option(tokens.size()  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	CurrentOption  currentOption  =  new  Option(tokens.size()  +  1);	  CurrentOption    currentOption    =    new    Option(tokens.size());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
65	[BUG]  [BUGGY]  tokens.remove( "null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove( "null ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.remove( "null ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
66	[BUG]  [BUGGY]  currentOption  =  options.size()  >  2;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.size()  >  2;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.size()  >  2;	  currentOption    =    options.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
67	[BUG]  [BUGGY]  currentOption  =  options.size();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.size();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.size();	  currentOption    =    options.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
68	[BUG]  [BUGGY]  currentOption  =  options.size()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.size()  +  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.size()  +  1;	  currentOption    =    options.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
69	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
70	[BUG]  [BUGGY]  if(!tokens.contains( "- "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!tokens.contains( "- "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!tokens.contains( "- "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
71	[BUG]  [BUGGY]  currentOption  =  Option.NONE  /  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  /  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  /  1;	  currentOption    =    Option.NONE    -    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
72	[BUG]  [BUGGY]  currentOption  =  Option.NONE  -  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  -  2;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  -  2;	  currentOption    =    Option.NONE    -    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
73	[BUG]  [BUGGY]  options.add(new  Option( "));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(new  Option( "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.add(new  Option( "));	  options.add(new    Option(   "   "));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
74	[BUG]  [BUGGY]  options.add(new  Option( "- "));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(new  Option( "- "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.add(new  Option( "- "));	  options.add(new    Option(   "   "));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
75	[BUG]  [BUGGY]  options.add(new  Option( "_ "));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(new  Option( "_ "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.add(new  Option( "_ "));	  options.add(new    Option(   "   "));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
76	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(this.tokens);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  currentOption  =  options.getOption(this.tokens);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  currentOption  =  options.getOption(this.tokens);	  Option    currentOption    =    options.getOption(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
77	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  currentOption  =  options.getOption(tokens,  false);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  currentOption  =  options.getOption(tokens,  false);	  Option    currentOption    =    options.getOption(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
78	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  currentOption  =  options.getOption(tokens,  true);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  currentOption  =  options.getOption(tokens,  true);	  Option    currentOption    =    options.getOption(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
79	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  LinkedList();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.clear();  currentOption  =  new  LinkedList();  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.clear();  currentOption  =  new  LinkedList();	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
80	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  java.util.ArrayList();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.clear();  currentOption  =  new  java.util.ArrayList();  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.clear();  currentOption  =  new  java.util.ArrayList();	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
81	[BUG]  [BUGGY]  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  new  ArrayList();  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  new  ArrayList();	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
82	[BUG]  [BUGGY]  if(currentOption!=  null)  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  currentOption  =  null;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
83	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
84	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
85	[BUG]  [BUGGY]  currentOption  =  Options.newInstance(tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Options.newInstance(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Options.newInstance(tokens);	  currentOption    =    Options.newInstance();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
86	[BUG]  [BUGGY]  currentOption  =  Option.newInstance();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.newInstance();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.newInstance();	  currentOption    =    Options.newInstance();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
87	[BUG]  [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	||!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
88	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
89	[BUG]  [BUGGY]  ||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
90	[BUG]  [BUGGY]  currentOption  =  new  Option(tokens,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  new  Option(tokens,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  new  Option(tokens,  options);	  currentOption    =    new    Option(tokens);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
91	[BUG]  [BUGGY]  currentOption  =  options.toArray(new  Option[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.toArray(new  Option[tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.toArray(new  Option[tokens.size()  ]);	  currentOption    =    options.toArray(new    Option[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
92	[BUG]  [BUGGY]  currentOption  =  options.toArray(new  Option[options.size()  +  1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.toArray(new  Option[options.size()  +  1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.toArray(new  Option[options.size()  +  1]);	  currentOption    =    options.toArray(new    Option[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
93	[BUG]  [BUGGY]  currentOption  =  options.nextToken();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.nextToken();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.nextToken();	  currentOption    =    options.next();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
94	[BUG]  [BUGGY]  currentOption  =  options.get(options.size()  -  1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.get(options.size()  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.get(options.size()  -  1);	  currentOption    =    options.next();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
95	[BUG]  [BUGGY]  currentOption  =  options.get();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.get();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.get();	  currentOption    =    options.next();    	non-compiled	[CE]  <identifier>  expected	48	None	replace
96	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
97	[BUG]  [BUGGY]  tokens.add( "00 ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "00 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "00 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	54	None	replace
98	[BUG]  [BUGGY]  tokens.add( "0 ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "0 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "0 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	54	None	replace
99	[BUG]  [BUGGY]  tokens.add( "-00 ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-00 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "-00 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	54	None	replace
100	[BUG]  [BUGGY]  tokens.add( "# ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "# ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "# ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	54	None	replace
101	[BUG]  [BUGGY]  currentOption  =  Option.NO_OPTIONAL_OPTION  ||  eatTheRest;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NO_OPTIONAL_OPTION  ||  eatTheRest;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NO_OPTIONAL_OPTION  ||  eatTheRest;	  currentOption    =    Option.NO_OPTIONAL_OPTION;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
102	[BUG]  [BUGGY]  currentOption  =  Option.NO_OPTIONAL_OPTION  &&  tokens.size()  >  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NO_OPTIONAL_OPTION  &&  tokens.size()  >  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NO_OPTIONAL_OPTION  &&  tokens.size()  >  1;	  currentOption    =    Option.NO_OPTIONAL_OPTION;    	non-compiled	[CE]  <identifier>  expected	31	None	replace
103	[BUG]  [BUGGY]  currentOption  =  options.getOption( "this.eatTheRest ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption( "this.eatTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption( "this.eatTheRest ");	  currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
104	[BUG]  [BUGGY]  currentOption  =  options.getOption( "findTheRest ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption( "findTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption( "findTheRest ");	  currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
105	[BUG]  [BUGGY]  currentOption  =  options.getOption( "select  theRest ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption( "select  theRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption( "select  theRest ");	  currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
106	[BUG]  [BUGGY]  options.put(this,  currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.put(this,  currentOption);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.put(this,  currentOption);	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
107	[BUG]  [BUGGY]  currentOption  =  options.size()  -  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.size()  -  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.size()  -  1;	  currentOption    =    options.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
108	[BUG]  [BUGGY]  currentOption  =  options.size()  <  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.size()  <  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.size()  <  1;	  currentOption    =    options.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	27	None	replace
109	[BUG]  [BUGGY]  if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(options!=  null)  {  Option  currentOption  =  options.getOption(this);  tokens.clear();  }	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
110	[BUG]  [BUGGY]  Option  options  =  options.getOption(this);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  options  =  options.getOption(this);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  options  =  options.getOption(this);	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
111	[BUG]  [BUGGY]  if(options!=  null)  {  Option  options  =  options.getOption(this);  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(options!=  null)  {  Option  options  =  options.getOption(this);  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(options!=  null)  {  Option  options  =  options.getOption(this);  tokens.clear();  }	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
112	[BUG]  [BUGGY]  currentOption  =  option.getOption(this);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  option.getOption(this);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  option.getOption(this);	  currentOption    =    option.getOption();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
113	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
114	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  Option  currentOption  =  options.getOption(tokens,  eatTheRest);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	Option  currentOption  =  options.getOption(tokens,  eatTheRest);	  Option    currentOption    =    options.getOption(tokens);    	non-compiled	[CE]  <identifier>  expected	42	None	replace
115	[BUG]  [BUGGY]  if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	37	None	replace
116	[BUG]  [BUGGY]  currentOption  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption(tokens);	  currentOption    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
117	[BUG]  [BUGGY]  currentOption  =  options.getOption(options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption(options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption(options);	  currentOption    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
118	[BUG]  [BUGGY]  ||(eatTheRest!=  null  &&  tokens.size()  >  0))  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||(eatTheRest!=  null  &&  tokens.size()  >  0))  {  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	||(eatTheRest!=  null  &&  tokens.size()  >  0))  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
119	[BUG]  [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest  ==  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
120	[BUG]  [BUGGY]  ||(eatTheRest!=  null  &&  tokens.size()  >  1))  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||(eatTheRest!=  null  &&  tokens.size()  >  1))  {  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	||(eatTheRest!=  null  &&  tokens.size()  >  1))  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
121	[BUG]  [BUGGY]  currentOption  =  Option.NONE  &&  tokens.size()  >=  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  &&  tokens.size()  >=  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  &&  tokens.size()  >=  1;	  currentOption    =    Option.NONE    &&    tokens.size()    >    1;    	non-compiled	[CE]  <identifier>  expected	29	None	replace
122	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
123	[BUG]  [BUGGY]  currentOption  =  Option.NONE  -  1L;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  -  1L;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  -  1L;	  currentOption    =    Option.NONE    -    1;    	non-compiled	[CE]  <identifier>  expected	30	None	replace
124	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
125	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
126	[BUG]  [BUGGY]  options.add(new  Option( "-- "));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.add(new  Option( "-- "));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.add(new  Option( "-- "));	  options.add(new    Option(   "   "));    	non-compiled	[CE]  <identifier>  expected	36	None	replace
127	[BUG]  [BUGGY]  this.eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.eatTheRest  =  false;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	this.eatTheRest  =  false;	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
128	[BUG]  [BUGGY]  eatTheRest  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  eatTheRest  =  null;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	eatTheRest  =  null;	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	17	None	replace
129	[BUG]  [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	||!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
130	[BUG]  [BUGGY]  currentOption  =  options.getOption( "eatTheRest ",  tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption( "eatTheRest ",  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption( "eatTheRest ",  tokens);	  currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
131	[BUG]  [BUGGY]  tokens.add( "none ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "none ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "none ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	14	None	replace
132	[BUG]  [BUGGY]  currentOption  =  Options.newInstance(options);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Options.newInstance(options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Options.newInstance(options);	  currentOption    =    Options.newInstance();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
133	[BUG]  [BUGGY]  currentOption  =  new  Option(options,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  new  Option(options,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  new  Option(options,  options);	  currentOption    =    new    Option(options);    	non-compiled	[CE]  <identifier>  expected	41	None	replace
134	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!eatTheRest)  {  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }	  if(currentOption    ==    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
135	[BUG]  [BUGGY]  currentOption  =  options.cloneOptions();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.cloneOptions();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.cloneOptions();	  currentOption    =    options.options;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
136	[BUG]  [BUGGY]  currentOption  =  options.cloneOption();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.cloneOption();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.cloneOption();	  currentOption    =    options.options;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
137	[BUG]  [BUGGY]  options.setOption(this);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.setOption(this);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.setOption(this);	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
138	[BUG]  [BUGGY]  options.put(this,  options);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.put(this,  options);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.put(this,  options);	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
139	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption  ==  null)  {  tokens  =  new  ArrayList  <  Option>();  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
140	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
141	[BUG]  [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(tokens  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	45	None	replace
142	[BUG]  [BUGGY]  if(!currentOption)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!currentOption)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!currentOption)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(tokens,    0,    currentOption,    tokens.size()    -1,    tokens.size()    -    1);    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
143	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
144	[BUG]  [BUGGY]  if(options!=  null)  {  currentOption  =  options.toArray(new  Option[options.size()  ]);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(options!=  null)  {  currentOption  =  options.toArray(new  Option[options.size()  ]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(options!=  null)  {  currentOption  =  options.toArray(new  Option[options.size()  ]);  }	  currentOption    =    options.toArray(new    Option[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
145	[BUG]  [BUGGY]  if(options!=  null)  {  currentOption  =  options.toArray(new  Option[options.size()  ]);  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(options!=  null)  {  currentOption  =  options.toArray(new  Option[options.size()  ]);  }  else  {  tokens.clear();  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(options!=  null)  {  currentOption  =  options.toArray(new  Option[options.size()  ]);  }  else  {  tokens.clear();  }	  currentOption    =    options.toArray(new    Option[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
146	[BUG]  [BUGGY]  tokens.add( "000 ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "000 ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "000 ");	  tokens.add(   "u00   ");    	non-compiled	[CE]  <identifier>  expected	54	None	replace
147	[BUG]  [BUGGY]  options.addAll(tokens,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.addAll(tokens,  eatTheRest);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.addAll(tokens,  eatTheRest);	  options.addAll(tokens);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
148	[BUG]  [BUGGY]  currentOption  =  new  Option(tokens,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  new  Option(tokens,  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  new  Option(tokens,  true);	  currentOption    =    new    Option(tokens);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
149	[BUG]  [BUGGY]  if(tokens!=  null)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(tokens!=  null)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(tokens!=  null)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
150	[BUG]  [BUGGY]  currentOption  =  options.getOption(option);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption(option);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption(option);	  currentOption    =    option.getOption();    	non-compiled	[CE]  <identifier>  expected	22	None	replace
151	[BUG]  [BUGGY]  currentOption  =  Option.NONE  ||  tokens.size()  ==  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  ||  tokens.size()  ==  1;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  ||  tokens.size()  ==  1;	  currentOption    =    Option.NONE    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
152	[BUG]  [BUGGY]  currentOption  =  Option.NONE  ||  tokens.size()  ==  0;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  Option.NONE  ||  tokens.size()  ==  0;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  Option.NONE  ||  tokens.size()  ==  0;	  currentOption    =    Option.NONE    ||    eatTheRest;    	non-compiled	[CE]  <identifier>  expected	28	None	replace
153	[BUG]  [BUGGY]  tokens.remove( "eatTheRest ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.remove( "eatTheRest ");  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.remove( "eatTheRest ");	  tokens.remove(   "n   ");    	non-compiled	[CE]  <identifier>  expected	15	None	replace
154	[BUG]  [BUGGY]  options.put(this,  options.getOption(this));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  options.put(this,  options.getOption(this));  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	options.put(this,  options.getOption(this));	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    	non-compiled	[CE]  <identifier>  expected	9	None	replace
155	[BUG]  [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  tokens.clear();  }	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
156	[BUG]  [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  }  else  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  }  else  {  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  }  else  {  tokens.clear();  }	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
157	[BUG]  [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  }	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
158	[BUG]  [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  if(currentOption!=  null)  {  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  if(currentOption!=  null)  {  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  Option  currentOption  =  options.getOption(this);  if(currentOption!=  null)  {  tokens.clear();  }	  if(options!=    null)    {    Option    currentOption    =    options.getOption(this);    }    else    {    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
159	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
160	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
161	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
162	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
163	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
164	[BUG]  [BUGGY]  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	||  currentOption  ==  null)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
165	[BUG]  [BUGGY]  this.eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  this.eatTheRest  =  true;  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	this.eatTheRest  =  true;	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
166	[BUG]  [BUGGY]  currentOption  =  options.getOption( "eattheRest ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption( "eattheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption( "eattheRest ");	  currentOption    =    options.getOptions();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
167	[BUG]  [BUGGY]  currentOption  =  tokens.size()  >  0;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  tokens.size()  >  0;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  tokens.size()  >  0;	  currentOption    =    options.size()    >    0;    	non-compiled	[CE]  <identifier>  expected	26	None	replace
168	[BUG]  [BUGGY]  tokens.add( "-- "  +  this.eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  tokens.add( "-- "  +  this.eatTheRest);  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	tokens.add( "-- "  +  this.eatTheRest);	  tokens.add(   "--   "    +    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	5	None	replace
169	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
170	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
171	[BUG]  [BUGGY]  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	System.arraycopy(tokens,  0,  currentOption,  tokens.size()  -1,  tokens.size()  -  1);  tokens.clear();	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    System.arraycopy(tokens,    0,    currentOption,    tokens.size()    -1,    tokens.size()    -    1);    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
172	[BUG]  [BUGGY]  currentOption  =  options.getOption( "tokens ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.getOption( "tokens ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.getOption( "tokens ");	  currentOption    =    options.getOption(   "eatTheRest   ");    	non-compiled	[CE]  <identifier>  expected	47	None	replace
173	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	||  currentOption!=  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
174	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  ||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	||  currentOption!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
175	[BUG]  [BUGGY]  currentOption  =  options.toArray(new  Option[tokens.size()  +  1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.toArray(new  Option[tokens.size()  +  1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.toArray(new  Option[tokens.size()  +  1]);	  currentOption    =    options.toArray(new    Option[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
176	[BUG]  [BUGGY]  currentOption  =  options.toArray(new  Option[Tokens.size()  ]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();      [BUGGY]  currentOption  =  options.toArray(new  Option[Tokens.size()  ]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	56	56	1	replace	currentOption  =  options.toArray(new  Option[Tokens.size()  ]);	  currentOption    =    options.toArray(new    Option[options.size()    ]);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
