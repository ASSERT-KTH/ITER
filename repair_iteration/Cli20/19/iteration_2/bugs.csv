bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }	  options.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
2	[BUG]  [BUGGY]  currentOption  =  null;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  currentOption  =  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	currentOption  =  null;	  tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  currentOption  =  new  ArrayList();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  new  ArrayList();	  tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  currentOption  =  new  Option(this);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  new  Option(this);	  tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  eatTheRest  =  false;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	eatTheRest  =  false;	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
6	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
7	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
8	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
9	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	      eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }	      eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	      eatTheRest    =    false;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	10	None	replace
12	[BUG]  [BUGGY]  tokens.add(currentOption.cloneTree());  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption.cloneTree());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.cloneTree());	      tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
13	[BUG]  [BUGGY]  tokens.add(currentOption.getValue());  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption.getValue());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.getValue());	      tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
14	[BUG]  [BUGGY]  tokens.add(currentOption.options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption.options);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.options);	      tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
15	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	  eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
16	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }	  eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
17	[BUG]  [BUGGY]  options.add(currentOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  options.add(currentOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	options.add(currentOption);	  options.clear();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  tokens.add(currentOption);  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption);  currentOption  =  new  ArrayList();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption);  currentOption  =  new  ArrayList();	  tokens.add(currentOption);    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
19	[BUG]  [BUGGY]  tokens.add(currentOption);  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption);  currentOption  =  new  Option();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption);  currentOption  =  new  Option();	  tokens.add(currentOption);    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
20	[BUG]  [BUGGY]  tokens.remove(currentOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.remove(currentOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.remove(currentOption);	  tokens.clear();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
21	[BUG]  [BUGGY]  tokens.add(new  PosixParser(this));  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(new  PosixParser(this));  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(new  PosixParser(this));	  tokens.clear();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
22	[BUG]  [BUGGY]  tokens.clear();  eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.clear();  eatTheRest  =  true;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  eatTheRest  =  true;	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
23	[BUG]  [BUGGY]  tokens.add(currentOption,  eatTheRest);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption,  eatTheRest);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption,  eatTheRest);	      tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
24	[BUG]  [BUGGY]  tokens.add(currentOption  &  0xFFFF);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(currentOption  &  0xFFFF);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption  &  0xFFFF);	      tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
25	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
26	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options  =  Lists.newArrayList();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options  =  Lists.newArrayList();  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options  =  Lists.newArrayList();  }	  tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
28	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
29	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
30	[BUG]  [BUGGY]  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }	  options.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
31	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens  =  new  ArrayList  <  Option>();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens  =  new  ArrayList  <  Option>();	  tokens.clear();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
32	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
33	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }	  tokens.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
34	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  null;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add( "-- ");  currentOption  =  null;  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "-- ");  currentOption  =  null;	  tokens.add(currentOption);    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest  ==  false)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
36	[BUG]  [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(eatTheRest!=  null)  {  eatTheRest  =  true;  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest!=  null)  {  eatTheRest  =  true;  }	      eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
37	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add( "n ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "n ");	  tokens.clear();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
38	[BUG]  [BUGGY]  tokens.add(0,  currentOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add(0,  currentOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(0,  currentOption);	      tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
39	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  tokens.add( "-- ");  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "-- ");	      tokens.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
40	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(tokens!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	  eatTheRest    =    true;    tokens.clear();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
41	[BUG]  [BUGGY]  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;    [BUGGY]  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  options.clear();  currentOption  =  null;  }	  options.clear();    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	4	None	replace
