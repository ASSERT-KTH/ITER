bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  currentOption  =  options;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  currentOption  =  options;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	currentOption  =  options;	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  currentOption  =  new  Option();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	currentOption  =  new  Option();	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  currentOption  =  option;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  currentOption  =  option;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	currentOption  =  option;	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  tokens.add(currentOption.getKey());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.getKey());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.getKey());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
5	[BUG]  [BUGGY]  tokens.add(currentOption.getValue(),  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.getValue(),  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.getValue(),  true);	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
6	[BUG]  [BUGGY]  tokens.add(currentOption.getSelectedValue());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.getSelectedValue());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.getSelectedValue());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
7	[BUG]  [BUGGY]  tokens.add(currentOption.clone());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.clone());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.clone());	  tokens.add(currentOption.cloneTree());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
8	[BUG]  [BUGGY]  tokens.add(currentOption.clonePosition());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.clonePosition());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.clonePosition());	  tokens.add(currentOption.cloneTree());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
9	[BUG]  [BUGGY]  tokens.add(currentOption.getName());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.getName());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.getName());	  tokens.add(currentOption.cloneTree());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
10	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
11	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  true;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
12	[BUG]  [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(tokens!=  null)  {  eatTheRest  =  false;  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
13	[BUG]  [BUGGY]  List  <  Option>  tokens  =  new  ArrayList  <  Option>(tokens.size());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  List  <  Option>  tokens  =  new  ArrayList  <  Option>(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	List  <  Option>  tokens  =  new  ArrayList  <  Option>(tokens.size());	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    else    {    options.add(option);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
14	[BUG]  [BUGGY]  List  <  Option>  tokens  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  List  <  Option>  tokens  =  Lists.newArrayList();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	List  <  Option>  tokens  =  Lists.newArrayList();	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    else    {    options.add(option);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
15	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    options.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
16	[BUG]  [BUGGY]  if(!tokens.contains( "- "))  {  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!tokens.contains( "- "))  {  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!tokens.contains( "- "))  {  if(eatTheRest)  {  options.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    options.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
17	[BUG]  [BUGGY]  tokens.clear();  eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  eatTheRest  =  false;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  eatTheRest  =  false;	  tokens.clear();    eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
18	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  true;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  currentOption  =  true;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  true;	  tokens.clear();    eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
19	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  false;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  currentOption  =  false;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  false;	  tokens.clear();    eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
20	[BUG]  [BUGGY]  tokens.remove(currentOption.getName());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.remove(currentOption.getName());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.remove(currentOption.getName());	  tokens.remove(currentOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
21	[BUG]  [BUGGY]  tokens.add(currentOption  +  0xFFFF);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption  +  0xFFFF);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption  +  0xFFFF);	  tokens.add(currentOption    &    0xFFFF);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
22	[BUG]  [BUGGY]  tokens.add(currentOption  -  0xFFFF);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption  -  0xFFFF);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption  -  0xFFFF);	  tokens.add(currentOption    &    0xFFFF);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
23	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.add(currentOption);    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
24	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.remove(currentOption);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.remove(currentOption);  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.remove(currentOption);  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.add(currentOption);    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
25	[BUG]  [BUGGY]  tokens.add(0,  currentOption);  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(0,  currentOption);  currentOption  =  new  ArrayList();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(0,  currentOption);  currentOption  =  new  ArrayList();	  tokens.add(currentOption);    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
26	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!tokens.isEmpty())  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!tokens.isEmpty())  {  tokens.clear();  currentOption  =  null;  }	  if(!tokens.isEmpty())    {    options.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
27	[BUG]  [BUGGY]  tokens.add(new  PosixParser(this,  currentOption));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(new  PosixParser(this,  currentOption));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(new  PosixParser(this,  currentOption));	  tokens.add(new    PosixParser(this));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
28	[BUG]  [BUGGY]  tokens.add(new  PosixParser(currentOption));  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(new  PosixParser(currentOption));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(new  PosixParser(currentOption));	  tokens.add(new    PosixParser(this));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
29	[BUG]  [BUGGY]  tokens.add(new  PosixParser(this,  eatTheRest));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(new  PosixParser(this,  eatTheRest));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(new  PosixParser(this,  eatTheRest));	  tokens.add(new    PosixParser(this));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
30	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||  currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||  currentOption!=  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
31	[BUG]  [BUGGY]  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||  currentOption  ==  null)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||  currentOption  ==  null)  {  eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
32	[BUG]  [BUGGY]  tokens.add(0,  currentOption  -  1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(0,  currentOption  -  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(0,  currentOption  -  1);	  tokens.add(0,    currentOption);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
33	[BUG]  [BUGGY]  tokens.add(0,  currentOption  +  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(0,  currentOption  +  1);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(0,  currentOption  +  1);	  tokens.add(0,    currentOption);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
34	[BUG]  [BUGGY]  tokens.add(0,  currentOption  =  null);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(0,  currentOption  =  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(0,  currentOption  =  null);	  tokens.add(0,    currentOption);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
35	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add( "-- ");  currentOption  =  new  Option();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "-- ");  currentOption  =  new  Option();	  tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
36	[BUG]  [BUGGY]  tokens.remove( "-- ");  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.remove( "-- ");  currentOption  =  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.remove( "-- ");  currentOption  =  null;	  tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
37	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add( "null ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "null ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
38	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add( "- ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "- ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
39	[BUG]  [BUGGY]  tokens.add( "   ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add( "   ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "   ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
40	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  options);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  new  Option(this,  options);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
41	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  eatTheRest);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  currentOption  =  new  Option(this,  eatTheRest);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  new  Option(this,  eatTheRest);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
42	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option(tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  currentOption  =  new  Option(tokens);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  new  Option(tokens);	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
43	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  currentOption  =  new  Option();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  new  Option();	  tokens.add(currentOption);    currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
44	[BUG]  [BUGGY]  tokens.remove(currentOption);  currentOption  =  new  Option();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.remove(currentOption);  currentOption  =  new  Option();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.remove(currentOption);  currentOption  =  new  Option();	  tokens.add(currentOption);    currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
45	[BUG]  [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!tokens.isEmpty())  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
46	[BUG]  [BUGGY]  if(!tokens.contains( "- "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!tokens.contains( "- "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!tokens.contains( "- "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
47	[BUG]  [BUGGY]  if(!tokens.contains( "n "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!tokens.contains( "n "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!tokens.contains( "n "))  {  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
48	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
49	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
50	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  options.clear();  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  options.clear();  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
51	[BUG]  [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
52	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
53	[BUG]  [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
54	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
55	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  tokens.clear();  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
56	[BUG]  [BUGGY]  tokens  =  new  LinkedList  <  Option>();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens  =  new  LinkedList  <  Option>();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens  =  new  LinkedList  <  Option>();	  tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
57	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens  =  new  ArrayList  <  Option>(tokens.size());	  tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
58	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(options.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens  =  new  ArrayList  <  Option>(options.size());	  tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
59	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
60	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  LinkedList();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  currentOption  =  new  LinkedList();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  new  LinkedList();	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
62	[BUG]  [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption  ==  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
63	[BUG]  [BUGGY]  options.add(tokens);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  options.add(tokens);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	options.add(tokens);	  options.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
64	[BUG]  [BUGGY]  options.add(currentOption.cloneTree());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  options.add(currentOption.cloneTree());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	options.add(currentOption.cloneTree());	  options.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
65	[BUG]  [BUGGY]  tokens.add(currentOption.toArray());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.toArray());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.toArray());	  tokens.add(currentOption.options);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
66	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
67	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.remove();  currentOption  =  null;  }	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
68	[BUG]  [BUGGY]  tokens.add(currentOption,  false);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption,  false);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption,  false);	  tokens.add(currentOption,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
69	[BUG]  [BUGGY]  tokens.add(currentOption,  null);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption,  null);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption,  null);	  tokens.add(currentOption,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
70	[BUG]  [BUGGY]  tokens.add(currentOption,  true);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption,  true);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption,  true);	  tokens.add(currentOption,    eatTheRest);    	non-compiled	[CE]  <identifier>  expected	23	None	replace
71	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
72	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
73	[BUG]  [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
74	[BUG]  [BUGGY]  options  =  Lists.newArrayList();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  options  =  Lists.newArrayList();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	options  =  Lists.newArrayList();	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    else    {    options    =    Lists.newArrayList();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
75	[BUG]  [BUGGY]  ||(eatTheRest  ==  false  &&  currentOption!=  null));  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||(eatTheRest  ==  false  &&  currentOption!=  null));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||(eatTheRest  ==  false  &&  currentOption!=  null));	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
76	[BUG]  [BUGGY]  tokens.remove( "-- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.remove( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.remove( "-- ");	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
77	[BUG]  [BUGGY]  tokens.add( "-- ",  currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add( "-- ",  currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "-- ",  currentOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
78	[BUG]  [BUGGY]  tokens.add( "-- "  +  currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add( "-- "  +  currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "-- "  +  currentOption);	  tokens.add(   "--   ");    	non-compiled	[CE]  <identifier>  expected	39	None	replace
79	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.remove(0);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  tokens.remove(0);  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.remove(0);  currentOption  =  null;  }	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	25	None	replace
80	[BUG]  [BUGGY]  tokens.add(currentOption.getOwner());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.getOwner());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.getOwner());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
81	[BUG]  [BUGGY]  ||  currentOption!=  null)  {  this.eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||  currentOption!=  null)  {  this.eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||  currentOption!=  null)  {  this.eatTheRest  =  true;  }	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
82	[BUG]  [BUGGY]  this.eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  this.eatTheRest  =  true;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	this.eatTheRest  =  true;	  if(eatTheRest!=    null)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
83	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(tokens);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens  =  new  ArrayList  <  Option>(tokens);	  tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
84	[BUG]  [BUGGY]  luate(tokens,  eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  luate(tokens,  eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	luate(tokens,  eatTheRest)  {  tokens.clear();  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
85	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  if(currentOption  ==  null)  {  eatTheRest  =  true;  tokens.clear();  }	  if(currentOption    ==    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
86	[BUG]  [BUGGY]  tokens.clear();  currentOption  =  new  java.util.ArrayList();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.clear();  currentOption  =  new  java.util.ArrayList();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.clear();  currentOption  =  new  java.util.ArrayList();	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
87	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
88	[BUG]  [BUGGY]  tokens.add(new  PosixParser(this),  currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(new  PosixParser(this),  currentOption);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(new  PosixParser(this),  currentOption);	  tokens.add(new    PosixParser(this));    	non-compiled	[CE]  <identifier>  expected	21	None	replace
89	[BUG]  [BUGGY]  ||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||!eatTheRest)  {  throw  new  IllegalArgumentException( " ");  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
90	[BUG]  [BUGGY]  ||!eatTheRest)  {  currentOption  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||!eatTheRest)  {  currentOption  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||!eatTheRest)  {  currentOption  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
91	[BUG]  [BUGGY]  tokens.addAll(currentOption.options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.addAll(currentOption.options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.addAll(currentOption.options);	  tokens.add(currentOption.options);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
92	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(tokens!=  null)  {  if(!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(tokens!=  null)  {  if(!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }	  if(!tokens.isEmpty())    {    options.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
93	[BUG]  [BUGGY]  if(tokens!=  null)  {!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(tokens!=  null)  {!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(tokens!=  null)  {!tokens.isEmpty())  {  options.clear();  currentOption  =  null;  }	  if(!tokens.isEmpty())    {    options.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	1	None	replace
94	[BUG]  [BUGGY]  tokens.add(currentOption  &  0xFFF);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption  &  0xFFF);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption  &  0xFFF);	  tokens.add(currentOption    &    0xFFFF);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
95	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
96	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.clear();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  tokens.clear();  }	  if(tokens!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	40	None	replace
97	[BUG]  [BUGGY]  if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  currentOption  =  null;  tokens.clear();  }	  if(currentOption    ==    null)    {    eatTheRest    =    false;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	10	None	replace
98	[BUG]  [BUGGY]  tokens.remove(currentOption  -  1);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.remove(currentOption  -  1);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.remove(currentOption  -  1);	  tokens.remove(currentOption);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
99	[BUG]  [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  eatTheRest  =  false;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
100	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
101	[BUG]  [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  if(currentOption!=  null)  {  eatTheRest  =  true;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
102	[BUG]  [BUGGY]  if(tokens!=  null)  {  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(tokens!=  null)  {  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(tokens!=  null)  {  if(!eatTheRest)  {  options.clear();  currentOption  =  null;  }	  if(!eatTheRest)    {    options.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
103	[BUG]  [BUGGY]  if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!currentOption)  {  eatTheRest  =  true;  tokens.clear();  }	  if(!eatTheRest)    {    eatTheRest    =    true;    tokens.clear();    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
104	[BUG]  [BUGGY]  luate(options,  tokens));  currentOption  =  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  luate(options,  tokens));  currentOption  =  null;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	luate(options,  tokens));  currentOption  =  null;	  if(eatTheRest)    {    options.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	41	None	replace
105	[BUG]  [BUGGY]  tokens.add( "none ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add( "none ");  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "none ");	  tokens.add(   "n   ");    	non-compiled	[CE]  <identifier>  expected	37	None	replace
106	[BUG]  [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(currentOption!=  null)  {  tokens.clear();  eatTheRest  =  true;  }	  tokens.clear();    eatTheRest    =    true;    	non-compiled	[CE]  <identifier>  expected	22	None	replace
107	[BUG]  [BUGGY]  if(!eatTheRest)  {  currentOption  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  currentOption  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  currentOption  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
108	[BUG]  [BUGGY]  ||(eatTheRest  ==  false))  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||(eatTheRest  ==  false))  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||(eatTheRest  ==  false))  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
109	[BUG]  [BUGGY]  ||(eatTheRest  ==  false)&&  currentOption!=  null)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  ||(eatTheRest  ==  false)&&  currentOption!=  null)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	||(eatTheRest  ==  false)&&  currentOption!=  null)  {  eatTheRest  =  true;  }	  if(eatTheRest    ==    false)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
110	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.add(option);  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    else    {    options.add(option);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
111	[BUG]  [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.remove(option);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.remove(option);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options.remove(option);  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    else    {    options.add(option);    }    	non-compiled	[CE]  <identifier>  expected	33	None	replace
112	[BUG]  [BUGGY]  tokens.add(currentOption);  currentOption  =  new  java.util.ArrayList();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption);  currentOption  =  new  java.util.ArrayList();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption);  currentOption  =  new  java.util.ArrayList();	  tokens.add(currentOption);    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
113	[BUG]  [BUGGY]  if(!eatTheRest)  {  currentOption  =  true;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  currentOption  =  true;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  currentOption  =  true;  }  else  {  tokens.add(currentOption);  currentOption  =  null;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    else    {    tokens.add(currentOption);    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	29	None	replace
114	[BUG]  [BUGGY]  tokens  =  new  ArrayList  <  Option>(size());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens  =  new  ArrayList  <  Option>(size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens  =  new  ArrayList  <  Option>(size());	  tokens    =    new    ArrayList    <    Option>();    	non-compiled	[CE]  <identifier>  expected	31	None	replace
115	[BUG]  [BUGGY]  tokens.add(0,  currentOption  &  0xFFFF);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(0,  currentOption  &  0xFFFF);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(0,  currentOption  &  0xFFFF);	  tokens.add(0,    currentOption);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
116	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
117	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  Option(this);  }  else  {  options.addAll(options);  }	  tokens.clear();    currentOption    =    new    Option(this);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
118	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
119	[BUG]  [BUGGY]  currentOption  =  new  ArrayList();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  currentOption  =  new  ArrayList();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	currentOption  =  new  ArrayList();	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
120	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  new  ArrayList();  }  else  {  options.add(options);  }	  tokens.clear();    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
121	[BUG]  [BUGGY]  while(!eatTheRest)  {  eatTheRest  =  false;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  while(!eatTheRest)  {  eatTheRest  =  false;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	while(!eatTheRest)  {  eatTheRest  =  false;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
122	[BUG]  [BUGGY]  while(!eatTheRest)  {  eatTheRest  =  true;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  while(!eatTheRest)  {  eatTheRest  =  true;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	while(!eatTheRest)  {  eatTheRest  =  true;  }	  if(!eatTheRest)    {    eatTheRest    =    true;    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
123	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
124	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  true;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	28	None	replace
125	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.add( "n ");  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  tokens.add( "n ");  currentOption  =  null;  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  tokens.add( "n ");  currentOption  =  null;  }	  if(eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
126	[BUG]  [BUGGY]  tokens.add(currentOption.getImmediateParentPointer());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.getImmediateParentPointer());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.getImmediateParentPointer());	  tokens.add(currentOption.getValue());    	non-compiled	[CE]  <identifier>  expected	13	None	replace
127	[BUG]  [BUGGY]  this.eatTheRest  =  false;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  this.eatTheRest  =  false;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	this.eatTheRest  =  false;	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
128	[BUG]  [BUGGY]  eatTheRest  =  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  eatTheRest  =  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	eatTheRest  =  null;	  eatTheRest    =    false;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
129	[BUG]  [BUGGY]  currentOption  =  new  Option(tokens.size());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  currentOption  =  new  Option(tokens.size());  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	currentOption  =  new  Option(tokens.size());	  currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
130	[BUG]  [BUGGY]  tokens.add(currentOption);  currentOption  =  new  Option(0);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption);  currentOption  =  new  Option(0);  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption);  currentOption  =  new  Option(0);	  tokens.add(currentOption);    currentOption    =    new    Option();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
131	[BUG]  [BUGGY]  options.add(new  Option(tokens));  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  options.add(new  Option(tokens));  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	options.add(new  Option(tokens));	  options.add(currentOption);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
132	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  eatTheRest  =  true;  }  else  {  tokens.clear();  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    true;    }    else    {    tokens.clear();    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
133	[BUG]  [BUGGY]  tokens.add(currentOption);  currentOption  =  new  LinkedList();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption);  currentOption  =  new  LinkedList();  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption);  currentOption  =  new  LinkedList();	  tokens.add(currentOption);    currentOption    =    new    ArrayList();    	non-compiled	[CE]  <identifier>  expected	18	None	replace
134	[BUG]  [BUGGY]  tokens.add( "-- ");  currentOption  =  eatTheRest;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add( "-- ");  currentOption  =  eatTheRest;  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add( "-- ");  currentOption  =  eatTheRest;	  tokens.add(   "--   ");    currentOption    =    null;    	non-compiled	[CE]  <identifier>  expected	34	None	replace
135	[BUG]  [BUGGY]  tokens.add(currentOption.getTree());  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  tokens.add(currentOption.getTree());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	tokens.add(currentOption.getTree());	  tokens.add(currentOption.cloneTree());    	non-compiled	[CE]  <identifier>  expected	12	None	replace
136	[BUG]  [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
137	[BUG]  [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(!eatTheRest)  {  eatTheRest  =  false;  tokens.clear();  }  else  {  currentOption  =  null;  }	  if(currentOption!=    null)    {    eatTheRest    =    false;    tokens.clear();    }    else    {    currentOption    =    null;    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
138	[BUG]  [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options  =  Lists.newArrayList();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  void  init()  {  eatTheRest  =  false;  tokens.clear();  currentOption  =  null;      [BUGGY]  if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options  =  Lists.newArrayList();  }  [BUGGY]        [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	57	57	1	replace	if(eatTheRest)  {  tokens.clear();  currentOption  =  null;  }  else  {  options  =  Lists.newArrayList();  }	  if(!eatTheRest)    {    tokens.clear();    currentOption    =    null;    }    else    {    options    =    Lists.newArrayList();    }    	non-compiled	[CE]  <identifier>  expected	26	None	replace
