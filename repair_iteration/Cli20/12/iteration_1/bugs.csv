bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);		non-compiled	[CE]  <identifier>  expected	24	None	add
2	[BUG]  [BUGGY]    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }		non-compiled	[CE]  <identifier>  expected	24	None	add
3	[BUG]  [BUGGY]    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.length()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }		non-compiled	[CE]  <identifier>  expected	24	None	add
4	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }		non-compiled	[CE]  <identifier>  expected	24	None	add
5	[BUG]  [BUGGY]    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    if(stopAtNonOption)  {  if(currentOption.hasArg()  &&  currentOption.size()!=  (i  +  1))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }		non-compiled	[CE]  <identifier>  expected	24	None	add
6	[BUG]  [BUGGY]  if(currentOption.hasArg()  ||  (token.length()!=  (i  +  1)))  {  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]  if(currentOption.hasArg()  ||  (token.length()!=  (i  +  1)))  {  [BUGGY]  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	if(currentOption.hasArg()  ||  (token.length()!=  (i  +  1)))  {	if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  	non-compiled	[CE]  <identifier>  expected	23	None	replace
7	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  break;  }		non-compiled	[CE]  <identifier>  expected	24	None	add
8	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }		non-compiled	[CE]  <identifier>  expected	24	None	add
9	[BUG]  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  throw  new  IllegalArgumentException( " ");  }		non-compiled	[CE]  <identifier>  expected	24	None	add
10	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add( "- "  +  ch);  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    tokens.add( "- "  +  ch);		non-compiled	[CE]  <identifier>  expected	24	None	add
11	[BUG]  [BUGGY]    tokens.add( "- ");  currentOption  =  options.getOption(ch);  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]    tokens.add( "- ");  currentOption  =  options.getOption(ch);  [BUGGY]  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))    {  {  tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	278	279	1	replace	    tokens.add( "- ");  currentOption  =  options.getOption(ch);		non-compiled	[CE]  <identifier>  expected	24	None	add
