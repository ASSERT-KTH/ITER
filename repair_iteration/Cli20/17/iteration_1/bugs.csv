bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    tokens.clear();  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]    tokens.clear();  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	    tokens.clear();		non-compiled	[CE]  <identifier>  expected	36	None	add
2	[BUG]  [BUGGY]    tokens.clear();  currentOption  =  null;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]    tokens.clear();  currentOption  =  null;  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	    tokens.clear();  currentOption  =  null;		non-compiled	[CE]  <identifier>  expected	36	None	add
3	[BUG]  [BUGGY]    if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]    if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	    if(currentOption!=  null)  {  tokens.clear();  currentOption  =  null;  }		non-compiled	[CE]  <identifier>  expected	36	None	add
4	[BUG]  [BUGGY]    if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]    if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	    if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  }		non-compiled	[CE]  <identifier>  expected	36	None	add
5	[BUG]  [BUGGY]    if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]    if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	    if(currentOption!=  null)  {  tokens  =  new  ArrayList  <  Option>();  currentOption  =  null;  }		non-compiled	[CE]  <identifier>  expected	36	None	add
6	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]  tokens.add( "n ");  [BUGGY]  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	tokens.add( "n ");	tokens.clear();  	non-compiled	[CE]  <identifier>  expected	35	None	replace
7	[BUG]  [BUGGY]  tokens.add(new  Option( "Position "));  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]  tokens.add(new  Option( "Position "));  [BUGGY]  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	tokens.add(new  Option( "Position "));	tokens.clear();  	non-compiled	[CE]  <identifier>  expected	35	None	replace
8	[BUG]  [BUGGY]  tokens.remove( "n ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]  tokens.remove( "n ");  [BUGGY]  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	tokens.remove( "n ");	tokens.clear();  	non-compiled	[CE]  <identifier>  expected	35	None	replace
9	[BUG]  [BUGGY]  tokens.add( "-- ");  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]  tokens.add( "-- ");  [BUGGY]  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	tokens.add( "-- ");	tokens.clear();  	non-compiled	[CE]  <identifier>  expected	35	None	replace
10	[BUG]  [BUGGY]  tokens.add( "u00 ");  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]  tokens.add( "u00 ");  [BUGGY]  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	tokens.add( "u00 ");	tokens.clear();  	non-compiled	[CE]  <identifier>  expected	35	None	replace
11	[BUG]  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [CE]  <identifier>  expected  [FE]    AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	    TokenBuffer  tokens  =  new  TokenBuffer(tokens.size());		non-compiled	[CE]  <identifier>  expected	36	None	add
12	[BUG]  [BUGGY]    eatTheRest  =  true;  [CE]  <identifier>  expected  [FE]      AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]    eatTheRest  =  true;  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	    eatTheRest  =  true;		non-compiled	[CE]  <identifier>  expected	36	None	add
13	[BUG]  [BUGGY]    tokens  =  new  ArrayList  <  Option>();  [CE]  <identifier>  expected  [FE]        AssertionFailedError  [CONTEXT]  private  void  init()  {  eatTheRest  =  false;  [BUGGY]    tokens  =  new  ArrayList  <  Option>();  [BUGGY]  tokens.clear();  currentOption  =  null;  }  [CLASS]  PosixParser  [METHOD]  init  [RETURN_TYPE]  void  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	55	55	1	replace	    tokens  =  new  ArrayList  <  Option>();		non-compiled	[CE]  <identifier>  expected	36	None	add
