bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  arguments.iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  arguments.iterator();	      tokens.add(token);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
2	[BUG]  [BUGGY]  tokens.add(id);  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(id);  currentOption  =  options.iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(id);  currentOption  =  options.iterator();	      tokens.add(token);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
3	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add( "- ");  currentOption  =  options.iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.iterator();	      tokens.add(token);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
4	[BUG]  [BUGGY]  tokens.add(arguments[0]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(arguments[0]);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add( "n ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add( "n ");	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  tokens.add(iter);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(iter);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(iter);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  iter.remove();  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  else  if(stopAtNonOption)  {  iter.remove();  tokens.add(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	else  if(stopAtNonOption)  {  iter.remove();  tokens.add(token);  }	      iter.remove();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
8	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  }  );  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  }  );  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  token  }  );	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	14	None	replace
9	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  options);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  options);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  options);	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	14	None	replace
10	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[0]);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[0]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[0]);  }	  return(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
11	[BUG]  [BUGGY]  return(String[])options.toArray(arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])options.toArray(arguments);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])options.toArray(arguments);	  return(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
12	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])options.toArray(new  String[1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])options.toArray(new  String[1]);	  return(String[])options.toArray(new    String[0]);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
13	[BUG]  [BUGGY]  return(String[])iter.clone();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])iter.clone();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])iter.clone();	  return(String[])iter.next();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
14	[BUG]  [BUGGY]  return(String[])iter.nextToken();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])iter.nextToken();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])iter.nextToken();	  return(String[])iter.next();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  return(String[])iter.remove();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])iter.remove();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])iter.remove();	  return(String[])iter.next();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
16	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[args.size()  -  1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])options.toArray(new  String[args.size()  -  1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])options.toArray(new  String[args.size()  -  1]);	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
17	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[args.size()  +  1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])options.toArray(new  String[args.size()  +  1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])options.toArray(new  String[args.size()  +  1]);	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  return(String[])args.toArray(new  String[args.size()  ]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])args.toArray(new  String[args.size()  ]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])args.toArray(new  String[args.size()  ]);	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(token,  stopAtNonOption);	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
20	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(arguments[0]);	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(token);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(token);	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
22	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments.length);	      tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
23	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  arguments.length;	      tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
24	[BUG]  [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add( "- ");  currentOption  =  options.getOption(stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add( "- ");  currentOption  =  options.getOption(stopAtNonOption);	      tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
25	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  +  1]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  +  1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  +  1]);	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  +  1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  +  1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  +  1]);	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  arguments);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {  },  arguments);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	13	None	replace
28	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  -  1]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  -  1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[tokens.size()  -  1]);	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	11	None	replace
29	[BUG]  [BUGGY]  return(tokens!=  null)?  false  :  tokens.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens!=  null)?  false  :  tokens.toArray(new  String[tokens.size()  ]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens!=  null)?  false  :  tokens.toArray(new  String[tokens.size()  ]);	  return(tokens    ==    null)?    true    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
30	[BUG]  [BUGGY]  return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  +  1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  +  1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  +  1]);	  return(tokens    ==    null)?    true    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
31	[BUG]  [BUGGY]  iter.add(arguments[0]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  iter.add(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	iter.add(arguments[0]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
32	[BUG]  [BUGGY]  iter.add(arguments[0].toString());  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  iter.add(arguments[0].toString());  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	iter.add(arguments[0].toString());	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
33	[BUG]  [BUGGY]  return  options.keySet().iterator().next();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return  options.keySet().iterator().next();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return  options.keySet().iterator().next();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
34	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options;	      tokens.add(token);    currentOption    =    iter;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
35	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  option;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  option;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  option;	      tokens.add(token);    currentOption    =    iter;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
36	[BUG]  [BUGGY]  tokens.add(iter);  currentOption  =  iter;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(iter);  currentOption  =  iter;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(iter);  currentOption  =  iter;	      tokens.add(token);    currentOption    =    iter;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
37	[BUG]  [BUGGY]  iter.remove();  tokens.add(arguments[1]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  iter.remove();  tokens.add(arguments[1]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	iter.remove();  tokens.add(arguments[1]);	      iter.remove();    tokens.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
38	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[options.size()  ]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])options.toArray(new  String[options.size()  ]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])options.toArray(new  String[options.size()  ]);	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
39	[BUG]  [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[args.size()  ]);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  if(options!=  null)  {  return(String[])options.toArray(new  String[args.size()  ]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	if(options!=  null)  {  return(String[])options.toArray(new  String[args.size()  ]);  }	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
40	[BUG]  [BUGGY]  return(tokens!=  null)?  true  :  tokens.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens!=  null)?  true  :  tokens.toArray(new  String[tokens.size()  ]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens!=  null)?  true  :  tokens.toArray(new  String[tokens.size()  ]);	  return(tokens    ==    null)?    true    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	18	None	replace
41	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.getOption(stopAtNonOption);	      tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
42	[BUG]  [BUGGY]  tokens.add(arguments);  currentOption  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(arguments);  currentOption  =  options.getOption(stopAtNonOption);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(arguments);  currentOption  =  options.getOption(stopAtNonOption);	      tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
43	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption,  arguments);	      tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
44	[BUG]  [BUGGY]  return  options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return  options.toArray(new  String[tokens.size()  ]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return  options.toArray(new  String[tokens.size()  ]);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
45	[BUG]  [BUGGY]  return  options.toArray(new  Option[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return  options.toArray(new  Option[tokens.size()  ]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return  options.toArray(new  Option[tokens.size()  ]);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
46	[BUG]  [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   " ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   " ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens  ==  null)?  null  :  tokens.toArray(new  String[]  {   " ");	  return(tokens    ==    null)?    null    :    tokens.toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	13	None	replace
47	[BUG]  [BUGGY]  if(tokens!=  null)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  if(tokens!=  null)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	if(tokens!=  null)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
48	[BUG]  [BUGGY]  iter.remove(arguments[0]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  iter.remove(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	iter.remove(arguments[0]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
49	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.iterator();	      tokens.add(token);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
50	[BUG]  [BUGGY]  tokens.add(arguments[0].iterator());  currentOption  =  options.iterator();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0].iterator());  currentOption  =  options.iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(arguments[0].iterator());  currentOption  =  options.iterator();	      tokens.add(token);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
51	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.values().iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options.values().iterator();	      tokens.add(token);    currentOption    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
52	[BUG]  [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {   " ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {   " ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {   " ");	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	14	None	replace
53	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  Iterator  <  String>  iter  =  options.iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	Iterator  <  String>  iter  =  options.iterator();	      iter.remove();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
54	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  null;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  null;	      tokens.add(token);    currentOption    =    iter;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
56	[BUG]  [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(arguments[1]);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(arguments[0]);  currentOption  =  options.getOption(arguments[1]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(arguments[0]);  currentOption  =  options.getOption(arguments[1]);	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
57	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(currentOption);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(currentOption);	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
58	[BUG]  [BUGGY]  return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  -  1]);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  -  1]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens  ==  null)?  false  :  tokens.toArray(new  String[tokens.size()  -  1]);	  return(tokens    ==    null)?    false    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	17	None	replace
59	[BUG]  [BUGGY]  iter.clear();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  iter.clear();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	iter.clear();	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
60	[BUG]  [BUGGY]  iter.write(arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  iter.write(arguments[0]);  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	iter.write(arguments[0]);	      iter.remove();    	non-compiled	[CE]  <identifier>  expected	7	None	replace
61	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	else  if(stopAtNonOption)  {  tokens.add(token);  currentOption  =  options.getOption(token);  }	      tokens.add(token);    currentOption    =    options.getOption(token);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
62	[BUG]  [BUGGY]  Iterator  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  Iterator  iter  =  options.iterator();  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	Iterator  iter  =  options.iterator();	      iter.remove();    tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	15	None	replace
63	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  0;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  0;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)&&  arguments.length  >  0;	      tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
64	[BUG]  [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  1;  [BUGGY]    }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add(token);  currentOption  =  options.getOption(stopAtNonOption)+  1;	      tokens.add(token);    currentOption    =    options.getOption(stopAtNonOption);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
65	[BUG]  [BUGGY]  tokens.add( "- ");  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  tokens.add( "- ");  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	tokens.add( "- ");	  tokens.add(token);    	non-compiled	[CE]  <identifier>  expected	1	None	replace
66	[BUG]  [BUGGY]  if(tokens  ==  null)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  if(tokens  ==  null)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	if(tokens  ==  null)  {  return(tokens!=  null)?  null  :  tokens.toArray(new  String[tokens.size()  ]);  }	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[tokens.size()    ]);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
67	[BUG]  [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {  token  }  );  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {  token  }  );  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(tokens!=  null)?  null  :  tokens.toArray(new  String[]  {  token  }  );	  return(tokens!=    null)?    null    :    tokens.toArray(new    String[]    {    }    );    	non-compiled	[CE]  <identifier>  expected	14	None	replace
68	[BUG]  [BUGGY]  return  options.toArray(arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return  options.toArray(arguments);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return  options.toArray(arguments);	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
69	[BUG]  [BUGGY]  return  iter.next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return  iter.next();  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return  iter.next();	      	non-compiled	[CE]  <identifier>  expected	5	None	replace
70	[BUG]  [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  gobble(iter);    [BUGGY]  return(String[])options.toArray(new  String[tokens.size()  ]);  [BUGGY]      [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	156	156	1	replace	return(String[])options.toArray(new  String[tokens.size()  ]);	  return(String[])options.toArray(new    String[args.size()    ]);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
