bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()  -  1));  [CE]  [FE]    AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()  -  1));  [BUGGY]  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(token.indexOf('=')+  1,  token.length()  -  1));	tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  	non-compiled	[CE]  	3	None	replace
2	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [CE]  [FE]      AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));  [BUGGY]  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()));	tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  	non-compiled	[CE]  	3	None	replace
3	[BUG]  [BUGGY]  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()  +  1));  [CE]  [FE]        AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')+  1,  token.length()  +  1));  [BUGGY]  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(token.indexOf('=')+  1,  token.length()  +  1));	tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  	non-compiled	[CE]  	3	None	replace
4	[BUG]  [BUGGY]    [CE]  [FE]          AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    [BUGGY]  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	  	tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  	non-compiled	[CE]  	3	None	replace
5	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  [CE]  [FE]    AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	    tokens.add(token.substring(0,  token.indexOf('=')));		non-compiled	[CE]  	4	None	add
6	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')+  1));  [CE]  [FE]      AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('=')+  1));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	    tokens.add(token.substring(0,  token.indexOf('=')+  1));		non-compiled	[CE]  	4	None	add
7	[BUG]  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [CE]  [FE]    AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	    tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()));		non-compiled	[CE]  	4	None	add
8	[BUG]  [BUGGY]    tokens.add(token.substring(-1,  token.indexOf('=')));  [CE]  [FE]      AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(-1,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	    tokens.add(token.substring(-1,  token.indexOf('=')));		non-compiled	[CE]  	4	None	add
9	[BUG]  [BUGGY]  tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()));  [BUGGY]  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()));	tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  	non-compiled	[CE]  ')'  expected	3	None	replace
10	[BUG]  [BUGGY]    tokens.add(token.substring(1,  token.indexOf('=')));  [CE]  ';'  expected  [FE]    AssertionFailedError  [CONTEXT]  if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(1,  token.indexOf('=')));  [BUGGY]  tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	    tokens.add(token.substring(1,  token.indexOf('=')));		non-compiled	[CE]  ';'  expected	4	None	add
