bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')+  1));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(1,  token.indexOf('=')+  1));	      tokens.add(token.substring(1,    token.indexOf('=')));    	non-compiled	[CE]  ';'  expected	10	None	replace
2	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.length()  -  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.length()  -  1));	      tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ';'  expected	5	None	replace
3	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length()));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.length()));	      tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	5	None	replace
4	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	2	None	replace
5	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  1));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	2	None	replace
6	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  2));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  2));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  +  2));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	2	None	replace
7	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()),  stopAtNonOption);	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	2	None	replace
8	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1).length());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1).length());  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1).length());	      tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  ')'  expected	6	None	replace
9	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')+  1,  token.length()  -  1));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')+  1,  token.length()  -  1));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(1,  token.indexOf('=')+  1,  token.length()  -  1));	  tokens.add(token.substring(-1,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	9	None	replace
10	[BUG]  [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(1,  token.indexOf('=')+  1,  token.length()));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(1,  token.indexOf('=')+  1,  token.length()));	  tokens.add(token.substring(-1,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	9	None	replace
11	[BUG]  [BUGGY]  tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()  -  1));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()  -  1));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(-1,  token.indexOf('=')+  1,  token.length()  -  1));	  tokens.add(token.substring(-1,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	9	None	replace
12	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')),  token.length()));	      tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	7	None	replace
13	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length()  -  1));	      tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	7	None	replace
14	[BUG]  [BUGGY]  tokens.add(token.substring(token.indexOf('=')+  1,  token.lastIndexOf('.')));  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(token.indexOf('=')+  1,  token.lastIndexOf('.')));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(token.indexOf('=')+  1,  token.lastIndexOf('.')));	  tokens.add(token.substring(token.indexOf('=')+    1,    token.length()    -    1));    	non-compiled	[CE]  ')'  expected	1	None	replace
15	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.lastIndexOf('=')));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.lastIndexOf('=')));	      	non-compiled	[CE]  ')'  expected	4	None	replace
16	[BUG]  [BUGGY]  tokens.add(token);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token);  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token);	      	non-compiled	[CE]  ')'  expected	4	None	replace
17	[BUG]  [BUGGY]  tokens.add(token.substring(2,  token.indexOf('=')));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(2,  token.indexOf('=')));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(2,  token.indexOf('=')));	      tokens.add(token.substring(-1,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	8	None	replace
18	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf(':')));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf(':')));	      	non-compiled	[CE]  ')'  expected	4	None	replace
19	[BUG]  [BUGGY]  tokens.add(token.substring(startAtNonOption.indexOf('=')+  1,  token.length()));  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(startAtNonOption.indexOf('=')+  1,  token.length()));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(startAtNonOption.indexOf('=')+  1,  token.length()));	  tokens.add(token.substring(token.indexOf('=')+    1,    token.length()    +    1));    	non-compiled	[CE]  ')'  expected	3	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length()));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length()));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  -  1,  token.length()));	      tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ';'  expected	7	None	replace
21	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.length())));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.length())));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.length())));	      tokens.add(token.substring(0,    token.indexOf('=')));    	non-compiled	[CE]  ';'  expected	5	None	replace
22	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')-  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')-  1));	      tokens.add(token.substring(0,    token.indexOf('=')+    1));    	non-compiled	[CE]  ')'  expected	6	None	replace
23	[BUG]  [BUGGY]  tokens.add(token.substring(-1,  token.indexOf('=')+  1));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(-1,  token.indexOf('=')+  1));  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(-1,  token.indexOf('=')+  1));	      tokens.add(token.substring(-1,    token.indexOf('=')));    	non-compiled	[CE]  ')'  expected	8	None	replace
24	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  2));  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  2));  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('=')+  1,  token.length()  -  2));	  tokens.add(token.substring(0,    token.indexOf('=')+    1,    token.length()));    	non-compiled	[CE]  ')'  expected	2	None	replace
25	[BUG]  [BUGGY]  tokens.add(token.substring(token.indexOf('=')+  1,  token.length());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(token.indexOf('=')+  1,  token.length());  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(token.indexOf('=')+  1,  token.length());	  tokens.add(token.substring(token.indexOf('=')+    1,    token.length()    +    1));    	non-compiled	[CE]  ')'  expected	3	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]    }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }	      	non-compiled	[CE]  ')'  expected	4	None	replace
27	[BUG]  [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (token.indexOf('=')  !=  -1)  {  tokens.add(token.substring(0,  token.indexOf('=')));    [BUGGY]  tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());  [BUGGY]    tokens.add(token.substring(token.indexOf('=')  +  1,  token.length()));  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	tokens.add(token.substring(0,  token.indexOf('='))  +  1,  token.length());	      tokens.add(token.substring(0,    token.indexOf('='))    +    1,    token.length()));    	non-compiled	[CE]  ')'  expected	7	None	replace
