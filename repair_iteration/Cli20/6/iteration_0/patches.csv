bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  acceptToken(token,  stopAtNonOption);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]  acceptToken(token,  stopAtNonOption);  [BUGGY]  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	acceptToken(token,  stopAtNonOption);	burstToken(token,  stopAtNonOption);  	non-compiled	[CE]  	11	None	replace
2	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]  burstToken(token,  stopAtNonOption,  arguments);  [BUGGY]  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	burstToken(token,  stopAtNonOption,  arguments);	burstToken(token,  stopAtNonOption);  	non-compiled	[CE]  	11	None	replace
3	[BUG]  [BUGGY]  process(token,  stopAtNonOption);  [CE]  [FE]        AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]  process(token,  stopAtNonOption);  [BUGGY]  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	process(token,  stopAtNonOption);	burstToken(token,  stopAtNonOption);  	non-compiled	[CE]  	11	None	replace
4	[BUG]  [BUGGY]  accept(token,  stopAtNonOption);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]  accept(token,  stopAtNonOption);  [BUGGY]  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	accept(token,  stopAtNonOption);	burstToken(token,  stopAtNonOption);  	non-compiled	[CE]  	11	None	replace
5	[BUG]  [BUGGY]    [CE]  [FE]            AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    [BUGGY]  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	  	burstToken(token,  stopAtNonOption);  	non-compiled	[CE]  	11	None	replace
6	[BUG]  [BUGGY]    tokens.add(token);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    tokens.add(token);  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    tokens.add(token);		non-compiled	[CE]  	12	None	add
7	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    Option  currentOption  =  options.getOption(token);  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    Option  currentOption  =  options.getOption(token);		non-compiled	[CE]  	12	None	add
8	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    Iterator  <  String>  iter  =  options.iterator();  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    Iterator  <  String>  iter  =  options.iterator();		non-compiled	[CE]  	12	None	add
9	[BUG]  [BUGGY]    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [CE]  [FE]          AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    Option  currentOption  =  options.getOption(token);  tokens.add(currentOption);		non-compiled	[CE]  	12	None	add
10	[BUG]  [BUGGY]    Iterator  <  String>  iter  =  options.keySet().iterator();  [CE]  [FE]            AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    Iterator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    Iterator  <  String>  iter  =  options.keySet().iterator();		non-compiled	[CE]  	12	None	add
11	[BUG]  [BUGGY]    Iterator  <  Option>  iter  =  options.iterator();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    Iterator  <  Option>  iter  =  options.iterator();  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    Iterator  <  Option>  iter  =  options.iterator();		non-compiled	[CE]  	12	None	add
12	[BUG]  [BUGGY]    Iterator  iter  =  options.iterator();  [CE]  [FE]      AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    Iterator  iter  =  options.iterator();  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    Iterator  iter  =  options.iterator();		non-compiled	[CE]  	12	None	add
13	[BUG]  [BUGGY]    Iterator  <  Option>  iter  =  options.getOptions().iterator();  [CE]  [FE]        AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    Iterator  <  Option>  iter  =  options.getOptions().iterator();  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    Iterator  <  Option>  iter  =  options.getOptions().iterator();		non-compiled	[CE]  	12	None	add
14	[BUG]  [BUGGY]  processOptionToken(token,  stopAtNonOption);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]  processOptionToken(token,  stopAtNonOption);  [BUGGY]  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	processOptionToken(token,  stopAtNonOption);	burstToken(token,  stopAtNonOption);  	non-compiled	[CE]  	11	None	replace
15	[BUG]  [BUGGY]  burstToken(token,  stopAtNonOption,  options);  [CE]  [FE]      AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]  burstToken(token,  stopAtNonOption,  options);  [BUGGY]  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	burstToken(token,  stopAtNonOption,  options);	burstToken(token,  stopAtNonOption);  	non-compiled	[CE]  	11	None	replace
16	[BUG]  [BUGGY]  processStringToken(token,  stopAtNonOption);  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]  processStringToken(token,  stopAtNonOption);  [BUGGY]  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	processStringToken(token,  stopAtNonOption);	burstToken(token,  stopAtNonOption);  	non-compiled	[CE]  	11	None	replace
17	[BUG]  [BUGGY]    iter.remove();  [CE]  [FE]    AssertionFailedError  [CONTEXT]  {  processOptionToken(token,  stopAtNonOption);  }  else  if  (options.hasOption(token))  {  tokens.add(token);  }  else  {  [BUGGY]    iter.remove();  [BUGGY]  burstToken(token,  stopAtNonOption);  }  }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	    iter.remove();		non-compiled	[CE]  	12	None	add
