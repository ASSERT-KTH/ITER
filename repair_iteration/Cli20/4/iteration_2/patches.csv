bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i);  }	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	2	None	replace
2	[BUG]  [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i  +  1);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  i);  currentOption  =  options.getOption(i  +  1);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  i);  currentOption  =  options.getOption(i  +  1);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	2	None	replace
3	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;	  parent!=    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  	6	None	replace
4	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  break;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1));  break;  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1));  break;	  parent!=    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  	6	None	replace
5	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getValue()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getValue()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  currentOption.getValue()));	  tokens.add(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	12	None	replace
6	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.getValue()));  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.getValue()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.getValue()));	  tokens.add(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	12	None	replace
7	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.getValue()  +  1));  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i,  currentOption.getValue()  +  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i,  currentOption.getValue()  +  1));	  tokens.add(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	12	None	replace
8	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.getValue()  -  1));  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i,  currentOption.getValue()  -  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i,  currentOption.getValue()  -  1));	  tokens.add(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	12	None	replace
9	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getArg(),  stopAtNonOption));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getArg(),  stopAtNonOption));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  currentOption.getArg(),  stopAtNonOption));	  tokens.add(token.substring(i    +    1,    currentOption.getArg()));    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getLength()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getLength()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  currentOption.getLength()));	  tokens.add(token.substring(i    +    1,    currentOption.getArg()));    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.toString()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.toString()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption.toString()));	  tokens.add(token.substring(i    +    1),    currentOption));    	non-compiled	[CE]  	34	None	replace
12	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1),  currentOption));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  i  +  1),  currentOption));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  i  +  1),  currentOption));	  tokens.add(token.substring(i    +    1),    currentOption));    	non-compiled	[CE]  	34	None	replace
13	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.asArg()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.asArg()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption.asArg()));	  tokens.add(token.substring(i    +    1),    currentOption));    	non-compiled	[CE]  	34	None	replace
14	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  }	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    }    	non-compiled	[CE]  	8	None	replace
15	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getLongArgument()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getLongArgument()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  currentOption.getLongArgument()));	  tokens.add(token.substring(i,    currentOption.getLongArgument()));    	non-compiled	[CE]  	43	None	replace
16	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.getLongArgument()  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i,  currentOption.getLongArgument()  +  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i,  currentOption.getLongArgument()  +  1));	  tokens.add(token.substring(i,    currentOption.getLongArgument()));    	non-compiled	[CE]  	43	None	replace
17	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.getLongArgument()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.getLongArgument()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.getLongArgument()));	  tokens.add(token.substring(i,    currentOption.getLongArgument()));    	non-compiled	[CE]  	43	None	replace
18	[BUG]  [BUGGY]  options.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  options.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	options.add( "- "  +  i);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	16	None	replace
19	[BUG]  [BUGGY]  rows.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  rows.add( "- "  +  i);  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	rows.add( "- "  +  i);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(ch);    }    	non-compiled	[CE]  	16	None	replace
20	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.length()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i,  currentOption.length()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i,  currentOption.length()));	  tokens.add(token.substring(i,    currentOption.length()    +    1));    	non-compiled	[CE]  	22	None	replace
21	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.length()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.length()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  currentOption.length()));	  tokens.add(token.substring(i,    currentOption.length()    +    1));    	non-compiled	[CE]  	22	None	replace
22	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.length()  -  1));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i,  currentOption.length()  -  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i,  currentOption.length()  -  1));	  tokens.add(token.substring(i,    currentOption.length()    +    1));    	non-compiled	[CE]  	22	None	replace
23	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1),  ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  token.substring(i  +  1),  ch);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  token.substring(i  +  1),  ch);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  	26	None	replace
24	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1),  ch);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  i  +  1),  ch);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  i  +  1),  ch);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  	26	None	replace
25	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.length()  +  2));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.length()  +  2));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.length()  +  2));	  tokens.add(token.substring(0,    i    +    2));    	non-compiled	[CE]  	20	None	replace
26	[BUG]  [BUGGY]  tokens.add( "-?   "  +  ch.substring(i  +  1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "-?   "  +  ch.substring(i  +  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "-?   "  +  ch.substring(i  +  1));	  tokens.add(   "-?   "    +    token.substring(i    +    1));    	non-compiled	[CE]  	33	None	replace
27	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	  parent!=    null    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    	non-compiled	[CE]  	21	None	replace
28	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.toString(),  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.toString(),  stopAtNonOption);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption.toString(),  stopAtNonOption);	  tokens.add(token.substring(i    +    1),    currentOption.toString());    	non-compiled	[CE]  	24	None	replace
29	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1),  currentOption.toString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  i  +  1),  currentOption.toString());  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  i  +  1),  currentOption.toString());	  tokens.add(token.substring(i    +    1),    currentOption.toString());    	non-compiled	[CE]  	24	None	replace
30	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.getValue());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.getValue());  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption.getValue());	  tokens.add(token.substring(i    +    1),    currentOption.toString());    	non-compiled	[CE]  	24	None	replace
31	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i  +  1),  stopAtNonOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  i  +  1),  stopAtNonOption);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  i  +  1),  stopAtNonOption);	  tokens.add(token.substring(0,    i    +    1),    currentOption);    	non-compiled	[CE]  	25	None	replace
32	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.getLength()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.getLength()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.getLength()));	  tokens.add(token.substring(0,    currentOption.getArg()));    	non-compiled	[CE]  	10	None	replace
33	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.getStartArg()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.getStartArg()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.getStartArg()));	  tokens.add(token.substring(0,    currentOption.getArg()));    	non-compiled	[CE]  	10	None	replace
34	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.getId()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.getId()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.getId()));	  tokens.add(token.substring(0,    currentOption.getArg()));    	non-compiled	[CE]  	10	None	replace
35	[BUG]  [BUGGY]  tokens.add( "- "  +  ch.substring(1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  ch.substring(1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  ch.substring(1));	  tokens.add(   "-   "    +    ch.substring(i    +    1));    	non-compiled	[CE]  	1	None	replace
36	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;	  parent!=    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    break;    	non-compiled	[CE]  	23	None	replace
37	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(i);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  Option  currentOption  =  options.getOption(i);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	Option  currentOption  =  options.getOption(i);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
38	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
39	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  Option  currentOption  =  options.getOption(ch);  }  else  {  tokens.add( "- "  +  ch);  }	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
40	[BUG]  [BUGGY]  tokens.add( "- "  +  i,  currentOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  i,  currentOption);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  i,  currentOption);	  tokens.add(   "-   ",    i);    	non-compiled	[CE]  	36	None	replace
41	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  	32	None	replace
42	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  	32	None	replace
43	[BUG]  [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  options.add( "- "  +  ch);  currentOption  =  options.getOption(i);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	options.add( "- "  +  ch);  currentOption  =  options.getOption(i);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  Option  token  =  options.getOption(i);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  Option  token  =  options.getOption(i);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	Option  token  =  options.getOption(i);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(ch);  }	  tokens.add(   "-   "    +    i    +    1);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	28	None	replace
46	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  currentOption.length()  ==  (i  +  1))  {  tokens.add(token.substring(i  +  1));  break;	  parent!=    null    &&    currentOption.hasArg()    &&    currentOption.length()!=    (i    +    1))    {    tokens.add(token.substring(i    +    1));    break;    	non-compiled	[CE]  	7	None	replace
47	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  break;  }	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    break;    }    	non-compiled	[CE]  	37	None	replace
48	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;  }	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    break;    }    	non-compiled	[CE]  	37	None	replace
49	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	31	None	replace
50	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  &&  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	&&  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    token.length()    ==    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  ||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	||  stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    token.length()    ==    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	15	None	replace
52	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.length()  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.length()  +  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  currentOption.length()  +  1));	  tokens.add(token.substring(i    +    1,    i    +    1));    	non-compiled	[CE]  	42	None	replace
53	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.length()  -  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.length()  -  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  currentOption.length()  -  1));	  tokens.add(token.substring(i    +    1,    i    +    1));    	non-compiled	[CE]  	42	None	replace
54	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }	  aughtExceptionHandler(token,    i,    stopAtNonOption);    	non-compiled	[CE]  	35	None	replace
55	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  aughtExceptionHandler(token,    i,    stopAtNonOption);    	non-compiled	[CE]  	35	None	replace
56	[BUG]  [BUGGY]  assistExceptionHandler(token,  i,  stopAtNonOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  assistExceptionHandler(token,  i,  stopAtNonOption);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	assistExceptionHandler(token,  i,  stopAtNonOption);	  aughtExceptionHandler(token,    i,    stopAtNonOption);    	non-compiled	[CE]  	35	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  }	  aughtExceptionHandler(token,    i,    stopAtNonOption);    	non-compiled	[CE]  	35	None	replace
58	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  i  +  1);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  i  +  1);	  tokens.add(   "-   "    +    i);    	non-compiled	[CE]  	4	None	replace
59	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  >=  (i  +  1)))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  >=  (i  +  1)))  {  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  >=  (i  +  1)))  {	  parent    ==    null    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    	non-compiled	[CE]  	41	None	replace
60	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	17	None	replace
61	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(!stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(!stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	17	None	replace
62	[BUG]  [BUGGY]  tokens.add(token.substring(0,  1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  1));	  tokens.add(token.substring(0,    i));    	non-compiled	[CE]  	13	None	replace
63	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.length()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.length()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.length()));	  tokens.add(token.substring(0,    i));    	non-compiled	[CE]  	13	None	replace
64	[BUG]  [BUGGY]  tokens.add(token.substring(0,  2));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  2));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  2));	  tokens.add(token.substring(0,    i));    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  tokens.add( "-n   "  +  i);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "-n   "  +  i);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "-n   "  +  i);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  	30	None	replace
66	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.getArg()  -  1));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i,  currentOption.getArg()  -  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i,  currentOption.getArg()  -  1));	  tokens.add(token.substring(i,    currentOption.getArg()    +    1));    	non-compiled	[CE]  	11	None	replace
67	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg()  &&(token.length()!=  (i  +  1)))  {  }	  parent    ==    null    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    }    	non-compiled	[CE]  	40	None	replace
68	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.hasArg())  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.hasArg())  {  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.hasArg())  {	  parent!=    null    &&    stopAtNonOption)    {    	non-compiled	[CE]  	27	None	replace
69	[BUG]  [BUGGY]  tokens.add( "- "  +  ch.substring(0,  i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  ch.substring(0,  i  +  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  ch.substring(0,  i  +  1));	  tokens.add(   "-   "    +    token.substring(0,    i    +    1));    	non-compiled	[CE]  	19	None	replace
70	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(0,  i));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  token.substring(0,  i));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  token.substring(0,  i));	  tokens.add(   "-   "    +    token.substring(0,    i    +    1));    	non-compiled	[CE]  	19	None	replace
71	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i)+  1,  currentOption);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  i)+  1,  currentOption);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  i)+  1,  currentOption);	  tokens.add(token.substring(0,    i    +    1),    currentOption);    	non-compiled	[CE]  	25	None	replace
72	[BUG]  [BUGGY]  tokens.add(token.substring(0,  i),  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  i),  currentOption);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  i),  currentOption);	  tokens.add(token.substring(0,    i    +    1),    currentOption);    	non-compiled	[CE]  	25	None	replace
73	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    token.length()    ==    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	15	None	replace
74	[BUG]  [BUGGY]  tokens.add( "-null "  +  ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "-null "  +  ch);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "-null "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  	30	None	replace
75	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  end);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  end);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  end);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  	26	None	replace
76	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  1);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  1);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  1);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  	26	None	replace
77	[BUG]  [BUGGY]  parent!=  null  &&  currentOption.eatTheRest)  {  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent!=  null  &&  currentOption.eatTheRest)  {  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent!=  null  &&  currentOption.eatTheRest)  {	  parent!=    null    &&    stopAtNonOption)    {    	non-compiled	[CE]  	27	None	replace
78	[BUG]  [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens!=  null  &&  stopAtNonOption)  {  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens!=  null  &&  stopAtNonOption)  {	  parent!=    null    &&    stopAtNonOption)    {    	non-compiled	[CE]  	27	None	replace
79	[BUG]  [BUGGY]  if(!stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(!stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(!stopAtNonOption)  {  aughtExceptionHandler.handleMissingException( " ");  }	  aughtExceptionHandler.handleMissingException(   "   ");    	non-compiled	[CE]  	32	None	replace
80	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.getArg());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.getArg());  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption.getArg());	  tokens.add(token.substring(i    +    1),    currentOption.toString());    	non-compiled	[CE]  	24	None	replace
81	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  Option  currentOption  =  options.getOption(ch  -  1);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	Option  currentOption  =  options.getOption(ch  -  1);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
82	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch  +  1);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  Option  currentOption  =  options.getOption(ch  +  1);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	Option  currentOption  =  options.getOption(ch  +  1);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
83	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(ch,  i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  Option  currentOption  =  options.getOption(ch,  i);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	Option  currentOption  =  options.getOption(ch,  i);	  Option    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	29	None	replace
84	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.getArg()  -  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.getArg()  -  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.getArg()  -  1));	  tokens.add(token.substring(0,    currentOption.getArg()));    	non-compiled	[CE]  	10	None	replace
85	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  i);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  &&  token.length()!=  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	31	None	replace
86	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  break;  }  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  break;  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!stopAtNonOption)  {  break;  }	  [Delete]    	non-compiled	[CE]  	38	None	replace
87	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {	  parent    ==    null    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    	non-compiled	[CE]  	41	None	replace
88	[BUG]  [BUGGY]  tokens.add( "-? "  +  token.substring(i));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "-? "  +  token.substring(i));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "-? "  +  token.substring(i));	  tokens.add(   "-?   "    +    token.substring(i    +    1));    	non-compiled	[CE]  	33	None	replace
89	[BUG]  [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  i  +  1);  currentOption  =  options.getOption(i);	  tokens.add(   "-   "    +    i);    currentOption    =    options.getOption(i);    	non-compiled	[CE]  	2	None	replace
90	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent  ==  null  &&  currentOption.hasArg()  &&(token.length()  ==  (i  +  1)))  {  }	  parent    ==    null    &&    currentOption.hasArg()    &&(token.length()!=    (i    +    1)))    {    }    	non-compiled	[CE]  	40	None	replace
91	[BUG]  [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  aughtExceptionHandler(token,  i,  stopAtNonOption);  }  else  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }	  aughtExceptionHandler(token,    i,    stopAtNonOption);    	non-compiled	[CE]  	35	None	replace
92	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getArgumentCount()));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  currentOption.getArgumentCount()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  currentOption.getArgumentCount()));	  tokens.add(token.substring(i    +    1,    currentOption.getArg()));    	non-compiled	[CE]  	9	None	replace
93	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption).toLowerCase());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption).toLowerCase());  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption).toLowerCase());	  tokens.add(token.substring(i    +    1),    currentOption));    	non-compiled	[CE]  	34	None	replace
94	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption  &&  stopAtNonOption));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption  &&  stopAtNonOption));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption  &&  stopAtNonOption));	  tokens.add(token.substring(i    +    1),    currentOption));    	non-compiled	[CE]  	34	None	replace
95	[BUG]  [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add(token.substring(i  +  1));  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add(token.substring(i  +  1));  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  options.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  }  else  {  tokens.add(token.substring(i  +  1));  }	  options.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    	non-compiled	[CE]  	17	None	replace
96	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.getLongArgument()  -  1));  [CE]  [FE]            AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i,  currentOption.getLongArgument()  -  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i,  currentOption.getLongArgument()  -  1));	  tokens.add(token.substring(i,    currentOption.getLongArgument()));    	non-compiled	[CE]  	43	None	replace
97	[BUG]  [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;  }  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;  }  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	parent  ==  null  &&  currentOption.hasArg()  &&  token.length()  ==  (i  +  1))  {  break;  }	  parent    ==    null    &&    currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    break;    }    	non-compiled	[CE]  	37	None	replace
98	[BUG]  [BUGGY]  tokens.add(token.substring(0,  currentOption.getImmediateParentPointer()));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(0,  currentOption.getImmediateParentPointer()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(0,  currentOption.getImmediateParentPointer()));	  tokens.add(token.substring(0,    currentOption.getArg()));    	non-compiled	[CE]  	10	None	replace
99	[BUG]  [BUGGY]  accept(token,  i,  stopAtNonOption);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  accept(token,  i,  stopAtNonOption);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	accept(token,  i,  stopAtNonOption);	  aughtExceptionHandler(token,    i,    stopAtNonOption);    	non-compiled	[CE]  	35	None	replace
100	[BUG]  [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i,  currentOption);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i,  currentOption);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  ch);  currentOption  =  options.getOption(i,  currentOption);	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(i);    }    	non-compiled	[CE]  	3	None	replace
101	[BUG]  [BUGGY]  tokens.add( "- "  +  token.substring(i,  i  +  1));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  token.substring(i,  i  +  1));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  token.substring(i,  i  +  1));	  tokens.add(   "-   "    +    token.substring(0,    i    +    1));    	non-compiled	[CE]  	19	None	replace
102	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1));  currentOption  =  options.getOption(ch);	  [Delete]    	non-compiled	[CE]  	38	None	replace
103	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1,  i));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1,  i));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1,  i));	  tokens.add(token.substring(i    +    1,    i    +    1));    	non-compiled	[CE]  	42	None	replace
104	[BUG]  [BUGGY]  tokens.add(token.substring(i,  currentOption.getLongValue()));  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i,  currentOption.getLongValue()));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i,  currentOption.getLongValue()));	  tokens.add(token.substring(i,    currentOption.getValue()));    	non-compiled	[CE]  	12	None	replace
105	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  token);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  token);  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  token);	  tokens.add(token.substring(i    +    1),    ch);    	non-compiled	[CE]  	26	None	replace
106	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.eatTheRest));  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.eatTheRest));  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption.eatTheRest));	  tokens.add(token.substring(i    +    1),    currentOption));    	non-compiled	[CE]  	34	None	replace
107	[BUG]  [BUGGY]  tokens.add( "- "  +  ch,  i);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "- "  +  ch,  i);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "- "  +  ch,  i);	  tokens.add(   "-   ",    i);    	non-compiled	[CE]  	36	None	replace
108	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  ||  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  ||  token.length()!=  (i  +  1))  {  tokens.add(token.substring  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	if(stopAtNonOption)  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if(!currentOption.hasArg()  ||  token.length()!=  (i  +  1))  {  tokens.add(token.substring	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(!currentOption.hasArg()    &&    token.length()!=    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	31	None	replace
109	[BUG]  [BUGGY]  tokens.add( "-- "  +  ch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "-- "  +  ch);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "-- "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  	30	None	replace
110	[BUG]  [BUGGY]  tokens.add( "-? "  +  ch);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add( "-? "  +  ch);  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add( "-? "  +  ch);	  tokens.add(   "-n   "    +    ch);    	non-compiled	[CE]  	30	None	replace
111	[BUG]  [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1,  token.length()));  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  &&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1,  token.length()));  [BUGGY]      tokens.add(token.substring(i  +  1));  break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	&&  stopAtNonOption)  {  tokens.add(token.substring(i  +  1,  token.length()));	  if(stopAtNonOption)    {    tokens.add(   "-   "    +    ch);    currentOption    =    options.getOption(ch);    if(currentOption.hasArg()    &&    token.length()    ==    (i    +    1))    {    tokens.add(token.substring    	non-compiled	[CE]  	15	None	replace
112	[BUG]  [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.toLowerCase());  [CE]  [FE]              AssertionFailedError      [CONTEXT]      if  (options.hasOption(ch))  {  tokens.add(     "-     "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {      [BUGGY]  tokens.add(token.substring(i  +  1),  currentOption.toLowerCase());  [BUGGY]        break;  }  }  else  if  (stopAtNonOption)  {  process(token.substring(i));  break;  }  else  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	tokens.add(token.substring(i  +  1),  currentOption.toLowerCase());	  tokens.add(token.substring(i    +    1),    currentOption.toString());    	non-compiled	[CE]  	24	None	replace
