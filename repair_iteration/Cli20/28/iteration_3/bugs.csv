bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(token);  }	  process(token);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
2	[BUG]  [BUGGY]  else  if(stopAtNonOption)  {  process(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  else  if(stopAtNonOption)  {  process(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	else  if(stopAtNonOption)  {  process(token);  }	  process(token);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
3	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }	  process(token);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
4	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  process(token);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
5	[BUG]  [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	List  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
6	[BUG]  [BUGGY]  iter.setValue( ": "  +  tokens.size());  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( ": "  +  tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( ": "  +  tokens.size());	  iter.setValue(   ":   ");    	non-compiled	[CE]  <identifier>  expected	53	None	replace
7	[BUG]  [BUGGY]  iter.addValue( ": ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.addValue( ": ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.addValue( ": ");	  iter.setValue(   ":   ");    	non-compiled	[CE]  <identifier>  expected	53	None	replace
8	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
9	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.cloneTree()  :  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.cloneTree()  :  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(stopAtNonOption)?  options.cloneTree()  :  null;	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
10	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.get(option):  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.get(option):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(stopAtNonOption)?  options.get(option):  null;	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
11	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.get(options.size()  -  1):  null;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.get(options.size()  -  1):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(stopAtNonOption)?  options.get(options.size()  -  1):  null;	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
12	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  <?>  currentOption  =  options.getOption(tokens);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
13	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(tokens,  iter);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(tokens,  iter);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  <?>  currentOption  =  options.getOption(tokens,  iter);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
14	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.get(tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.get(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  <?>  currentOption  =  options.get(tokens);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
15	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(tokens[0]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(tokens[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  <?>  currentOption  =  options.getOption(tokens[0]);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
16	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(currentOption);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(currentOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(currentOption);  }	  process(currentOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
17	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(currentOption);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(currentOption);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(currentOption);  }  else  {  tokens.add(token);  }	  process(currentOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
18	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(currentOption);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  process(currentOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
19	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(currentOption);  }  else  {  iter.remove();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(currentOption);  }  else  {  iter.remove();  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(currentOption);  }  else  {  iter.remove();  }	  process(currentOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
20	[BUG]  [BUGGY]  iter.setValue( "1 ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( "1 ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( "1 ");	  iter.setValue(   "0   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
21	[BUG]  [BUGGY]  iter.add(arguments[1]);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.add(arguments[1]);  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.add(arguments[1]);	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
22	[BUG]  [BUGGY]  iter.add(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.add(arguments[0],  stopAtNonOption);  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.add(arguments[0],  stopAtNonOption);	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
23	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }	  eatTheRest(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
24	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
25	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(iter);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(iter);  }	  eatTheRest(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
26	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(item);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(item);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(item);  }	  eatTheRest(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
27	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(iter,  tokens);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(iter,  tokens);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(iter,  tokens);  }	  process(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
28	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(iter,  tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(iter,  tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(iter,  tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  process(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
29	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(iter,  tokens);  }  else  {  options.put(tokens[0],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(iter,  tokens);  }  else  {  options.put(tokens[0],  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(iter,  tokens);  }  else  {  options.put(tokens[0],  stopAtNonOption);  }	  process(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
30	[BUG]  [BUGGY]  accept(arguments);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  accept(arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	accept(arguments);	  accept(tokens);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
31	[BUG]  [BUGGY]  tokens.add(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tokens.add(token);	  accept(tokens);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
32	[BUG]  [BUGGY]  tokens.add( "n ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add( "n ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tokens.add( "n ");	  accept(tokens);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
33	[BUG]  [BUGGY]  validate(arguments);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  validate(arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	validate(arguments);	  accept(tokens);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
34	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(tokens,  iter);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  gobble(tokens,  iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tryFallThrough(tokens,  stopAtNonOption)  {  gobble(tokens,  iter);  }	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  else  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  else  if(stopAtNonOption)  {  gobble(tokens,  iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  else  if(stopAtNonOption)  {  gobble(tokens,  iter);  }	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
36	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
37	[BUG]  [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  catch(IllegalArgumentException  e)  {  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  catch(IllegalArgumentException  e)  {  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tryFallThrough(tokens,  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  catch(IllegalArgumentException  e)  {  }	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
38	[BUG]  [BUGGY]  iter.write(arguments[1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.write(arguments[1]);  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.write(arguments[1]);	  iter.write(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
39	[BUG]  [BUGGY]  Iterator  <  Object>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Object>  iter  =  arguments.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  <  Object>  iter  =  arguments.iterator();	  if(stopAtNonOption)    {    Iterator    iter    =    arguments.iterator();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
40	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.getOption(stopAtNonOption);  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  currentOption  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    Iterator    iter    =    arguments.iterator();    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	36	None	replace
41	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption(iter);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  eatTheRest  =  stopAtNonOption(iter);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	eatTheRest  =  stopAtNonOption(iter);	  eatTheRest    =    process(iter);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
42	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  process(iter);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest  =  process(iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest  =  process(iter);  }	  eatTheRest    =    process(iter);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
43	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  process(iter):  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  eatTheRest  =  stopAtNonOption?  process(iter):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	eatTheRest  =  stopAtNonOption?  process(iter):  null;	  eatTheRest    =    process(iter);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
44	[BUG]  [BUGGY]  eatTheRest  =  stopAtNonOption?  process(iter):  iter;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  eatTheRest  =  stopAtNonOption?  process(iter):  iter;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	eatTheRest  =  stopAtNonOption?  process(iter):  iter;	  eatTheRest    =    process(iter);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
45	[BUG]  [BUGGY]  final  Ilerator  <  String>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  final  Ilerator  <  String>  iter  =  options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	final  Ilerator  <  String>  iter  =  options.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
46	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  arguments.iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  arguments.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  <  String>  iter  =  arguments.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
47	[BUG]  [BUGGY]  Ilerator  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  options.values().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  iter  =  options.values().iterator();	  Ilerator    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	44	None	replace
48	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  currentOption.options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	List  <  String>  iter  =  currentOption.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
49	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
50	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	While(stopAtNonOption)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
51	[BUG]  [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  While(stopAtNonOption)  {  tokens.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	While(stopAtNonOption)  {  tokens.add(token);	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
52	[BUG]  [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	While(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ".equals(arguments));  }	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
53	[BUG]  [BUGGY]  Iterator  <  Object>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Object>  iter  =  options.iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  <  Object>  iter  =  options.iterator();	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
54	[BUG]  [BUGGY]  try  ==  stopAtNonOption  &&  iter  <  arguments.length)  {  tokens.add(token);  }  catch(IllegalArgumentException  e)  {  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  try  ==  stopAtNonOption  &&  iter  <  arguments.length)  {  tokens.add(token);  }  catch(IllegalArgumentException  e)  {  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	try  ==  stopAtNonOption  &&  iter  <  arguments.length)  {  tokens.add(token);  }  catch(IllegalArgumentException  e)  {  }	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
55	[BUG]  [BUGGY]  try  ==  stopAtNonOption  &&  iter  <  arguments.length)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  try  ==  stopAtNonOption  &&  iter  <  arguments.length)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	try  ==  stopAtNonOption  &&  iter  <  arguments.length)  {  tokens.add(token);  }	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	12	None	replace
56	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(arguments);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(arguments);  }	  eatTheRest(arguments);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
57	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest(arguments);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
58	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  tokens.add(token);  }	  eatTheRest(arguments);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
59	[BUG]  [BUGGY]  Option  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  iter  =  options.iterator();	  if(stopAtNonOption)    {    Iterator    iter    =    arguments.iterator();    }    	non-compiled	[CE]  <identifier>  expected	35	None	replace
60	[BUG]  [BUGGY]  tokens.add( "null ");  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add( "null ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tokens.add( "null ");	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    tokens.add(   "n   ");    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  iter.addValue( "- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.addValue( "- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.addValue( "- ");	  iter.setValue(   "-   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
62	[BUG]  [BUGGY]  iter.setValue( "- "  +  tokens.size());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( "- "  +  tokens.size());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( "- "  +  tokens.size());	  iter.setValue(   "-   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
63	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  options.keySet().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  <  Option>  iter  =  options.keySet().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
64	[BUG]  [BUGGY]  List  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  Option>  iter  =  options.values().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	List  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
65	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens);  }	  process(tokens);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
66	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  process(tokens);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
67	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens);  }  else  {  tokens.add(token);  }	  process(tokens);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
68	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens);  }  else  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens);  }  else  {  options.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens);  }  else  {  options.add(token);  }	  process(tokens);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
69	[BUG]  [BUGGY]  List  <  Option>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  Option>  iter  =  currentOptions.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	List  <  Option>  iter  =  currentOptions.iterator();	  Iterator    <    Option>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
70	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  <  Option>  iter  =  options.iterator();	  Iterator    <    Option>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
71	[BUG]  [BUGGY]  iter.remove(arguments[1]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.remove(arguments[1]);  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.remove(arguments[1]);	  iter.remove(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	34	None	replace
72	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  this.tokens.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  <  String>  iter  =  this.tokens.iterator();	  Iterator    <    String>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
73	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.getOption(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  currentOption  =  options.getOption(tokens);	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
74	[BUG]  [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  options  =  options.getOption(stopAtNonOption);	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
75	[BUG]  [BUGGY]  options.add(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  options.add(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	options.add(token);	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
76	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  gobble(tokens);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  gobble(tokens);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tryFallThrough(stopAtNonOption)  {  gobble(tokens);  }	  if(stopAtNonOption)    {    gobble(tokens);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
77	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tryFallThrough(stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    gobble(tokens);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
78	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  gobble(arguments);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  gobble(arguments);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tryFallThrough(stopAtNonOption)  {  gobble(arguments);  }	  if(stopAtNonOption)    {    gobble(tokens);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
79	[BUG]  [BUGGY]  tryFallThrough(stopAtNonOption)  {  eatTheRest(tokens);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tryFallThrough(stopAtNonOption)  {  eatTheRest(tokens);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tryFallThrough(stopAtNonOption)  {  eatTheRest(tokens);  }	  if(stopAtNonOption)    {    gobble(tokens);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
80	[BUG]  [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  options.values().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	List  <  String>  iter  =  options.values().iterator();	  Iterator    <    String>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	37	None	replace
81	[BUG]  [BUGGY]  tokens.clear();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.clear();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tokens.clear();	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
82	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.get(token);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.get(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  <?>  currentOption  =  options.get(token);	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
83	[BUG]  [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  <?>  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  <?>  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
84	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.get(item):  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.get(item):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(stopAtNonOption)?  options.get(item):  null;	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(item);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
85	[BUG]  [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.clone()  :  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(stopAtNonOption)?  options.clone()  :  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(stopAtNonOption)?  options.clone()  :  null;	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(item);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
86	[BUG]  [BUGGY]  iter.setValue( "false ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( "false ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( "false ");	  iter.setValue(   "n   ");    	non-compiled	[CE]  <identifier>  expected	52	None	replace
87	[BUG]  [BUGGY]  iter.setValue( "null ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( "null ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( "null ");	  iter.setValue(   "n   ");    	non-compiled	[CE]  <identifier>  expected	52	None	replace
88	[BUG]  [BUGGY]  Option  currentOption  =  options.get(token);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.get(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  currentOption  =  options.get(token);	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
89	[BUG]  [BUGGY]  Option  currentOption  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  currentOption  =  options.getOption(token);	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
90	[BUG]  [BUGGY]  Option  currentOption  =  options.get(tokens);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  currentOption  =  options.get(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  currentOption  =  options.get(tokens);	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
91	[BUG]  [BUGGY]  process(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  process(arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	process(arguments,  stopAtNonOption);	  process(arguments);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
92	[BUG]  [BUGGY]  tokens.add(arguments);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add(arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tokens.add(arguments);	  process(arguments);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
93	[BUG]  [BUGGY]  List  <  Option>  iter  =  tokens.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  Option>  iter  =  tokens.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	List  <  Option>  iter  =  tokens.iterator();	  Iterator    <    Option>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
94	[BUG]  [BUGGY]  try  ==  stopAtNonOption  &&  iter.hasNext();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  try  ==  stopAtNonOption  &&  iter.hasNext();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	try  ==  stopAtNonOption  &&  iter.hasNext();	  if(stopAtNonOption)    {    eatTheRest(iter);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
95	[BUG]  [BUGGY]  try  ==  stopAtNonOption  &&  iter  <  arguments.length);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  try  ==  stopAtNonOption  &&  iter  <  arguments.length);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	try  ==  stopAtNonOption  &&  iter  <  arguments.length);	  if(stopAtNonOption)    {    eatTheRest(iter);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
96	[BUG]  [BUGGY]  try  ==  stopAtNonOption  &&  iter.next()!=  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  try  ==  stopAtNonOption  &&  iter.next()!=  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	try  ==  stopAtNonOption  &&  iter.next()!=  null;	  if(stopAtNonOption)    {    eatTheRest(iter);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
97	[BUG]  [BUGGY]  try  ==  stopAtNonOption  &&  iter.next()  ==  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  try  ==  stopAtNonOption  &&  iter.next()  ==  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	try  ==  stopAtNonOption  &&  iter.next()  ==  null;	  if(stopAtNonOption)    {    eatTheRest(iter);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
98	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens);  }	  eatTheRest(tokens);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
99	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  tokens.add(token);  }	  eatTheRest(tokens);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
100	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest(tokens);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
101	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  options.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens);  }  else  {  options.add(token);  }	  eatTheRest(tokens);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
102	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens,  iter);  }	  process(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
103	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  process(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
104	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  tokens.add(item);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  tokens.add(item);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  tokens.add(item);  }	  process(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
105	[BUG]  [BUGGY]  iter.setValue(arguments[1]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue(arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue(arguments[1]);	  iter.setValue(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
106	[BUG]  [BUGGY]  iter.setValue(arguments[0],  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue(arguments[0],  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue(arguments[0],  stopAtNonOption);	  iter.setValue(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
107	[BUG]  [BUGGY]  iter.setValue(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue(arguments[0].toLowerCase());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue(arguments[0].toLowerCase());	  iter.setValue(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
108	[BUG]  [BUGGY]  List  <  String>  iter  =  currentOptions.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  List  <  String>  iter  =  currentOptions.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	List  <  String>  iter  =  currentOptions.iterator();	  Iterator    <    String>    iter    =    currentOptions.iterator();    	non-compiled	[CE]  <identifier>  expected	41	None	replace
109	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  gobble(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
110	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  gobble(iter,  tokens);  }	  gobble(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
111	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  options.put(tokens[0],  stopAtNonOption);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  options.put(tokens[0],  stopAtNonOption);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  options.put(tokens[0],  stopAtNonOption);  }	  gobble(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
112	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  options.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  options.add(token);  }	  gobble(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
113	[BUG]  [BUGGY]  process(iter,  arguments);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  process(iter,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	process(iter,  arguments);	  process(arguments,    iter);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
114	[BUG]  [BUGGY]  process(arguments,  iter,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  process(arguments,  iter,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	process(arguments,  iter,  stopAtNonOption);	  process(arguments,    iter);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
115	[BUG]  [BUGGY]  process(arguments,  iter,  eatTheRest);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  process(arguments,  iter,  eatTheRest);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	process(arguments,  iter,  eatTheRest);	  process(arguments,    iter);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
116	[BUG]  [BUGGY]  Option  <  Option>  iter  =  options.iterator();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  <  Option>  iter  =  options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  <  Option>  iter  =  options.iterator();	  Iterator    <    Option>    iter    =    arguments.iterator();    	non-compiled	[CE]  <identifier>  expected	21	None	replace
117	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  currentOption.iterator();  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  currentOption.iterator();  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  <  String>  iter  =  currentOption.iterator();  }	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
118	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  String>  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  <  String>  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }	  Iterator    <    String>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
119	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokens,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(tokens,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(tokens,  stopAtNonOption);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(item);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
120	[BUG]  [BUGGY]  Option  option  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(tokens);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(item);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
121	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  tokens.iterator();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  tokens.iterator();  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  tokens.iterator();  }	  Iterator    <    Option>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
122	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Iterator    <    Option>    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	20	None	replace
123	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  tokens.add(token);  }	  process(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
124	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  tokens.add(arguments[0]);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  tokens.add(arguments[0]);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(arguments);  }  else  {  tokens.add(arguments[0]);  }	  eatTheRest(arguments);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
125	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.values().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  <  String>  iter  =  options.values().iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
126	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  currentOption.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  <  String>  iter  =  currentOption.iterator();	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
127	[BUG]  [BUGGY]  process(arguments,  options);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  process(arguments,  options);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	process(arguments,  options);	  process(arguments,    iter);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
128	[BUG]  [BUGGY]  iter.setString(arguments[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setString(arguments[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setString(arguments[0]);	  iter.setValue(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	54	None	replace
129	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
130	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  for(Iterator  iter  =  options.iterator();  iter.hasNext();)  {  tokens.add(iter.next());  }	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
131	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  tokens.iterator();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
132	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.getOption(options.getOption(options)));  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(options.getOption(options.getOption(options)));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(options.getOption(options.getOption(options)));	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
133	[BUG]  [BUGGY]  Option  option  =  options.getOption(options.getOption(options));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(options.getOption(options));  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(options.getOption(options));	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
134	[BUG]  [BUGGY]  Option  option  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption(token);	  if(stopAtNonOption)    {    eatTheRest(iter);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
135	[BUG]  [BUGGY]  iter.setValue( ": "  +  token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( ": "  +  token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( ": "  +  token);	  iter.setValue(   ":   ");    	non-compiled	[CE]  <identifier>  expected	53	None	replace
136	[BUG]  [BUGGY]  iter.setValue( ":n ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( ":n ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( ":n ");	  iter.setValue(   ":   ");    	non-compiled	[CE]  <identifier>  expected	53	None	replace
137	[BUG]  [BUGGY]  Ilerator  iter  =  currentOption.iterator();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  currentOption.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  iter  =  currentOption.iterator();	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
138	[BUG]  [BUGGY]  Ilerator  iter  =  currentOption.options.iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  iter  =  currentOption.options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  iter  =  currentOption.options.iterator();	  Ilerator    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
139	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  currentOption.options.iterator();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  currentOption.options.iterator();  }  else  {  tokens.add(token);  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  currentOption.options.iterator();  }  else  {  tokens.add(token);  }	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
140	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  currentOption.options.iterator();  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  currentOption.options.iterator();  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  currentOption.options.iterator();  }	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
141	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  }  else  {  tokens.add(token);  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  options.iterator();  }  else  {  tokens.add(token);  }	  Iterator    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	39	None	replace
142	[BUG]  [BUGGY]  eatTheRest  =  process(currentOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  eatTheRest  =  process(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	eatTheRest  =  process(currentOption);	  process(currentOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
143	[BUG]  [BUGGY]  eatTheRest(currentOption);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  eatTheRest(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	eatTheRest(currentOption);	  process(currentOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
144	[BUG]  [BUGGY]  tokens.add(currentOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  tokens.add(currentOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	tokens.add(currentOption);	  process(currentOption);    	non-compiled	[CE]  <identifier>  expected	27	None	replace
145	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }	  eatTheRest(tokens);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
146	[BUG]  [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  tokens.add(token);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  eatTheRest(tokens);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
147	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens  =  new  String[tokens.size()  ];  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens  =  new  String[tokens.size()  ];  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens  =  new  String[tokens.size()  ];  }	  eatTheRest(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
148	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens.add(token);  }	  eatTheRest(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
149	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
150	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
151	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
152	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetimunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetimunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetimunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
153	[BUG]  [BUGGY]  iter.setValue( "-- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( "-- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( "-- ");	  iter.setValue(   "-   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
154	[BUG]  [BUGGY]  iter  =  iter.next();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  iter.next();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter  =  iter.next();	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    tokens.add(   "n   ");    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
155	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
156	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  currentOption.iterator();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  iter  =  currentOption.iterator();  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  iter  =  currentOption.iterator();  }	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
157	[BUG]  [BUGGY]  if(stopAtNonOption)  {  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }	  Iterator    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	4	None	replace
158	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(token);  }  else  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(token);  }  else  {  options.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(token);  }  else  {  options.add(token);  }	  process(token);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
159	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }	  Iterator    <    Option>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
160	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }  else  {  tokens.add(token);  }	  Iterator    <    Option>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
161	[BUG]  [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }  else  {  tokens.add( "n ");  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }  else  {  tokens.add( "n ");  }  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  Iterator  <  Option>  iter  =  currentOption.iterator();  }  else  {  tokens.add( "n ");  }	  Iterator    <    Option>    iter    =    currentOption.iterator();    	non-compiled	[CE]  <identifier>  expected	19	None	replace
162	[BUG]  [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  Option>  iter  =  options.values().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  <  Option>  iter  =  options.values().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
163	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(3);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(3);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(3);	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
164	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =  options.keySet().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  <  String>  iter  =  options.keySet().iterator();	  Iterator    <    String>    iter    =    options.keySet().iterator();    	non-compiled	[CE]  <identifier>  expected	58	None	replace
165	[BUG]  [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  option  =  options.getOption( "stopAtNonOption ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  option  =  options.getOption( "stopAtNonOption ");	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
166	[BUG]  [BUGGY]  Option  options  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOption(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  options  =  options.getOption(tokens);	  if(stopAtNonOption)    {    gobble(tokens);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
167	[BUG]  [BUGGY]  Option  options  =  options.getOptions();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  options  =  options.getOptions();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  options  =  options.getOptions();	  if(stopAtNonOption)    {    gobble(tokens);    }    	non-compiled	[CE]  <identifier>  expected	15	None	replace
168	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent!=  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
169	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  gobble(tokens);  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  gobble(tokens);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent!=  null  &&  stopAtNonOption)  {  gobble(tokens);  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
170	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
171	[BUG]  [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent!=  null  &&  stopAtNonOption)  {  throw  new  IllegalStateException( " ");  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
172	[BUG]  [BUGGY]  accept(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  accept(arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	accept(arguments,  stopAtNonOption);	  accept(tokens);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
173	[BUG]  [BUGGY]  accept(arguments,  StopAtNonOption);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  accept(arguments,  StopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	accept(arguments,  StopAtNonOption);	  accept(tokens);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
174	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  tokens.add(token);  }	  gobble(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
175	[BUG]  [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  gobble(iter,  tokens);  }  else  {  throw  new  IllegalStateException( " ");  }	  gobble(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
176	[BUG]  [BUGGY]  iter.add( "n ");  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.add( "n ");  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.add( "n ");	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
177	[BUG]  [BUGGY]  iter.setValue( "eatTheRest ");  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue( "eatTheRest ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue( "eatTheRest ");	  iter.setValue(   "n   ");    	non-compiled	[CE]  <identifier>  expected	52	None	replace
178	[BUG]  [BUGGY]  append(arguments,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  append(arguments,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	append(arguments,  stopAtNonOption);	  accept(tokens);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
179	[BUG]  [BUGGY]  append(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  append(arguments[0],  arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	append(arguments[0],  arguments[1]);	  accept(tokens);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
180	[BUG]  [BUGGY]  iter.setValue(args[0]);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setValue(args[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setValue(args[0]);	  iter.setValue(   "0   ");    	non-compiled	[CE]  <identifier>  expected	9	None	replace
181	[BUG]  [BUGGY]  iter.write(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.write(arguments[0].toLowerCase());  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.write(arguments[0].toLowerCase());	  iter.write(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	57	None	replace
182	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(iter);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(iter);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti(iter);	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
183	[BUG]  [BUGGY]  iter.setString( "- ");  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.setString( "- ");  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.setString( "- ");	  iter.setValue(   "-   ");    	non-compiled	[CE]  <identifier>  expected	10	None	replace
184	[BUG]  [BUGGY]  eatTheRest  =  process(token);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  eatTheRest  =  process(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	eatTheRest  =  process(token);	  eatTheRest    =    process(iter);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
185	[BUG]  [BUGGY]  eatTheRest  =  process(iter,  stopAtNonOption);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  eatTheRest  =  process(iter,  stopAtNonOption);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	eatTheRest  =  process(iter,  stopAtNonOption);	  eatTheRest    =    process(iter);    	non-compiled	[CE]  <identifier>  expected	50	None	replace
186	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
187	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
188	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  skip(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  skip(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent  ==  null  &&  stopAtNonOption)  {  skip(tokens);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
189	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent  ==  null  &&  stopAtNonOption)  {  throw  new  IllegalArgumentException( " ");  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
190	[BUG]  [BUGGY]  Option  iter  =  options.getOption(token);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOption(token);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  iter  =  options.getOption(token);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    tokens.add(item);    }    	non-compiled	[CE]  <identifier>  expected	8	None	replace
191	[BUG]  [BUGGY]  iter  =  stopAtNonOption?  getTheRest(iter):  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  stopAtNonOption?  getTheRest(iter):  null;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter  =  stopAtNonOption?  getTheRest(iter):  null;	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    tokens.add(   "n   ");    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
192	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  options.entrySet().iterator();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  <  String>  iter  =  options.entrySet().iterator();	  if(stopAtNonOption)    {    eatTheRest(iter);    }    else    {    tokens.add(   "n   ");    }    	non-compiled	[CE]  <identifier>  expected	14	None	replace
193	[BUG]  [BUGGY]  [Delete]  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  [Delete]  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	[Delete]	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
194	[BUG]  [BUGGY]  oricarors.add(arguments[0],  arguments[1]);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  oricarors.add(arguments[0],  arguments[1]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	oricarors.add(arguments[0],  arguments[1]);	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
195	[BUG]  [BUGGY]  oricarors.add(arguments[0].toString());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  oricarors.add(arguments[0].toString());  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	oricarors.add(arguments[0].toString());	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
196	[BUG]  [BUGGY]  oricarors.add(arguments[0]);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  oricarors.add(arguments[0]);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	oricarors.add(arguments[0]);	  if(stopAtNonOption)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	60	None	replace
197	[BUG]  [BUGGY]  Option  iter  =  options.getOption(tokens);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Option  iter  =  options.getOption(tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Option  iter  =  options.getOption(tokens);	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
198	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  tokens.add(token);  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    tokens.add(token);    }    	non-compiled	[CE]  <identifier>  expected	16	None	replace
199	[BUG]  [BUGGY]  Iterator  iter  =(this.options!=  null)?  options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =(this.options!=  null)?  options.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  iter  =(this.options!=  null)?  options.iterator()  :  null;	  Iterator    iter    =    this.options.iterator();    	non-compiled	[CE]  <identifier>  expected	55	None	replace
200	[BUG]  [BUGGY]  eatTheRest(iter,  tokens);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  eatTheRest(iter,  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	eatTheRest(iter,  tokens);	  gobble(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
201	[BUG]  [BUGGY]  gobble(iter,  arguments);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  gobble(iter,  arguments);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	gobble(iter,  arguments);	  gobble(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
202	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(tokens,  iter);  }  else  {  throw  new  IllegalStateException( " ");  }	  process(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	46	None	replace
203	[BUG]  [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  iter  =  this.tokens.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  iter  =  this.tokens.iterator();	  Iterator    iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	3	None	replace
204	[BUG]  [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  options.add(token);  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  options.add(token);  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	parent  ==  null  &&  stopAtNonOption)  {  gobble(tokens);  }  else  {  options.add(token);  }	  if(stopAtNonOption)    {    gobble(tokens);    }    else    {    options.add(token);    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
205	[BUG]  [BUGGY]  iter  =(tokens.size()  >  0)?  tokens.iterator()  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =(tokens.size()  >  0)?  tokens.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter  =(tokens.size()  >  0)?  tokens.iterator()  :  null;	  iter    =    tokens.iterator();    	non-compiled	[CE]  <identifier>  expected	51	None	replace
206	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption();  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption();	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
207	[BUG]  [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  it  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  it  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	suntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisuntetisunteti  else  if(stopAtNonOption  =  it	  if(stopAtNonOption)    {    gobble(tokens,    iter);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	5	None	replace
208	[BUG]  [BUGGY]  iter  =  stopAtNonOption;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter  =  stopAtNonOption;  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter  =  stopAtNonOption;	  if(stopAtNonOption)    {    eatTheRest(iter);    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
209	[BUG]  [BUGGY]  iter.close();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.close();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.close();	  iter.clear();    	non-compiled	[CE]  <identifier>  expected	33	None	replace
210	[BUG]  [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  Option>  iter  =  options.entrySet().iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  <  Option>  iter  =  options.entrySet().iterator();	  Iterator    <    Option>    iter    =    options.values().iterator();    	non-compiled	[CE]  <identifier>  expected	43	None	replace
211	[BUG]  [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens  =  new  ArrayList  <  String>();  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens  =  new  ArrayList  <  String>();  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  eatTheRest(tokens,  iter);  }  else  {  tokens  =  new  ArrayList  <  String>();  }	  eatTheRest(tokens,    iter);    	non-compiled	[CE]  <identifier>  expected	45	None	replace
212	[BUG]  [BUGGY]  process(options,  iter,  tokens);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  process(options,  iter,  tokens);  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	process(options,  iter,  tokens);	  process(iter,    tokens);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
213	[BUG]  [BUGGY]  Ilerator  <  String>  iter  =(options  ==  null)?  options.iterator()  :  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Ilerator  <  String>  iter  =(options  ==  null)?  options.iterator()  :  null;  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Ilerator  <  String>  iter  =(options  ==  null)?  options.iterator()  :  null;	  Ilerator    <    String>    iter    =    options.iterator();    	non-compiled	[CE]  <identifier>  expected	38	None	replace
214	[BUG]  [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  Iterator  <  String>  iter  =  this.options.iterator();  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	Iterator  <  String>  iter  =  this.options.iterator();	  Iterator    <    String>    iter    =    currentOption.options.iterator();    	non-compiled	[CE]  <identifier>  expected	40	None	replace
215	[BUG]  [BUGGY]  if(stopAtNonOption)  {  process(token);  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  if(stopAtNonOption)  {  process(token);  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	if(stopAtNonOption)  {  process(token);  }  else  {  throw  new  IllegalStateException( " ");  }	  process(token);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
216	[BUG]  [BUGGY]  iter.add(arguments[0].toLowerCase());  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      }  else  if  (stopAtNonOption)  {  process(token);  }  else  {  tokens.add(token);  }      [BUGGY]  iter.add(arguments[0].toLowerCase());  [BUGGY]      gobble(iter);  }  [CLASS]  PosixParser  [METHOD]  flatten  [RETURN_TYPE]  String[]  Options  options  String[]  arguments  boolean  stopAtNonOption  [VARIABLES]  Options  options  boolean  eatTheRest  stopAtNonOption  Iterator  iter  List  tokens  Option  currentOption  String[]  arguments  String  token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.25	155	155	1	replace	iter.add(arguments[0].toLowerCase());	  iter.add(arguments[0]);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
