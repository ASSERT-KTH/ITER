bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number
this_action1	[BUG]  [BUGGY]    if(stopAtNonOption)  {  if(options.hasOption(ch))  {  tokens.add( "- "  +  ch);  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  [BUGGY]    if(stopAtNonOption)  {  if(options.hasOption(ch))  {  tokens.add( "- "  +  ch);  }  [BUGGY]  if  (options.hasOption(ch))    {  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	273	274	1	replace	    if(stopAtNonOption)  {  if(options.hasOption(ch))  {  tokens.add( "- "  +  ch);  }		non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
2	[BUG]  [BUGGY]    if(stopAtNonOption)  {  if(options.hasOption(ch))  {  tokens.add(token.substring(i  +  1));  break;  }  [CE]  reached  end  of  file  while  parsing  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  [BUGGY]    if(stopAtNonOption)  {  if(options.hasOption(ch))  {  tokens.add(token.substring(i  +  1));  break;  }  [BUGGY]  if  (options.hasOption(ch))    {  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	273	274	1	replace	    if(stopAtNonOption)  {  if(options.hasOption(ch))  {  tokens.add(token.substring(i  +  1));  break;  }		non-compiled	[CE]  reached  end  of  file  while  parsing	18	None	add
4	[BUG]  [BUGGY]    List  <  Option>  options  =  options.getOption(ch);  [CE]  cannot  find  symbol  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  [BUGGY]    List  <  Option>  options  =  options.getOption(ch);  [BUGGY]  if  (options.hasOption(ch))    {  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	273	274	1	replace	    List  <  Option>  options  =  options.getOption(ch);		non-compiled	[CE]  cannot  find  symbol	18	None	add
5	[BUG]  [BUGGY]    List  <  Options>  options  =  options.getOptions(ch);  [CE]  cannot  find  symbol  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  String  ch  =  String.valueOf(token.charAt(i));  [BUGGY]    List  <  Options>  options  =  options.getOptions(ch);  [BUGGY]  if  (options.hasOption(ch))    {  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  break;  }  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	273	274	1	replace	    List  <  Options>  options  =  options.getOptions(ch);		non-compiled	[CE]  cannot  find  symbol	18	None	add
11	[BUG]  [BUGGY]    tokens.add( "- "  +  ch);  [CE]  cannot  find  symbol  ch  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    tokens.add( "- "  +  ch);  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	271	271	1	replace	    tokens.add( "- "  +  ch);		non-compiled	[CE]  cannot  find  symbol  ch	16	None	add
12	[BUG]  [BUGGY]    List  <  String>  options  =  options.getOptions();  [CE]  cannot  find  symbol  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    List  <  String>  options  =  options.getOptions();  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	271	271	1	replace	    List  <  String>  options  =  options.getOptions();		non-compiled	[CE]  cannot  find  symbol	16	None	add
13	[BUG]  [BUGGY]    List  <  Options>  options  =  options.getOptions();  [CE]  cannot  find  symbol  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    List  <  Options>  options  =  options.getOptions();  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	271	271	1	replace	    List  <  Options>  options  =  options.getOptions();		non-compiled	[CE]  cannot  find  symbol	16	None	add
14	[BUG]  [BUGGY]    List  <  Option>  options  =  options.getOption(ch);  [CE]  cannot  find  symbol  ch  [CONTEXT]  {  for  (int  i  =  1;  i  <  token.length();  i++)  {  [BUGGY]    List  <  Option>  options  =  options.getOption(ch);  [BUGGY]  String  ch  =  String.valueOf(token.charAt(i));  if  (options.hasOption(ch))  {  tokens.add( "- "  +  ch);  currentOption  =  options.getOption(ch);  if  (currentOption.hasArg()  &&  (token.length()  !=  (i  +  1)))  {  tokens.add(token.substring(i  +  1));  [CLASS]  PosixParser  [METHOD]  burstToken  [RETURN_TYPE]  void  String  token  boolean  stopAtNonOption  [VARIABLES]  Options  options  List  tokens  Option  currentOption  boolean  eatTheRest  stopAtNonOption  String  ch  token  int  i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	271	271	1	replace	    List  <  Option>  options  =  options.getOption(ch);		non-compiled	[CE]  cannot  find  symbol  ch	16	None	add
