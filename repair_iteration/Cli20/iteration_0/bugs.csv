bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] tokens.add(token.substring(0, token.indexOf('='))); [FE] AssertionFailedError testStop3 [CONTEXT] if (token.startsWith("--")) { if (token.indexOf('=') != -1) { [BUGGY] tokens.add(token.substring(0, token.indexOf('='))); [BUGGY] tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } }  else if ("-".equals(token)) [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] if (token.startsWith("--")) { if (token.indexOf('=') != -1) { [BUGGY] [BUGGY] tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } }  else if ("-".equals(token)) [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	116	116	1	add	
3	[BUG] [BUGGY] tokens.add(token.substring(token.indexOf('=') + 1, token.length())); [FE] AssertionFailedError testStop3 [CONTEXT] if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); [BUGGY] tokens.add(token.substring(token.indexOf('=') + 1, token.length())); [BUGGY] } else { tokens.add(token); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] if (token.indexOf('=') != -1) { tokens.add(token.substring(0, token.indexOf('='))); [BUGGY] [BUGGY] tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	1.0	117	117	1	add	
5	[BUG] [BUGGY] if (token.indexOf('=') != -1) { [FE] AssertionFailedError testStop3 [CONTEXT] while (iter.hasNext()) {  String token = (String) iter.next();  if (token.startsWith("--")) { [BUGGY] if (token.indexOf('=') != -1)    { [BUGGY] { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } }  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] while (iter.hasNext()) {  String token = (String) iter.next();  if (token.startsWith("--")) { [BUGGY] [BUGGY] if (token.indexOf('=') != -1)    { { tokens.add(token.substring(0, token.indexOf('='))); tokens.add(token.substring(token.indexOf('=') + 1, token.length())); } else { tokens.add(token); } }  [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	114	115	1	add	
7	[BUG] [BUGGY] tokens.add(token.substring(i + 1)); [FE] AssertionFailedError testStop3 [CONTEXT] if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { [BUGGY] tokens.add(token.substring(i + 1)); [BUGGY]  break; } } else if (stopAtNonOption) { process(token.substring(i)); break; } else [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { [BUGGY] [BUGGY] tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) { process(token.substring(i)); break; } else [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	280	280	1	add	
9	[BUG] [BUGGY] break; [FE] AssertionFailedError testStop3 [CONTEXT] if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); [BUGGY] break; [BUGGY] } } else if (stopAtNonOption) { process(token.substring(i)); break; } else { tokens.add(token); [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	282	282	1	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); [BUGGY] [BUGGY] break; } } else if (stopAtNonOption) { process(token.substring(i)); break; } else { tokens.add(token); [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.4472135954999579	282	282	1	add	
11	[BUG] [BUGGY] burstToken(token, stopAtNonOption); [FE] AssertionFailedError testStop3 [CONTEXT] { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  else { [BUGGY] burstToken(token, stopAtNonOption); [BUGGY] } } else if (stopAtNonOption) { process(token); } else { tokens.add(token); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] { processOptionToken(token, stopAtNonOption); } else if (options.hasOption(token)) { tokens.add(token); }  else { [BUGGY] [BUGGY] burstToken(token, stopAtNonOption); } } else if (stopAtNonOption) { process(token); } else { tokens.add(token); } [CLASS] PosixParser [METHOD] flatten [RETURN_TYPE] String[]  Options options String[] arguments boolean stopAtNonOption [VARIABLES] Options options boolean eatTheRest stopAtNonOption Iterator iter List tokens Option currentOption String[] arguments String token  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	143	143	1	add	
13	[BUG] [BUGGY] for (int i = 1; i < token.length(); i++) { [FE] AssertionFailedError testStop3 [CONTEXT] { [BUGGY] for (int i = 1; i < token.length(); i++)  { [BUGGY] { String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	269	270	1	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] { [BUGGY] [BUGGY] for (int i = 1; i < token.length(); i++)  { { String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	269	270	1	add	
15	[BUG] [BUGGY] String ch = String.valueOf(token.charAt(i)); [FE] AssertionFailedError testStop3 [CONTEXT] { for (int i = 1; i < token.length(); i++) { [BUGGY] String ch = String.valueOf(token.charAt(i)); [BUGGY]  if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1));  [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	271	271	1	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] { for (int i = 1; i < token.length(); i++) { [BUGGY] [BUGGY] String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1));  [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	271	271	1	add	
17	[BUG] [BUGGY] if (options.hasOption(ch)) { [FE] AssertionFailedError testStop3 [CONTEXT] { for (int i = 1; i < token.length(); i++) { String ch = String.valueOf(token.charAt(i)); [BUGGY] if (options.hasOption(ch))   { [BUGGY] { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	273	274	1	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] { for (int i = 1; i < token.length(); i++) { String ch = String.valueOf(token.charAt(i)); [BUGGY] [BUGGY] if (options.hasOption(ch))   { { tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	273	274	1	add	
19	[BUG] [BUGGY] tokens.add("-" + ch); [FE] AssertionFailedError testStop3 [CONTEXT] { for (int i = 1; i < token.length(); i++) { String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { [BUGGY] tokens.add("-" + ch); [BUGGY] currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError testStop3 [CONTEXT] { for (int i = 1; i < token.length(); i++) { String ch = String.valueOf(token.charAt(i)); if (options.hasOption(ch)) { [BUGGY] [BUGGY] tokens.add("-" + ch); currentOption = options.getOption(ch); if (currentOption.hasArg() && (token.length() != (i + 1))) { tokens.add(token.substring(i + 1)); break; } } else if (stopAtNonOption) [CLASS] PosixParser [METHOD] burstToken [RETURN_TYPE] void  String token boolean stopAtNonOption [VARIABLES] Options options List tokens Option currentOption boolean eatTheRest stopAtNonOption String ch token int i  	projects/Cli20/src/java/org/apache/commons/cli/PosixParser.java	0.35355339059327373	275	275	1	add	
