bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] final SevenZArchiveEntry entry = new SevenZArchiveEntry(); [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { [BUGGY] final SevenZArchiveEntry entry = new SevenZArchiveEntry(); [BUGGY] entry.setDirectory(inputFile.isDirectory()); entry.setName(entryName); entry.setLastModifiedDate(new Date(inputFile.lastModified())); return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	97	97	9	replace	
2	[BUG] [BUGGY] [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { [BUGGY] [BUGGY] final SevenZArchiveEntry entry = new SevenZArchiveEntry(); entry.setDirectory(inputFile.isDirectory()); entry.setName(entryName); entry.setLastModifiedDate(new Date(inputFile.lastModified())); return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	97	97	9	add	
3	[BUG] [BUGGY] entry.setDirectory(inputFile.isDirectory()); [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { final SevenZArchiveEntry entry = new SevenZArchiveEntry(); [BUGGY] entry.setDirectory(inputFile.isDirectory()); [BUGGY] entry.setName(entryName); entry.setLastModifiedDate(new Date(inputFile.lastModified())); return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	98	98	9	replace	
4	[BUG] [BUGGY] [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { final SevenZArchiveEntry entry = new SevenZArchiveEntry(); [BUGGY] [BUGGY] entry.setDirectory(inputFile.isDirectory()); entry.setName(entryName); entry.setLastModifiedDate(new Date(inputFile.lastModified())); return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	98	98	9	add	
5	[BUG] [BUGGY] entry.setName(entryName); [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { final SevenZArchiveEntry entry = new SevenZArchiveEntry(); entry.setDirectory(inputFile.isDirectory()); [BUGGY] entry.setName(entryName); [BUGGY] entry.setLastModifiedDate(new Date(inputFile.lastModified())); return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	99	99	9	replace	
6	[BUG] [BUGGY] [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { final SevenZArchiveEntry entry = new SevenZArchiveEntry(); entry.setDirectory(inputFile.isDirectory()); [BUGGY] [BUGGY] entry.setName(entryName); entry.setLastModifiedDate(new Date(inputFile.lastModified())); return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	99	99	9	add	
7	[BUG] [BUGGY] entry.setLastModifiedDate(new Date(inputFile.lastModified())); [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { final SevenZArchiveEntry entry = new SevenZArchiveEntry(); entry.setDirectory(inputFile.isDirectory()); entry.setName(entryName); [BUGGY] entry.setLastModifiedDate(new Date(inputFile.lastModified())); [BUGGY] return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	100	100	9	replace	
8	[BUG] [BUGGY] [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { final SevenZArchiveEntry entry = new SevenZArchiveEntry(); entry.setDirectory(inputFile.isDirectory()); entry.setName(entryName); [BUGGY] [BUGGY] entry.setLastModifiedDate(new Date(inputFile.lastModified())); return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	100	100	9	add	
9	[BUG] [BUGGY] return entry; [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { final SevenZArchiveEntry entry = new SevenZArchiveEntry(); entry.setDirectory(inputFile.isDirectory()); entry.setName(entryName); entry.setLastModifiedDate(new Date(inputFile.lastModified())); [BUGGY] return entry; [BUGGY] } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	101	101	9	replace	
10	[BUG] [BUGGY] [FE] IOException [CONTEXT] public SevenZArchiveEntry createArchiveEntry(final File inputFile, final String entryName) throws IOException { final SevenZArchiveEntry entry = new SevenZArchiveEntry(); entry.setDirectory(inputFile.isDirectory()); entry.setName(entryName); entry.setLastModifiedDate(new Date(inputFile.lastModified())); [BUGGY] [BUGGY] return entry; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] createArchiveEntry [RETURN_TYPE] SevenZArchiveEntry  File inputFile String entryName [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files String entryName File inputFile int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	101	101	9	add	
11	[BUG] [BUGGY] write(b, 0, b.length); [FE] IOException [CONTEXT] public void write(final byte[] b) throws IOException { [BUGGY] write(b, 0, b.length); [BUGGY] } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] write [RETURN_TYPE] void  final byte[] b [VARIABLES] byte[] b CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int b numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	164	164	9	replace	
12	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void write(final byte[] b) throws IOException { [BUGGY] [BUGGY] write(b, 0, b.length); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] write [RETURN_TYPE] void  final byte[] b [VARIABLES] byte[] b CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int b numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	164	164	9	add	
13	[BUG] [BUGGY] } [FE] IOException [CONTEXT] public void write(final byte[] b) throws IOException { write(b, 0, b.length); [BUGGY] } [BUGGY]  [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] write [RETURN_TYPE] void  final byte[] b [VARIABLES] byte[] b CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int b numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	165	165	9	replace	
14	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void write(final byte[] b) throws IOException { write(b, 0, b.length); [BUGGY] [BUGGY] } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] write [RETURN_TYPE] void  final byte[] b [VARIABLES] byte[] b CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int b numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	165	165	9	add	
15	[BUG] [BUGGY] if (len > 0) { [FE] IOException [CONTEXT] public void write(final byte[] b, final int off, final int len) throws IOException { [BUGGY] if (len > 0) { [BUGGY] getCurrentOutputStream().write(b, off, len); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] write [RETURN_TYPE] void  final byte[] b final int off final int len [VARIABLES] byte[] b CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int b len numNonEmptyStreams off long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	175	175	9	replace	
16	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void write(final byte[] b, final int off, final int len) throws IOException { [BUGGY] [BUGGY] if (len > 0) { getCurrentOutputStream().write(b, off, len); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] write [RETURN_TYPE] void  final byte[] b final int off final int len [VARIABLES] byte[] b CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int b len numNonEmptyStreams off long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	175	175	9	add	
17	[BUG] [BUGGY] } [FE] IOException [CONTEXT] public void write(final byte[] b, final int off, final int len) throws IOException { if (len > 0) { getCurrentOutputStream().write(b, off, len); } [BUGGY] } [BUGGY]  [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] write [RETURN_TYPE] void  final byte[] b final int off final int len [VARIABLES] byte[] b CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int b len numNonEmptyStreams off long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	178	178	9	replace	
18	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void write(final byte[] b, final int off, final int len) throws IOException { if (len > 0) { getCurrentOutputStream().write(b, off, len); } [BUGGY] [BUGGY] } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] write [RETURN_TYPE] void  final byte[] b final int off final int len [VARIABLES] byte[] b CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int b len numNonEmptyStreams off long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	178	178	9	add	
19	[BUG] [BUGGY] header.write(NID.kEmptyFile); [FE] IOException [CONTEXT] int emptyStreamCounter = 0; final BitSet emptyFiles = new BitSet(0); for (int i = 0; i < files.size(); i++) { if (!files.get(i).hasStream()) { boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { [BUGGY] header.write(NID.kEmptyFile); [BUGGY] final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	422	422	9	replace	
20	[BUG] [BUGGY] [FE] IOException [CONTEXT] int emptyStreamCounter = 0; final BitSet emptyFiles = new BitSet(0); for (int i = 0; i < files.size(); i++) { if (!files.get(i).hasStream()) { boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { [BUGGY] [BUGGY] header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	422	422	9	add	
21	[BUG] [BUGGY] final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [FE] IOException [CONTEXT] final BitSet emptyFiles = new BitSet(0); for (int i = 0; i < files.size(); i++) { if (!files.get(i).hasStream()) { boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); [BUGGY] final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [BUGGY] final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	423	423	9	replace	
22	[BUG] [BUGGY] [FE] IOException [CONTEXT] final BitSet emptyFiles = new BitSet(0); for (int i = 0; i < files.size(); i++) { if (!files.get(i).hasStream()) { boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); [BUGGY] [BUGGY] final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	423	423	9	add	
23	[BUG] [BUGGY] final DataOutputStream out = new DataOutputStream(baos); [FE] IOException [CONTEXT] for (int i = 0; i < files.size(); i++) { if (!files.get(i).hasStream()) { boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [BUGGY] final DataOutputStream out = new DataOutputStream(baos); [BUGGY] writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	424	424	9	replace	
24	[BUG] [BUGGY] [FE] IOException [CONTEXT] for (int i = 0; i < files.size(); i++) { if (!files.get(i).hasStream()) { boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [BUGGY] [BUGGY] final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	424	424	9	add	
25	[BUG] [BUGGY] writeBits(out, emptyFiles, emptyStreamCounter); [FE] IOException [CONTEXT] if (!files.get(i).hasStream()) { boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); [BUGGY] writeBits(out, emptyFiles, emptyStreamCounter); [BUGGY] out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	425	425	9	replace	
26	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (!files.get(i).hasStream()) { boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); [BUGGY] [BUGGY] writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	425	425	9	add	
27	[BUG] [BUGGY] out.flush(); [FE] IOException [CONTEXT] boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); [BUGGY] out.flush(); [BUGGY] final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	426	426	9	replace	
28	[BUG] [BUGGY] [FE] IOException [CONTEXT] boolean isDir = files.get(i).isDirectory(); emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); [BUGGY] [BUGGY] out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	426	426	9	add	
29	[BUG] [BUGGY] final byte[] contents = baos.toByteArray(); [FE] IOException [CONTEXT] emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); [BUGGY] final byte[] contents = baos.toByteArray(); [BUGGY] writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	427	427	9	replace	
30	[BUG] [BUGGY] [FE] IOException [CONTEXT] emptyFiles.set(emptyStreamCounter++, !isDir); hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); [BUGGY] [BUGGY] final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	427	427	9	add	
31	[BUG] [BUGGY] writeUint64(header, contents.length); [FE] IOException [CONTEXT] hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); [BUGGY] writeUint64(header, contents.length); [BUGGY] header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	428	428	9	replace	
32	[BUG] [BUGGY] [FE] IOException [CONTEXT] hasEmptyFiles |= !isDir; } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); [BUGGY] [BUGGY] writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	428	428	9	add	
33	[BUG] [BUGGY] header.write(contents); [FE] IOException [CONTEXT] } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); [BUGGY] header.write(contents); [BUGGY] } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	429	429	9	replace	
34	[BUG] [BUGGY] [FE] IOException [CONTEXT] } } if (hasEmptyFiles) { header.write(NID.kEmptyFile); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); writeBits(out, emptyFiles, emptyStreamCounter); out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); [BUGGY] [BUGGY] header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileEmptyFiles [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method BitSet emptyFiles ByteArrayOutputStream baos int b codecFlags emptyStreamCounter i len numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasEmptyFiles hasEmptyStreams isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	429	429	9	add	
35	[BUG] [BUGGY] ++numLastModifiedDates; [FE] IOException [CONTEXT] private void writeFileMTimes(final DataOutput header) throws IOException { int numLastModifiedDates = 0; for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { [BUGGY] ++numLastModifiedDates; [BUGGY] } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	548	548	9	replace	
36	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void writeFileMTimes(final DataOutput header) throws IOException { int numLastModifiedDates = 0; for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { [BUGGY] [BUGGY] ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	548	548	9	add	
37	[BUG] [BUGGY] header.write(NID.kMTime); [FE] IOException [CONTEXT] private void writeFileMTimes(final DataOutput header) throws IOException { int numLastModifiedDates = 0; for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { [BUGGY] header.write(NID.kMTime); [BUGGY]  final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	552	552	9	replace	
38	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void writeFileMTimes(final DataOutput header) throws IOException { int numLastModifiedDates = 0; for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { [BUGGY] [BUGGY] header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	552	552	9	add	
39	[BUG] [BUGGY] final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [FE] IOException [CONTEXT] private void writeFileMTimes(final DataOutput header) throws IOException { int numLastModifiedDates = 0; for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); [BUGGY] final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [BUGGY] final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	554	554	9	replace	
40	[BUG] [BUGGY] [FE] IOException [CONTEXT] private void writeFileMTimes(final DataOutput header) throws IOException { int numLastModifiedDates = 0; for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); [BUGGY] [BUGGY] final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	554	554	9	add	
41	[BUG] [BUGGY] final DataOutputStream out = new DataOutputStream(baos); [FE] IOException [CONTEXT] int numLastModifiedDates = 0; for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [BUGGY] final DataOutputStream out = new DataOutputStream(baos); [BUGGY] if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	555	555	9	replace	
42	[BUG] [BUGGY] [FE] IOException [CONTEXT] int numLastModifiedDates = 0; for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); [BUGGY] [BUGGY] final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	555	555	9	add	
43	[BUG] [BUGGY] if (numLastModifiedDates != files.size()) { [FE] IOException [CONTEXT] for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); [BUGGY] if (numLastModifiedDates != files.size()) { [BUGGY] out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	556	556	9	replace	
44	[BUG] [BUGGY] [FE] IOException [CONTEXT] for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); [BUGGY] [BUGGY] if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	556	556	9	add	
45	[BUG] [BUGGY] out.write(0); [FE] IOException [CONTEXT] if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { [BUGGY] out.write(0); [BUGGY] final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	557	557	9	replace	
46	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (entry.getHasLastModifiedDate()) { ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { [BUGGY] [BUGGY] out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	557	557	9	add	
47	[BUG] [BUGGY] final BitSet mTimes = new BitSet(files.size()); [FE] IOException [CONTEXT] ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); [BUGGY] final BitSet mTimes = new BitSet(files.size()); [BUGGY] for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	558	558	9	replace	
48	[BUG] [BUGGY] [FE] IOException [CONTEXT] ++numLastModifiedDates; } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); [BUGGY] [BUGGY] final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	558	558	9	add	
49	[BUG] [BUGGY] for (int i = 0; i < files.size(); i++) { [FE] IOException [CONTEXT] } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); [BUGGY] for (int i = 0; i < files.size(); i++) { [BUGGY] mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	559	559	9	replace	
50	[BUG] [BUGGY] [FE] IOException [CONTEXT] } } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); [BUGGY] [BUGGY] for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	559	559	9	add	
51	[BUG] [BUGGY] mTimes.set(i, files.get(i).getHasLastModifiedDate()); [FE] IOException [CONTEXT] } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { [BUGGY] mTimes.set(i, files.get(i).getHasLastModifiedDate()); [BUGGY] } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	560	560	9	replace	
52	[BUG] [BUGGY] [FE] IOException [CONTEXT] } if (numLastModifiedDates > 0) { header.write(NID.kMTime); final ByteArrayOutputStream baos = new ByteArrayOutputStream(); final DataOutputStream out = new DataOutputStream(baos); if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { [BUGGY] [BUGGY] mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	560	560	9	add	
53	[BUG] [BUGGY] writeBits(out, mTimes, files.size()); [FE] IOException [CONTEXT] if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } [BUGGY] writeBits(out, mTimes, files.size()); [BUGGY] } else { out.write(1); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	562	562	9	replace	
54	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } [BUGGY] [BUGGY] writeBits(out, mTimes, files.size()); } else { out.write(1); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	562	562	9	add	
55	[BUG] [BUGGY] } else { [FE] IOException [CONTEXT] if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); [BUGGY] } else { [BUGGY] out.write(1); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	563	563	9	replace	
56	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); [BUGGY] [BUGGY] } else { out.write(1); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	563	563	9	add	
57	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	566	566	9	replace	
58	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (numLastModifiedDates != files.size()) { out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	566	566	9	add	
59	[BUG] [BUGGY] for (final SevenZArchiveEntry entry : files) { [FE] IOException [CONTEXT] out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); [BUGGY] for (final SevenZArchiveEntry entry : files) { [BUGGY] if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	567	567	9	replace	
60	[BUG] [BUGGY] [FE] IOException [CONTEXT] out.write(0); final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); [BUGGY] [BUGGY] for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	567	567	9	add	
61	[BUG] [BUGGY] if (entry.getHasLastModifiedDate()) { [FE] IOException [CONTEXT] final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { [BUGGY] if (entry.getHasLastModifiedDate()) { [BUGGY] out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	568	568	9	replace	
62	[BUG] [BUGGY] [FE] IOException [CONTEXT] final BitSet mTimes = new BitSet(files.size()); for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { [BUGGY] [BUGGY] if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	568	568	9	add	
63	[BUG] [BUGGY] out.writeLong(Long.reverseBytes(  SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); [FE] IOException [CONTEXT] for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { [BUGGY] out.writeLong(Long.reverseBytes(       SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); [BUGGY] SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	569	570	9	replace	
64	[BUG] [BUGGY] [FE] IOException [CONTEXT] for (int i = 0; i < files.size(); i++) { mTimes.set(i, files.get(i).getHasLastModifiedDate()); } writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { [BUGGY] [BUGGY] out.writeLong(Long.reverseBytes(       SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	569	570	9	add	
65	[BUG] [BUGGY] } [FE] IOException [CONTEXT] writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } [BUGGY] } [BUGGY] out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	572	572	9	replace	
66	[BUG] [BUGGY] [FE] IOException [CONTEXT] writeBits(out, mTimes, files.size()); } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } [BUGGY] [BUGGY] } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	572	572	9	add	
67	[BUG] [BUGGY] out.flush(); [FE] IOException [CONTEXT] } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } [BUGGY] out.flush(); [BUGGY] final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	573	573	9	replace	
68	[BUG] [BUGGY] [FE] IOException [CONTEXT] } else { out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } [BUGGY] [BUGGY] out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	573	573	9	add	
69	[BUG] [BUGGY] final byte[] contents = baos.toByteArray(); [FE] IOException [CONTEXT] out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); [BUGGY] final byte[] contents = baos.toByteArray(); [BUGGY] writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	574	574	9	replace	
70	[BUG] [BUGGY] [FE] IOException [CONTEXT] out.write(1); } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); [BUGGY] [BUGGY] final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	574	574	9	add	
71	[BUG] [BUGGY] writeUint64(header, contents.length); [FE] IOException [CONTEXT] } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); [BUGGY] writeUint64(header, contents.length); [BUGGY] header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	575	575	9	replace	
72	[BUG] [BUGGY] [FE] IOException [CONTEXT] } out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); [BUGGY] [BUGGY] writeUint64(header, contents.length); header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	575	575	9	add	
73	[BUG] [BUGGY] header.write(contents); [FE] IOException [CONTEXT] out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); [BUGGY] header.write(contents); [BUGGY] } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	576	576	9	replace	
74	[BUG] [BUGGY] [FE] IOException [CONTEXT] out.write(0); for (final SevenZArchiveEntry entry : files) { if (entry.getHasLastModifiedDate()) { out.writeLong(Long.reverseBytes( SevenZArchiveEntry.javaTimeToNtfsTime(entry.getLastModifiedDate()))); } } out.flush(); final byte[] contents = baos.toByteArray(); writeUint64(header, contents.length); [BUGGY] [BUGGY] header.write(contents); } } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] writeFileMTimes [RETURN_TYPE] void  DataOutput header [VARIABLES] DataOutput header CRC32 compressedCrc32 crc32 DataOutputStream out SevenZMethod contentCompression method SevenZArchiveEntry entry BitSet mTimes ByteArrayOutputStream baos int antiItemCounter b codecFlags emptyStreamCounter i len numAccessDates numCreationDates numLastModifiedDates numNonEmptyStreams off long fileBytesWritten headerPosition byte[] contents CountingOutputStream currentOutputStream boolean finished hasAntiItems hasEmptyFiles hasEmptyStreams isAnti isDir RandomAccessFile file List files  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	1.0	576	576	9	add	
75	[BUG] [BUGGY] finish(); [FE] IOException [CONTEXT] public void close() throws IOException { if (!finished) { [BUGGY] finish(); [BUGGY] } file.close(); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] close [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	81	81	9	replace	
76	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void close() throws IOException { if (!finished) { [BUGGY] [BUGGY] finish(); } file.close(); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] close [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	81	81	9	add	
77	[BUG] [BUGGY] final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry; [FE] IOException [CONTEXT] public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException { [BUGGY] final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry; [BUGGY] files.add(entry); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files ArchiveEntry archiveEntry int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	114	114	9	replace	
78	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException { [BUGGY] [BUGGY] final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry; files.add(entry); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files ArchiveEntry archiveEntry int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	114	114	9	add	
79	[BUG] [BUGGY] files.add(entry); [FE] IOException [CONTEXT] public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException { final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry; [BUGGY] files.add(entry); [BUGGY] } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files ArchiveEntry archiveEntry int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	115	115	9	replace	
80	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException { final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry; [BUGGY] [BUGGY] files.add(entry); } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files ArchiveEntry archiveEntry int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	115	115	9	add	
81	[BUG] [BUGGY] } [FE] IOException [CONTEXT] public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException { final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry; files.add(entry); [BUGGY] } [BUGGY]  [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files ArchiveEntry archiveEntry int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	116	116	9	replace	
82	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException { final SevenZArchiveEntry entry = (SevenZArchiveEntry) archiveEntry; files.add(entry); [BUGGY] [BUGGY] } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] putArchiveEntry [RETURN_TYPE] void  ArchiveEntry archiveEntry [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files ArchiveEntry archiveEntry int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	116	116	9	add	
83	[BUG] [BUGGY] if (currentOutputStream != null) { [FE] IOException [CONTEXT] public void closeArchiveEntry() throws IOException { [BUGGY] if (currentOutputStream != null) { [BUGGY] currentOutputStream.flush(); currentOutputStream.close(); } final SevenZArchiveEntry entry = files.get(files.size() - 1); if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	123	123	9	replace	
84	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void closeArchiveEntry() throws IOException { [BUGGY] [BUGGY] if (currentOutputStream != null) { currentOutputStream.flush(); currentOutputStream.close(); } final SevenZArchiveEntry entry = files.get(files.size() - 1); if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	123	123	9	add	
85	[BUG] [BUGGY] final SevenZArchiveEntry entry = files.get(files.size() - 1); [FE] IOException [CONTEXT] public void closeArchiveEntry() throws IOException { if (currentOutputStream != null) { currentOutputStream.flush(); currentOutputStream.close(); } [BUGGY] final SevenZArchiveEntry entry = files.get(files.size() - 1); [BUGGY] if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	128	128	9	replace	
86	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void closeArchiveEntry() throws IOException { if (currentOutputStream != null) { currentOutputStream.flush(); currentOutputStream.close(); } [BUGGY] [BUGGY] final SevenZArchiveEntry entry = files.get(files.size() - 1); if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	128	128	9	add	
87	[BUG] [BUGGY] if (fileBytesWritten > 0) { [FE] IOException [CONTEXT] public void closeArchiveEntry() throws IOException { if (currentOutputStream != null) { currentOutputStream.flush(); currentOutputStream.close(); } final SevenZArchiveEntry entry = files.get(files.size() - 1); [BUGGY] if (fileBytesWritten > 0) { [BUGGY] entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	129	129	9	replace	
88	[BUG] [BUGGY] [FE] IOException [CONTEXT] public void closeArchiveEntry() throws IOException { if (currentOutputStream != null) { currentOutputStream.flush(); currentOutputStream.close(); } final SevenZArchiveEntry entry = files.get(files.size() - 1); [BUGGY] [BUGGY] if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	129	129	9	add	
89	[BUG] [BUGGY] entry.setHasStream(false); [FE] IOException [CONTEXT] final SevenZArchiveEntry entry = files.get(files.size() - 1); if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { [BUGGY] entry.setHasStream(false); [BUGGY] entry.setSize(0); entry.setCompressedSize(0); entry.setHasCrc(false); } currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	138	138	9	replace	
90	[BUG] [BUGGY] [FE] IOException [CONTEXT] final SevenZArchiveEntry entry = files.get(files.size() - 1); if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { [BUGGY] [BUGGY] entry.setHasStream(false); entry.setSize(0); entry.setCompressedSize(0); entry.setHasCrc(false); } currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	138	138	9	add	
91	[BUG] [BUGGY] entry.setSize(0); [FE] IOException [CONTEXT] if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); [BUGGY] entry.setSize(0); [BUGGY] entry.setCompressedSize(0); entry.setHasCrc(false); } currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	139	139	9	replace	
92	[BUG] [BUGGY] [FE] IOException [CONTEXT] if (fileBytesWritten > 0) { entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); [BUGGY] [BUGGY] entry.setSize(0); entry.setCompressedSize(0); entry.setHasCrc(false); } currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	139	139	9	add	
93	[BUG] [BUGGY] entry.setCompressedSize(0); [FE] IOException [CONTEXT] entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); [BUGGY] entry.setCompressedSize(0); [BUGGY] entry.setHasCrc(false); } currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	140	140	9	replace	
94	[BUG] [BUGGY] [FE] IOException [CONTEXT] entry.setHasStream(true); ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); [BUGGY] [BUGGY] entry.setCompressedSize(0); entry.setHasCrc(false); } currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	140	140	9	add	
95	[BUG] [BUGGY] entry.setHasCrc(false); [FE] IOException [CONTEXT] ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); entry.setCompressedSize(0); [BUGGY] entry.setHasCrc(false); [BUGGY] } currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	141	141	9	replace	
96	[BUG] [BUGGY] [FE] IOException [CONTEXT] ++numNonEmptyStreams; entry.setSize(currentOutputStream.getBytesWritten()); entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); entry.setCompressedSize(0); [BUGGY] [BUGGY] entry.setHasCrc(false); } currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	141	141	9	add	
97	[BUG] [BUGGY] currentOutputStream = null; [FE] IOException [CONTEXT] entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); entry.setCompressedSize(0); entry.setHasCrc(false); } [BUGGY] currentOutputStream = null; [BUGGY] crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	143	143	9	replace	
98	[BUG] [BUGGY] [FE] IOException [CONTEXT] entry.setCompressedSize(fileBytesWritten); entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); entry.setCompressedSize(0); entry.setHasCrc(false); } [BUGGY] [BUGGY] currentOutputStream = null; crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	143	143	9	add	
99	[BUG] [BUGGY] crc32.reset(); [FE] IOException [CONTEXT] entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); entry.setCompressedSize(0); entry.setHasCrc(false); } currentOutputStream = null; [BUGGY] crc32.reset(); [BUGGY] compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	144	144	9	replace	
100	[BUG] [BUGGY] [FE] IOException [CONTEXT] entry.setCrcValue(crc32.getValue()); entry.setCompressedCrcValue(compressedCrc32.getValue()); entry.setHasCrc(true); } else { entry.setHasStream(false); entry.setSize(0); entry.setCompressedSize(0); entry.setHasCrc(false); } currentOutputStream = null; [BUGGY] [BUGGY] crc32.reset(); compressedCrc32.reset(); fileBytesWritten = 0; } [CLASS] SevenZOutputFile 1 OutputStreamWrapper [METHOD] closeArchiveEntry [RETURN_TYPE] void  [VARIABLES] CountingOutputStream currentOutputStream boolean finished RandomAccessFile file CRC32 compressedCrc32 crc32 SevenZMethod contentCompression method SevenZArchiveEntry entry List files int numNonEmptyStreams long fileBytesWritten  	projects/Compress21/src/main/java/org/apache/commons/compress/archivers/sevenz/SevenZOutputFile.java	0.9486832980505138	144	144	9	add	
