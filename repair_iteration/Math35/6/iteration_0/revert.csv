projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36doubleelitismRate=1.0;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36doubleelitismRate=10.0;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36doubleelitismRate=0.0;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36doubleelitismRate=0.01;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36doubleelitismRate=0.5;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36privatedoubleelitismRate=0.9;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36privatedoubleelitismRate=1.0;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36privatedoubleelitismRate=2.0;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36privatedoubleelitismRate=0.0;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36privatedoubleelitismRate=10.0;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36privatedoubleelitismRate=0.5;
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36Validate.notNull(elitismRate);
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36Validate.notNull(population);
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36intelitismRate=getPopulationCount();
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36elitismRate=Math.max(0.0,Math.abs(elitismRate));
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36intelitismRate=Math.max(1.0,Math.abs(elitismRate));
projects/Math35/src/main/java/org/apache/commons/math3/genetics/ElitisticListPopulation.java36elitismRate=Math.max(1.0,Math.abs(elitismRate));
