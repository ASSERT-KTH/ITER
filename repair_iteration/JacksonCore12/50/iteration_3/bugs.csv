bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  hash  =  _inputPtr  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputPtr  -  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputPtr  -  1;	  int    hash    =    ptr    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
2	[BUG]  [BUGGY]  int  hash  =  _inputEnd  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputEnd  -  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputEnd  -  1;	  int    hash    =    ptr    -    1;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
3	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(ptr  <  _inputEnd)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  ' "')  {  if(ptr  <  _inputEnd)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ch  ==  ' "')  {  if(ptr  <  _inputEnd)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  int  hash  =(ptr  <  _inputEnd)?  0  :  _inputPtr;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(ptr  <  _inputEnd)?  0  :  _inputPtr;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(ptr  <  _inputEnd)?  0  :  _inputPtr;	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
6	[BUG]  [BUGGY]  char  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputPtr;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  char  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputPtr;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	char  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputPtr;	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
7	[BUG]  [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr,  hash);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr,  hash);  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	_symbols.findSymbol(_inputBuffer,  start,  ptr,  hash);	  _symbols.findSymbol(_inputBuffer,    start,    ptr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
8	[BUG]  [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	_symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);	  _symbols.findSymbol(_inputBuffer,    start,    ptr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
9	[BUG]  [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1,  hash);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1,  hash);  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	_symbols.findSymbol(_inputBuffer,  start,  ptr  +  1,  hash);	  _symbols.findSymbol(_inputBuffer,    start,    ptr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
10	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  >=  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    <    _inputEnd)    {    if(!_bufferRecyclable.equals(_inputBuffer,    _inputPtr))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
11	[BUG]  [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  ==  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    <    _inputEnd)    {    if(!_bufferRecyclable.equals(_inputBuffer,    _inputPtr))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
12	[BUG]  [BUGGY]  ||(ptr  <  _inputEnd  &&!_bufferRecyclable.equals(_inputBuffer,  _inputPtr)))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  ||(ptr  <  _inputEnd  &&!_bufferRecyclable.equals(_inputBuffer,  _inputPtr)))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	||(ptr  <  _inputEnd  &&!_bufferRecyclable.equals(_inputBuffer,  _inputPtr)))  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    <    _inputEnd)    {    if(!_bufferRecyclable.equals(_inputBuffer,    _inputPtr))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
13	[BUG]  [BUGGY]  int  hash  =  ptr  +  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  ptr  +  2;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  ptr  +  2;	  int    hash    =    _hashSeed    +    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
14	[BUG]  [BUGGY]  int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr];	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
15	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr  +  1];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr  +  1];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr  +  1];	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
16	[BUG]  [BUGGY]  int  hash  =  _inputBuffer.length  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputBuffer.length  +  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputBuffer.length  +  1;	  int    hash    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr  +  1];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr  +  1];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr  +  1];	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
18	[BUG]  [BUGGY]  int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr];	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  int  hash  =  _inputEnd  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputEnd  +  2;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputEnd  +  2;	  int    hash    =    _inputEnd    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  int  hash  =  _symbols.length  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _symbols.length  -  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _symbols.length  -  1;	  int    hash    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  int  hash  =  _symbols.length  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _symbols.length  +  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _symbols.length  +  1;	  int    hash    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  int  hash  =  _symbols.length  -  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _symbols.length  -  2;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _symbols.length  -  2;	  int    hash    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    hash);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
24	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  if(ptr  <  _inputEnd)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  ' "')  {  if(ptr  <  _inputEnd)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ch  ==  ' "')  {  if(ptr  <  _inputEnd)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    hash);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
25	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
26	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  >=  _inputEnd)  {  if(!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(!Character.isWhitespace(ptr))    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
27	[BUG]  [BUGGY]  ||  Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  ||  Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	||  Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);	  if(ptr    <    _inputEnd)    {    if(!Character.isWhitespace(ptr))    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
28	[BUG]  [BUGGY]  ||  Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  ||  Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	||  Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(!Character.isWhitespace(ptr))    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
29	[BUG]  [BUGGY]  int  hash  =  _inputBuffer.length  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputBuffer.length  -  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputBuffer.length  -  1;	  int    hash    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
30	[BUG]  [BUGGY]  int  hash  =  _inputBuffer.length  -  ptr;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputBuffer.length  -  ptr;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputBuffer.length  -  ptr;	  int    hash    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
31	[BUG]  [BUGGY]  int  hash  =  _inputBuffer.length  -  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputBuffer.length  -  2;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputBuffer.length  -  2;	  int    hash    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
32	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_bufferRecyclable)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_bufferRecyclable)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  _inputEnd)  {  if(!_bufferRecyclable)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
35	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  >=  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
36	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  ' "')  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ch  ==  ' "')  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
37	[BUG]  [BUGGY]  int  hash  =  ptr  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  ptr  /  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  ptr  /  1;	  int    hash    =    _hashSeed    /    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
38	[BUG]  [BUGGY]  int  hash  =  _hashSeed  /  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _hashSeed  /  2;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _hashSeed  /  2;	  int    hash    =    _hashSeed    /    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
39	[BUG]  [BUGGY]  int  hash  =  _hashSeed  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _hashSeed  -  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _hashSeed  -  1;	  int    hash    =    _hashSeed    /    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
40	[BUG]  [BUGGY]  int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer.length;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer.length;	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
41	[BUG]  [BUGGY]  int  hash  =(_inputBuffer.length  <  _inputEnd)?  0  :  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputBuffer.length  <  _inputEnd)?  0  :  _inputBuffer.length;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputBuffer.length  <  _inputEnd)?  0  :  _inputBuffer.length;	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
42	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length  +  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length  +  1;	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
43	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr  +  1];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr  +  1];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  0)?  0  :  _inputBuffer[_inputPtr  +  1];	  int    hash    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
44	[BUG]  [BUGGY]  int  hash  =(_inputPtr  >=  0)?  0  :  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  >=  0)?  0  :  _inputBuffer[_inputPtr];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  >=  0)?  0  :  _inputBuffer[_inputPtr];	  int    hash    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
45	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  0)?  0  :  _inputBuffer[ptr];	  int    hash    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
46	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  _inputEnd)?  1  :  _inputBuffer[_inputPtr];	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
47	[BUG]  [BUGGY]  int  hash  =  _symbols.findSymbol(_inputBuffer,  start,  ptr);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _symbols.findSymbol(_inputBuffer,  start,  ptr);  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _symbols.findSymbol(_inputBuffer,  start,  ptr);	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  int  hash  =  _hashSeed  +  4;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _hashSeed  +  4;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _hashSeed  +  4;	  int    hash    =    _hashSeed    +    1L;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
49	[BUG]  [BUGGY]  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
50	[BUG]  [BUGGY]  int  hash  =  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
51	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  0)?  1  :  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  0)?  1  :  _inputBuffer[_inputPtr];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  0)?  1  :  _inputBuffer[_inputPtr];	  int    hash    =(_inputPtr    <    0)?    0    :    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
52	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  _inputEnd)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalStateException( " ");  }	  if(ptr    <    _inputEnd)    {    if(!_bufferRecyclable.equals(_inputBuffer,    _inputPtr))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
53	[BUG]  [BUGGY]  int  hash  =  _inputBuffer.length  -  4;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputBuffer.length  -  4;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputBuffer.length  -  4;	  int    hash    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
54	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr++];	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
55	[BUG]  [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(_inputPtr  >=  _inputEnd)  {  if(!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(_inputPtr  >=  _inputEnd)  {  if(!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(!Character.isWhitespace(ptr))    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
56	[BUG]  [BUGGY]  int  hash  =  _symbols.findName(_inputBuffer,  start,  ptr);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _symbols.findName(_inputBuffer,  start,  ptr);  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _symbols.findName(_inputBuffer,  start,  ptr);	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
57	[BUG]  [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start);  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	_symbols.findSymbol(_inputBuffer,  start,  ptr  -  start);	  _symbols.findSymbol(_inputBuffer,    start,    ptr);    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
58	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr  -  1];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr  -  1];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[ptr  -  1];	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
59	[BUG]  [BUGGY]  int  hash  =  _inputPtr  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputPtr  +  2;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputPtr  +  2;	  int    hash    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
60	[BUG]  [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length  -  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length  -  1;	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
61	[BUG]  [BUGGY]  int  hash  =  _hashSeed  /  4;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _hashSeed  /  4;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _hashSeed  /  4;	  int    hash    =    _hashSeed    /    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
62	[BUG]  [BUGGY]  int  hash  =  _hashSeed  *  1L;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _hashSeed  *  1L;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _hashSeed  *  1L;	  int    hash    =    _hashSeed    +    1L;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
63	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!Character.isWhitespace(ptr)&&  Character.isDigit(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(!Character.isWhitespace(ptr)&&  Character.isDigit(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  _inputEnd)  {  if(!Character.isWhitespace(ptr)&&  Character.isDigit(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(!Character.isWhitespace(ptr))    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
64	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!Character.isWhitespace(ptr)&&!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(!Character.isWhitespace(ptr)&&!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  _inputEnd)  {  if(!Character.isWhitespace(ptr)&&!Character.isWhitespace(ptr))  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(!Character.isWhitespace(ptr))    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
65	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }	  if(ptr    <    _inputEnd)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  _inputEnd)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    hash);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  if(ptr  <  hash)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  hash)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  hash)  {  if(ch  ==  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
68	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(ch  >=  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(ch  >=  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  _inputEnd)  {  if(ch  >=  ' "')  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  }	  if(ptr    <    _inputEnd)    {    if(ch    ==    '   "')    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr    +    1);    }    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  int  hash  =(_symbols!=  null)?  _symbols.length  :  _symbols.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =(_symbols!=  null)?  _symbols.length  :  _symbols.length;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =(_symbols!=  null)?  _symbols.length  :  _symbols.length;	  int    hash    =    _symbols.length;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
70	[BUG]  [BUGGY]  int  hash  =  _inputPtr.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputPtr.length;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputPtr.length;	  int    hash    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
71	[BUG]  [BUGGY]  char  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  char  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr];  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	char  hash  =(ptr  <  _inputEnd)?  0  :  _inputBuffer[ptr];	  int    hash    =(_inputPtr    <    _inputEnd)?    0    :    _inputBuffer[ptr];    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
72	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    <    _inputEnd)    {    if(!_bufferRecyclable.equals(_inputBuffer,    _inputPtr))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
73	[BUG]  [BUGGY]  if(ptr  <  0)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  if(ptr  <  0)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	if(ptr  <  0)  {  if(!_bufferRecyclable.equals(_inputBuffer,  _inputPtr))  {  throw  new  IllegalArgumentException( " ");  }	  if(ptr    <    _inputEnd)    {    if(!_bufferRecyclable.equals(_inputBuffer,    _inputPtr))    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
74	[BUG]  [BUGGY]  int  hash  =  _hashSeed  *  2;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _hashSeed  *  2;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _hashSeed  *  2;	  int    hash    =    _hashSeed    +    2;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
75	[BUG]  [BUGGY]  int  hash  =  _inputEnd  /  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {    int  ptr  =  _inputPtr;      [BUGGY]  int  hash  =  _inputEnd  /  1;  [BUGGY]      final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1594	1594	1	replace	int  hash  =  _inputEnd  /  1;	  int    hash    =    _hashSeed    /    1;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
