bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.getName()  + "'  in  case  of  type  ' "+_nameInputCol.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.getName()  + "'  in  case  of  type  ' "+_nameInputCol.toString());  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Unexpected  value  ' "  +  _nameInputCol.getName()  + "'  in  case  of  type  ' "+_nameInputCol.toString());	  _reportError(   "Unexpected    value    '   "    +    _nameInputCol.toString()    +   "'    in    case    of    type    '   "+_nameInputCol.toString());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
2	[BUG]  [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + ",'  in  case  of  type  ' "+_nameInputCol.toString());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + ",'  in  case  of  type  ' "+_nameInputCol.toString());  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + ",'  in  case  of  type  ' "+_nameInputCol.toString());	  _reportError(   "Unexpected    value    '   "    +    _nameInputCol.toString()    +   "'    in    case    of    type    '   "+_nameInputCol.toString());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
3	[BUG]  [BUGGY]  if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    hash);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
4	[BUG]  [BUGGY]  if(_nameInputCol  ==  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_nameInputCol  ==  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_nameInputCol  ==  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    hash);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
5	[BUG]  [BUGGY]  if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    hash);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
6	[BUG]  [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  len  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  len  +  1);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  len  +  1);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
7	[BUG]  [BUGGY]  char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  len);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  len);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  len);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
8	[BUG]  [BUGGY]  String  ptr  =  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  _inputBuffer[_inputPtr];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  _inputBuffer[_inputPtr];	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
9	[BUG]  [BUGGY]  String  ptr  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  _inputBuffer[_inputPtr++];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  _inputBuffer[_inputPtr++];	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
10	[BUG]  [BUGGY]  String  ptr  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  _inputEnd;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  _inputEnd;	  char    ptr    =    _inputEnd;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
11	[BUG]  [BUGGY]  char  ptr  =  _inputEnd  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  char  ptr  =  _inputEnd  +  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	char  ptr  =  _inputEnd  +  1;	  char    ptr    =    _inputEnd;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
12	[BUG]  [BUGGY]  Character  ptr  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Character  ptr  =  _inputEnd;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Character  ptr  =  _inputEnd;	  char    ptr    =    _inputEnd;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
13	[BUG]  [BUGGY]  if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
14	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
15	[BUG]  [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
16	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer.length  +  2;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer.length  +  2;	  int    ptr    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
17	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer.length();  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer.length();	  int    ptr    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
18	[BUG]  [BUGGY]  String  ptr  =  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  _inputBuffer.length;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  _inputBuffer.length;	  char    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  char  ptr  =  _inputBuffer.length  -  1;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  char  ptr  =  _inputBuffer.length  -  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	char  ptr  =  _inputBuffer.length  -  1;	  char    ptr    =    _inputBuffer.length;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr  +  1];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer[_inputPtr  +  1];	  int    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
21	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr]  +  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr]  +  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer[_inputPtr]  +  1;	  int    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
22	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length[_inputPtr];  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer.length[_inputPtr];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer.length[_inputPtr];	  int    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
23	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length  -  4;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer.length  -  4;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer.length  -  4;	  int    ptr    =    _inputBuffer.length    -    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
24	[BUG]  [BUGGY]  Character  ptr  =  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Character  ptr  =  _inputBuffer[_inputPtr];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Character  ptr  =  _inputBuffer[_inputPtr];	  Character    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
25	[BUG]  [BUGGY]  Character  ptr  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Character  ptr  =  _inputBuffer[_inputPtr++];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Character  ptr  =  _inputBuffer[_inputPtr++];	  Character    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
26	[BUG]  [BUGGY]  Character  ptr  =  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Character  ptr  =  _inputBuffer.length;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Character  ptr  =  _inputBuffer.length;	  Character    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
27	[BUG]  [BUGGY]  Character  ptr  =  _inputPtr  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Character  ptr  =  _inputPtr  +  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Character  ptr  =  _inputPtr  +  1;	  Character    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
28	[BUG]  [BUGGY]  if(_parseName()  ==  null)  {  _parseName();  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_parseName()  ==  null)  {  _parseName();  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_parseName()  ==  null)  {  _parseName();  }	  _parseName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  if(_parseName()!=  null)  {  _parseName();  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_parseName()!=  null)  {  _parseName();  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_parseName()!=  null)  {  _parseName();  }	  _parseName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
30	[BUG]  [BUGGY]  if(_parseName()!=  null)  {  _parseName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_parseName()!=  null)  {  _parseName();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_parseName()!=  null)  {  _parseName();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  _parseName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
31	[BUG]  [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  ptr  +  1);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    ptr);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
32	[BUG]  [BUGGY]  char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  ptr);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  ptr);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  ptr);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    ptr);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
33	[BUG]  [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + ",'  of  type  ' "+_nameInputCol.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + ",'  of  type  ' "+_nameInputCol.toString());  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + ",'  of  type  ' "+_nameInputCol.toString());	  _reportError(   "Unexpected    value    '   "    +    _nameInputCol.toString()    +   "'    of    type    '   "+_nameInputCol.toString());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
34	[BUG]  [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.getName()  + "'  of  type  ' "+_nameInputCol.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.getName()  + "'  of  type  ' "+_nameInputCol.toString());  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Unexpected  value  ' "  +  _nameInputCol.getName()  + "'  of  type  ' "+_nameInputCol.toString());	  _reportError(   "Unexpected    value    '   "    +    _nameInputCol.toString()    +   "'    of    type    '   "+_nameInputCol.toString());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
35	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
36	[BUG]  [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(ptr  ==  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
37	[BUG]  [BUGGY]  String  ptr  =  _inputPtr  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  _inputPtr  +  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  _inputPtr  +  1;	  char    ptr    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  Char  ptr  =  _inputPtr  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Char  ptr  =  _inputPtr  +  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Char  ptr  =  _inputPtr  +  1;	  char    ptr    =    _inputPtr    +    1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  1);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  1);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
40	[BUG]  [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  0,  _inputPtr);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  0,  _inputPtr);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  0,  _inputPtr);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
41	[BUG]  [BUGGY]  char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  0);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  0);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	char  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  0);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
42	[BUG]  [BUGGY]  _throwInternal();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _throwInternal();  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_throwInternal();	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
43	[BUG]  [BUGGY]  _reportError( "Unsupported  String  name ");  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Unsupported  String  name ");  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Unsupported  String  name ");	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
44	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length  -  1  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer.length  -  1  +  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer.length  -  1  +  1;	  int    ptr    =    _inputBuffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
45	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer.length;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
46	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr];	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
47	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputBuffer[_inputPtr++];	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
48	[BUG]  [BUGGY]  char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputPtr;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputPtr;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	char  ptr  =(_inputPtr  <  _inputEnd)?  0  :  _inputPtr;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
49	[BUG]  [BUGGY]  int  ptr  =  _inputEnd.length  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputEnd.length  -  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputEnd.length  -  1;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
50	[BUG]  [BUGGY]  int  ptr  =  _inputEnd.length  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputEnd.length  +  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputEnd.length  +  1;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
51	[BUG]  [BUGGY]  int  ptr  =  _inputEnd.length  -  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputEnd.length  -  2;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputEnd.length  -  2;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
52	[BUG]  [BUGGY]  char  ptr  =  _inputStart  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  char  ptr  =  _inputStart  +  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	char  ptr  =  _inputStart  +  1;	  int    ptr    =    _inputStart    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
53	[BUG]  [BUGGY]  _parseName(null,  null);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _parseName(null,  null);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_parseName(null,  null);	  _parseName(null);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
54	[BUG]  [BUGGY]  _parseName(name);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _parseName(name);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_parseName(name);	  _parseName(null);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
55	[BUG]  [BUGGY]  String  ptr  =  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  0;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  0;	  char    ptr    =    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
56	[BUG]  [BUGGY]  Character  ptr  =  0;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Character  ptr  =  0;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Character  ptr  =  0;	  char    ptr    =    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
57	[BUG]  [BUGGY]  char  ptr  =  _inputPtr  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  char  ptr  =  _inputPtr  +  2;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	char  ptr  =  _inputPtr  +  2;	  int    ptr    =    _inputPtr    +    2;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
58	[BUG]  [BUGGY]  Char  ptr  =  _inputBuffer[_inputPtr];  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Char  ptr  =  _inputBuffer[_inputPtr];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Char  ptr  =  _inputBuffer[_inputPtr];	  Char    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
59	[BUG]  [BUGGY]  Char  ptr  =  _inputBuffer[_inputPtr++];  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Char  ptr  =  _inputBuffer[_inputPtr++];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Char  ptr  =  _inputBuffer[_inputPtr++];	  Char    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
60	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[0];  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer[0];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer[0];	  int    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
61	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr  -  1];  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr  -  1];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer[_inputPtr  -  1];	  int    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
62	[BUG]  [BUGGY]  if(_bufferRecyclable)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_bufferRecyclable)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_bufferRecyclable)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
63	[BUG]  [BUGGY]  if(_symbols!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_symbols!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_symbols!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
64	[BUG]  [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  _inputPtr);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  _inputPtr);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  _inputPtr);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    len);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
65	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length  -  1L;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer.length  -  1L;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer.length  -  1L;	  int    ptr    =    _inputBuffer.length    -    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
66	[BUG]  [BUGGY]  if(_bufferRecyclable)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_bufferRecyclable)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_bufferRecyclable)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
67	[BUG]  [BUGGY]  if(_symbols!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_symbols!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_symbols!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
68	[BUG]  [BUGGY]  Char  ptr  =  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Char  ptr  =  0;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Char  ptr  =  0;	  char    ptr    =    0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
69	[BUG]  [BUGGY]  Char  ptr  =  _inputEnd;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Char  ptr  =  _inputEnd;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Char  ptr  =  _inputEnd;	  char    ptr    =    _inputEnd;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
70	[BUG]  [BUGGY]  _symbols.parseName();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _symbols.parseName();  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_symbols.parseName();	  _parseName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
71	[BUG]  [BUGGY]  _parseName(null,  false);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _parseName(null,  false);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_parseName(null,  false);	  _parseName(null);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
72	[BUG]  [BUGGY]  int  ptr  =  _inputStart.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputStart.length;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputStart.length;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
73	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length  /  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer.length  /  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer.length  /  1;	  int    ptr    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
74	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer.length  *  1;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer.length  *  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer.length  *  1;	  int    ptr    =    _inputBuffer.length    +    1;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
75	[BUG]  [BUGGY]  Character  ptr  =  _inputBuffer;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Character  ptr  =  _inputBuffer;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Character  ptr  =  _inputBuffer;	  Character    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
76	[BUG]  [BUGGY]  String  ptr  =  _inputBuffer[_inputPtr  +  1];  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  _inputBuffer[_inputPtr  +  1];  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  _inputBuffer[_inputPtr  +  1];	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
77	[BUG]  [BUGGY]  int  ptr  =  _inputEnd  -  1;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputEnd  -  1;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputEnd  -  1;	  int    ptr    =    _inputEnd    +    1;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  0;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =(_inputPtr  <  _inputEnd)?  1  :  0;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
79	[BUG]  [BUGGY]  int  ptr  =  _inputStart  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputStart  +  2;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputStart  +  2;	  int    ptr    =    _inputStart    +    1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
80	[BUG]  [BUGGY]  String  ptr  =  _symbols.findName(_inputBuffer,  start,  _inputPtr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  _symbols.findName(_inputBuffer,  start,  _inputPtr);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  _symbols.findName(_inputBuffer,  start,  _inputPtr);	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  String  ptr  =  _symbols.findName(_inputBuffer,  start,  len);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  String  ptr  =  _symbols.findName(_inputBuffer,  start,  len);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	String  ptr  =  _symbols.findName(_inputBuffer,  start,  len);	  String    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  hash);  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  hash);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(ptr  >=  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  hash);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    hash);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
83	[BUG]  [BUGGY]  if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  hash);  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  hash);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(_nameInputCol!=  null)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  hash);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    hash);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
84	[BUG]  [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + "'  of  type  ' "+_symbols.toString());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + "'  of  type  ' "+_symbols.toString());  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + "'  of  type  ' "+_symbols.toString());	  _reportError(   "Unexpected    value    '   "    +    _nameInputCol.toString()    +   "'    of    type    '   "+_nameInputCol.toString());    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  _reportError( "Current  token( "+_nameInputCol+ ")not  an  instance  of  type "+_inputName());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Current  token( "+_nameInputCol+ ")not  an  instance  of  type "+_inputName());  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Current  token( "+_nameInputCol+ ")not  an  instance  of  type "+_inputName());	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
86	[BUG]  [BUGGY]  _reportError( "Current  token( "+_nameInputCol+ ")not  an  instance  of  type "+_class.getName());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Current  token( "+_nameInputCol+ ")not  an  instance  of  type "+_class.getName());  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Current  token( "+_nameInputCol+ ")not  an  instance  of  type "+_class.getName());	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
87	[BUG]  [BUGGY]  _reportError( "Current  token( "+_nameInputCol+ ")not  supported  by "+_nameInputCol);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Current  token( "+_nameInputCol+ ")not  supported  by "+_nameInputCol);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Current  token( "+_nameInputCol+ ")not  supported  by "+_nameInputCol);	  _reportUnsupportedOperation();    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
88	[BUG]  [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  ptr);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_symbols.findSymbol(_inputBuffer,  start,  ptr);	  _parseName(null);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
89	[BUG]  [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  hash);  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _symbols.findSymbol(_inputBuffer,  start,  hash);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_symbols.findSymbol(_inputBuffer,  start,  hash);	  _parseName(null);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  Character  ptr  =  _symbols.findChars(_inputBuffer,  start,  _inputPtr);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Character  ptr  =  _symbols.findChars(_inputBuffer,  start,  _inputPtr);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Character  ptr  =  _symbols.findChars(_inputBuffer,  start,  _inputPtr);	  Character    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
91	[BUG]  [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  4);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  4);  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _symbols.findSymbol(_inputBuffer,  start,  4);	  int    ptr    =    _symbols.findSymbol(_inputBuffer,    start,    0);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
92	[BUG]  [BUGGY]  int  ptr  =(_inputPtr  <  0)?  0  :  _inputPtr;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =(_inputPtr  <  0)?  0  :  _inputPtr;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =(_inputPtr  <  0)?  0  :  _inputPtr;	  int    ptr    =(_inputPtr    <    _inputEnd)?    0    :    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
93	[BUG]  [BUGGY]  _finishString();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _finishString();  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_finishString();	  _parseName();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
94	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr]  &  0xff;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr]  &  0xff;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer[_inputPtr]  &  0xff;	  int    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
95	[BUG]  [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr]  &  0xFF;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputBuffer[_inputPtr]  &  0xFF;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputBuffer[_inputPtr]  &  0xFF;	  int    ptr    =    _inputBuffer[_inputPtr];    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
96	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findName(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findName(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
97	[BUG]  [BUGGY]  int  ptr  =  _inputPtr.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  _inputPtr.length;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  _inputPtr.length;	  int    ptr    =    _inputEnd.length;    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
98	[BUG]  [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	if(ptr  <  _inputEnd)  {  if(!_tokenIncomplete)  {  return  _symbols.findSymbol(_inputBuffer,  start,  ptr);  }	  if(_nameInputCol    ==    null)    {    if(!_tokenIncomplete)    {    return    _symbols.findSymbol(_inputBuffer,    start,    ptr);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
99	[BUG]  [BUGGY]  int  ptr  =  startPtr  +  2;  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  int  ptr  =  startPtr  +  2;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	int  ptr  =  startPtr  +  2;	  int    ptr    =    _inputPtr    +    2;    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
100	[BUG]  [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + "'  in  case  of  type  ' "+_symbols.toString());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  _reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + "'  in  case  of  type  ' "+_symbols.toString());  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	_reportError( "Unexpected  value  ' "  +  _nameInputCol.toString()  + "'  in  case  of  type  ' "+_symbols.toString());	  _reportError(   "Unexpected    value    '   "    +    _nameInputCol.toString()    +   "'    in    case    of    type    '   "+_nameInputCol.toString());    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
101	[BUG]  [BUGGY]  Char  ptr  =  _inputBuffer.length;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      protected  final  String  _parseName()  throws  IOException  {        [BUGGY]  Char  ptr  =  _inputBuffer.length;  [BUGGY]      int  hash  =  _hashSeed;  final  int[]  codes  =  _icLatin1;  while  (ptr  <  _inputEnd)  {  int  ch  =  _inputBuffer[ptr];  if  (ch  <  codes.length  &&  codes[ch]  !=  0)  {  if  (ch  ==  '     "')  {  int  start  =  _inputPtr;  _inputPtr  =  ptr+1;  //  to  skip  the  quote  return  _symbols.findSymbol(_inputBuffer,  start,  ptr  -  start,  hash);  [CLASS]  ReaderBasedJsonParser  [METHOD]  _parseName  [RETURN_TYPE]  String  [VARIABLES]  boolean  _bufferRecyclable  _tokenIncomplete  bufferRecyclable  eof  inObject  neg  negative  Reader  _reader  r  int[]  _icLatin1  codes  ObjectCodec  _objectCodec  c  codec  CharsToNameCanonicalizer  _symbols  st  int  _hashSeed  _nameInputCol  _nameInputRow  bits  ch  count  decodedData  defaultValue  end  expLen  features  fractLen  hash  i  id  inputLen  intLen  len  nameLen  offset  origPtr  outPtr  outputCount  outputEnd  outputPtr  ptr  start  startPtr  long  _nameInputTotal  defaultValue  char[]  _inputBuffer  buf  inputBuffer  nameChars  outBuf  	projects/JacksonCore12/src/main/java/com/fasterxml/jackson/core/json/ReaderBasedJsonParser.java	1.0	1593	1593	1	replace	Char  ptr  =  _inputBuffer.length;	  Char    ptr    =    _inputPtr;    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
