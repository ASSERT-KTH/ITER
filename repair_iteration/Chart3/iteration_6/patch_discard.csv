patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  2.0;    ,this.minY = Double.NaN % 2.0;
patch is same with buggy,1269,replace,, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a  +  2))  {    ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) {
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
patch is same with buggy,1269,replace,, if(Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isNaN(a  *  b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isNaN(a * b)) {
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.equals(c)&&  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.equals(item.getPeriod())|| item.getPeriod().getClass().equals(" ")) {
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.equals(c)&&  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.equals(item.getPeriod()) || item.getPeriod().getClass().equals(" ")) {
patch is same with buggy,634,replace,, if(!added)  {  this.data.add(item);  }    ,if(!added) { this.data.add(item); }
compilation error,634,replace,[CE] cannot find symbol added, if(!added)  {  this.data.add(item);  }    ,if(this.added) { this.data.add(item); }
compilation error,634,replace,[CE] cannot find symbol d, if(!added)  {  this.data.add(item);  }    ,if(!added) { this.data.add(d); }
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  any,  as  this  //  happens  next  anyway;    ,removeAgedItems(false);// remove old items if needed, but // won't notify any, as this // happens next anyway;
compilation error,1064,add,[CE] not a statement,   ,if(clone == null) { copy.add(item); bodied else if(item!= null) { copy.add(item); }
compilation error,1064,add,[CE] illegal start of expression,   ,if(clone == null) { copy.add(item);!= else if(item!= null) { copy.add(item); }
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  wouldn't  notify  any,  as  that  //  happens  next  anyway;    ,removeAgedItems(false);// remove old items if needed, but // wouldn't notify any, as that // happens next anyway;
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  *  2.0;    ,this.minX = Double.NaN * 2 / 4;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); bodied ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  any,  as  that  //  happens  next  anyway;    ,removeAgedItems(false);// remove old items if needed, but // won't notify any, as that // happens next anyway;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // won't notify any, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // won't notify any, as that // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // won't notify any, as that // happens next anyway; }!
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 4 + 1;
patch is same with buggy,188,replace,, this.maxY  =  minY  /  2;    ,this.maxY = minY / 2;
compilation error,188,add,[CE] cannot find symbol maxX,   ,this.maxX = Double.NaN - 1;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  1000;    ,this.minY = Double.NaN % 1000;
compilation error,188,replace,[CE] cannot find symbol MinY, this.minY  =  maxY  +  1;    ,this.minY = MinY + 1;
patch is same with buggy,188,replace,, this.minY  =  maxY  +  1;    ,this.minY = maxY + 1;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  20.0;    ,this.minY = Double.NaN % 20.0;
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  1000;    ,this.minY = Double.NaN % 1000;
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)|| item.getPeriod().getClass().equals(" ")) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)|| item.getPeriod().getClass().equals( " ")) {
compilation error,584,add,[CE] unclosed string literal,   ,else if(!this.timePeriodClass.isAssignableFrom(c)|| item.getPeriod().getClass().equals(")) {
compilation error,634,add,[CE] illegal start of expression,   ,if(added) { fireSeriesChanged(); >>
compilation error,634,add,[CE] ';' expected,   ,if(added) { fireSeriesChanged(); bodied
patch is same with buggy,188,replace,, this.minY  =  minY;  this.maxY  =  maxY;    ,this.minY = minY; this.maxY = maxY;
compilation error,188,replace,[CE] cannot find symbol MinY, this.minY  =  minY;  this.maxY  =  maxY;    ,this.minY = MinY; this.maxY = maxY;
compilation error,188,replace,[CE] cannot find symbol maximumY, this.minY  =  minY;  this.maxY  =  maxY;    ,this.minY = minY; this.maxY = maximumY;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2L + 1;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  /  100;    ,this.minY = Double.NaN / 100;
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChange
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChange
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException( " "); } if(notify) { fireSeriesChange
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isNaN(a * b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isNaN(a * b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isNaN(b)|| Double.isNaN(a * b)) {
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range!= null) { this.timePeriodClass = getTimePeriodClass(); if(range == null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range!= null) { this.timePeriodClass = getTimePeriodClass(); if(range!= null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range == null) { this.timePeriodClass = getTimePeriodClass(); if(range == null) { this.timePeriodClass = getTimePeriodClass(); }
patch is same with buggy,1064,replace,, if(clone!=  null)  {  copy.add(clone);  }  else  if(item  ==  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); } else if(item == null) { copy.add(item); }
compilation error,188,replace,[CE] bad operand types for binary operator '-', this.maxY  =  minY  -  1;    ,this.maxY = range - 1;
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  anyone,  as  that  //  happens  next  anyway;    ,removeAgedItems(false);// remove old items if needed, but // won't notify anyone, as that // happens next anyway;
compilation error,634,replace,[CE] incompatible types, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  anyone,  as  that  //  happens  next  anyway;    ,if(removeAgedItems(false)) throw new IllegalArgumentException("");// remove old items if needed, but // won't notify anyone, as that // happens next anyway;
compilation error,1273,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b);!= else if(Double.isNaN(b)) { return Math.max(a, b); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L  +  1;    ,this.minY = Double.NaN / 2 + 1;
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  /  2L  +  1;    ,this.minY = Double.NaN / 2L + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L  +  1;    ,this.minY = Double.NaN / 2;
compilation error,188,replace,[CE] illegal start of expression, if(domain  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,[Delete]
patch is same with buggy,188,replace,, if(domain  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(domain == null) { this.timePeriodClass = getTimePeriodClass(); } else if(range!= null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  /  100;    ,this.minX = Double.NaN % 200;
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(false); // remove old items if needed, but // wouldn't notify anybody
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(false); // remove old items if needed, but // wouldn't notify anyone
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(false); // remove old items if needed, but // wouldn't notify
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  *  6;    ,this.minX = Double.NaN * 2 / 2 + 1;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2D + 1;
compilation error,194,add,[CE] cannot find symbol miniX,   ,this.miniX = Double.NaN / 2D + 1;
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.equals(c)&&  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.equals(c)&& item.getPeriod().getClass().equals("")) {
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 1)) {
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,[Delete]
patch is same with buggy,188,replace,, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,if(domain!= null) { this.timePeriodClass = getTimePeriodClass(); } else if(range!= null) { this.range = range; }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(d.getSeriesCount() > 1) { if(!added) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(!added) { fireSeriesChanged(); } ; // removeAgedItems(false); } ;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(d.getItemCount() > 1) { if(!added) { fireSeriesChanged(); }
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeries
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException( " "); } if(notify) { fireSeries
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); >> if(notify) { fireSeries
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  100;    ,this.minY = Double.NaN * 100;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } 
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)||
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)) {
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway.....    ,removeAgedItems(false);// remove old items if needed, but // don't notify any, because that // happens next anyway.....
patch is same with buggy,188,replace,, this.maxY  =  maxY  +  2;    ,this.maxY = maxY + 2;
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)|| Double.isInfinite(a + b)) }
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(false); // remove old items if needed, but // wouldn't notify anyone
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(false); // remove old items if needed, but // wouldn't notify
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(false); // remove old items if needed, but // wouldn't notify anyone, because
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,removeAgedItems(false);// remove old items if needed, but // don't notify anyone, as this // happens next anyway;
compilation error,634,replace,[CE] , removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,if(!removeAgedItems(false)) throw new IllegalArgumentException("");// remove old items if needed, but // don't notify anyone, as this // happens next anyway;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 5;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 12.0;
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN / 12.0;
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)||
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)) {
compilation error,1269,replace,[CE] <identifier> expected, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  *  6;    ,this.minX = Double.NaN * 7 + 1;
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSerie    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSerie
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSerie    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException( " "); } if(notify) { fireSerie
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSerie    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); >> if(notify) { fireSerie
patch is same with buggy,188,replace,, this.minY  =  Double.NaN  -  1;    ,this.minY = Double.NaN - 1;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 100;
compilation error,1064,add,[CE] not a statement,   ,if(clone!= null) { copy.add(clone); bodied else if(item == null) { copy.add(item); }
compilation error,1064,add,[CE] illegal start of expression,   ,if(clone!= null) { copy.add(clone); >> else if(item == null) { copy.add(item); }
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  10.0;    ,this.minY = Double.NaN % 10.0;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  20.0;    ,this.minY = Double.NaN % 20.0;
patch is same with buggy,188,replace,, this.maxY  =  maxY  /  2;    ,this.maxY = maxY / 2;
patch is same with buggy,634,replace,, if(added)  {  fireSeriesChanged();  }    ,if(added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] cannot find symbol add, if(added)  {  fireSeriesChanged();  }    ,if(add) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(added)  {  fireSeriesChanged();  }    ,if(!added) { fireSeriesChanged(); }
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  /  100;    ,this.minX = Double.NaN % 1000;
compilation error,188,add,[CE] incompatible types,   ,this.timePeriodClass = new java.util.ArrayList();
compilation error,188,add,[CE] incompatible types,   ,this.timePeriodClass = new java.util.ArrayList(); this.minY = minY; this.maxY = maxY;
compilation error,188,add,[CE] incompatible types,   ,this.timePeriodClass = new java.util.ArrayList(); this.minimumItemCount = Integer.MAX_VALUE;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; // removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; // removeAgedItems(false);
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; // removeAgedItems(false
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // won't notify anyone, as that // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // won't notify anyone, as that // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // won't notify anyone, as that // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN % 2.0;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN % 20.0;
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  anyone,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // wouldn't notify any, as that // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  anyone,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // wouldn't notify any, as that // happens next anyway; }!
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  anyone,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // wouldn't notify any, as that's next anyway; }!
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // do't notify any, as this // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // do't notify any, as this // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove items if needed, but // do't notify any, as this // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  *  100;    ,this.minX = Double.NaN * 4;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); &/ remove old items if needed, but // don't notify anyone, because that // happens next anyway......
patch is same with buggy,1064,replace,, if(clone  ==  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone == null) { copy.add(item); } else if(item!= null) { copy.add(item); }
compilation error,1064,replace,[CE] illegal start of expression, if(clone  ==  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(item); } else if(item!= null) { copy.add(item); >>
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove items if needed, but // don't notify anyone, because that // happens next anyway......
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove old items if needed, but // don't notify anyone, because that // happens next anyway......
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove items if needed, but // don't notify anybody, because that // happens next anyway......
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify anyone, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify anyone, as that // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify anyone, as that // happens next anyway; } if(notify) { fireSeriesChanged(); } 
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 100;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  7  +  1;    ,this.minY = Double.NaN * 7 + 1;
patch is same with buggy,188,replace,, this.maxY  =  maxY  -  1;    ,this.maxY = maxY - 1;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; // removeAgedItems(false
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; // removeAgedItems(
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; // removeAgedItems(false);
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4;    ,this.minY = Double.NaN * 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4;    ,this.minY = Double.NaN / 4;
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  *  4;    ,this.minY = Double.NaN * 4;
patch is same with buggy,188,replace,, this.minY  =  minY  /  2;    ,this.minY = minY / 2;
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  *  2  /  1;    ,this.maxY = Double.NaN * 2 / 1;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 6;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify any, as this // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify any, as this // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify any, as this // happens next anyway; }!
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(!added) { fireSeriesChanged(); } ; // removeAgedItems(false); } ;
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(!added) { fireSeriesChanged(); bodied ; // removeAgedItems(false); } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(!added) { fireSeriesChanged(); } ; // removeAgedItems(false); } ;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  1.0;    ,this.minY = Double.NaN * 1.0;
compilation error,188,replace,[CE] illegal start of expression, this.timePeriodClass  =  getTimePeriodClass();  if(range  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range!= null) { this.timePeriodClass = getTimePeriodClass(); if(range == null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,188,replace,[CE] illegal start of expression, this.timePeriodClass  =  getTimePeriodClass();  if(range  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range!= null) { this.timePeriodClass = getTimePeriodClass(); if(range!= null) { this.timePeriodClass = getTimePeriodClass(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSerie
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeries
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException( " "); } if(notify) { fireSerie
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway......    ,removeAgedItems(false);// remove old items if needed, but // don't notify anyone, because that // happens next anyway......
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  *  6;    ,this.minX = Double.NaN * 7 + Integer.MIN_VALUE;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN + 3;
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  this  //  happens  next  anyway;    ,removeAgedItems(false);// remove old items if needed, but // don't notify any, as this // happens next anyway;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  3;    ,this.minY = Double.NaN + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  3;    ,this.minY = Double.NaN / 3;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  3;    ,this.minY = Double.NaN;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN - 2;
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN - 2;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // do not notify anybody, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // do not notify anybody, as that // happens next anyway; } if(notify) { fireSeriesChanged(); } 
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // do not notify anybody, as that // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // won't notify any, as this // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // won't notify any, as this // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove items if needed, but // won't notify any, as this // happens next anyway; }
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  *  2.0;    ,this.minX = Double.NaN * 1.0;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  2.0;    ,this.minY = Double.NaN * 2.0;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 4;
patch is same with buggy,188,replace,, this.minY  =  Double.NaN  +  1;    ,this.minY = Double.NaN + 1;
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  *  1.0;    ,this.minX = Double.NaN * 1.5;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  1.5;    ,this.minY = Double.NaN * 1.5;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChange
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException(" ");
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); fiance ;! throw new IllegalArgumentException( " "); } if(notify) { fireSeriesChange
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  2.0;    ,this.minY = Double.NaN * 2.0;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4  +  1;    ,this.minY = Double.NaN * 4;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4  +  1;    ,this.minY = Double.NaN * 2 + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4  +  1;    ,this.minY = Double.NaN * 3 + 1;
compilation error,634,add,[CE] ,   ,if(!removeAgedItems(false)) throw new IllegalArgumentException("");// remove old items if needed, but // don't notify anyone, as that // happens next anyway;
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway....    ,removeAgedItems(false);// remove old items if needed, but // don't notify any, because that // happens next anyway....
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  12.0;    ,this.maxY = Double.NaN / 12.0;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 2 / 1;
compilation error,194,add,[CE] cannot find symbol miniX,   ,this.miniX = Double.NaN * 2 / 1;
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  wouldn't  notify  anybody,  because  that  //  happens  next  anyway;    ,removeAgedItems(false);// remove old items if needed, but // wouldn't notify anybody, because that // happens next anyway;
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  wouldn't  notify  anyone,  because  that  //  happens  next  anyway;    ,removeAgedItems(false);// remove old items if needed, but // wouldn't notify anyone, because that // happens next anyway;
compilation error,634,replace,[CE] , removeAgedItems(false);//  remove  old  items  if  needed,  but  //  wouldn't  notify  anyone,  because  that  //  happens  next  anyway;    ,if(!removeAgedItems(false)) throw new IllegalArgumentException("");// remove old items if needed, but // wouldn't notify anyone, because that // happens next anyway;
patch is same with buggy,188,replace,, this.minY  =  minY  /  2;    ,this.minY = minY / 2;
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,[Delete]
patch is same with buggy,188,replace,, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(domain!= null) { this.timePeriodClass = getTimePeriodClass(); } else if(range!= null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN % 3 + 1;
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)||  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)|| item.getPeriod().getClass().equals("")) {
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  2D  +  1;    ,this.maxY = Double.NaN / 2D + 1;
compilation error,634,add,[CE] illegal start of expression,   ,if(!added) { this.data.add(item); >>
compilation error,634,add,[CE] illegal start of expression,   ,if(!added) } this.data.add(item); }
compilation error,188,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN - 1L;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; // removeAgedItems(false); }
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; // removeAgedItems(false);
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); } ; ;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b + 1)) }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) }
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  *  100;    ,this.minX = Double.NaN * 2 / 3 + 1;
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }  else  if(Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,[Delete]
patch is same with buggy,1273,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }  else  if(Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); } else if(Double.isNaN(b)) { return Math.max(a, b); }
patch is same with buggy,1273,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }  else  if(Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); } else if(Double.isNaN(b)) { return Math.max(a, b); }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify anyone, as this // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify anyone, as this // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  this  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(false); // remove old items if needed, but // don't notify anyone, as this // happens next anyway; } if(notify) { fireSeriesChanged(); } 
patch is same with buggy,1269,replace,, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
patch is same with buggy,1269,replace,, if(Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isNaN(a  *  b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isNaN(a * b)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isNaN(a  *  b))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isNaN(a * b)) {
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,items.add(item);
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  10.0;    ,this.minY = Double.NaN % 10.0;
patch is same with buggy,188,replace,, this.maxY  =  Double.NaN  +  2;    ,this.maxY = Double.NaN + 2;
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
patch is same with buggy,188,replace,, this.minY  =  Double.NaN  +  2;    ,this.minY = Double.NaN + 2;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  1.5;    ,this.minY = Double.NaN * 1.5;
compilation error,193,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN * 100;
compilation error,188,replace,[CE] bad operand types for binary operator '/', this.maxY  =  maxY  /  1;    ,this.maxY = range / 1;
compilation error,188,replace,[CE] ';' expected, this.minY  =  Double.NaN  +  2;    ,this.maxY = Double.NaN -- 1L;
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }  else  if(Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,[Delete]
compilation error,1273,replace,[CE] class or interface expected, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }  else  if(Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,}
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }  else  if(Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,{
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  100;    ,this.minY = Double.NaN * 100;
compilation error,634,add,[CE] illegal start of expression,   ,if(isSeriesVisible()) { if(notify) { fireSeriesChanged(); }
compilation error,634,add,[CE] cannot find symbol getNotify,   ,if(getNotify) { fireSeriesChanged(); }
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  2.0;    ,this.minY = Double.NaN * 2.0;
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,188,add,[CE] no suitable method found for getDataItem(Comparable),   ,this.timePeriodClass = getDataItem(name);
compilation error,188,replace,[CE] bad operand types for binary operator '-', this.maxY  =  maxY  -  1;    ,this.maxY = range - 1;
patch is same with buggy,188,replace,, this.maxY  =  maxY  -  1;    ,this.maxY = maxY - 1;
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,[Delete]
compilation error,188,replace,[CE] illegal start of type, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,}
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,{
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  20.0;    ,this.minY = Double.NaN % 20.0;
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b  +  1))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b + 1)) {
compilation error,1269,replace,[CE] cannot find symbol c, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b  +  1))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)) {
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  as  this  //  happens  next  anyway;    ,items.add(item);
compilation error,1269,replace,[CE] cannot find symbol m, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(m)) {
compilation error,1269,replace,[CE] <identifier> expected, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a + b)|| Double.isInfinite(a + b)) {
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(""); } if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,&& item.getPeriod().setValue(getItemCount() - 1);
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(item == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,&& item.getPeriod().equals(getItemCount() - 1);
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  2.0;    ,this.minY = Double.NaN * 2.0;
compilation error,193,replace,[CE] cannot find symbol NaN, this.minY  =  Double.NaN  *  2.0;    ,this.minY = Long.NaN * 1.0;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(isSeriesVisible()) { if(notify) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(!added) { fireSeriesChanged(); } ;
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getPeriod().getClass().equals(" ")) {
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  12.0;    ,this.maxY = Double.NaN / 12.0;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(d == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  7  +  1;    ,this.minY = Double.NaN * 7 + 1;
patch is same with buggy,188,replace,, this.minY  =  Double.NaN  -  1;    ,this.minY = Double.NaN - 1;
compilation error,188,replace,[CE] illegal start of expression, this.timePeriodClass  =  getTimePeriodClass();  if(range  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range == null) { this.timePeriodClass = getTimePeriodClass(); if(range == null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,188,replace,[CE] 'else' without 'if', this.timePeriodClass  =  getTimePeriodClass();  if(range  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,else if(range == null) { this.timePeriodClass = getTimePeriodClass(); if(range == null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,188,replace,[CE] illegal start of expression, this.timePeriodClass  =  getTimePeriodClass();  if(range  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(timePeriodClass == null) { this.timePeriodClass = getTimePeriodClass(); if(range == null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,188,replace,[CE] cannot find symbol maximumY, this.maxY  =  minY  /  2;    ,this.maxY = maximumY / 2;
compilation error,188,replace,[CE] bad operand types for binary operator '/', this.maxY  =  minY  /  2;    ,this.maxY = range / 2;
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,193,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN / 100;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a * b)) {
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(!added) { fireSeriesChanged(); } ; // removeAgedItems(false); } ; } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(!added) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(!added) { fireSeriesChanged(); } ; // removeAgedItems(true); } ; }
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.equals(c)&&  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.equals(c)&& item.getPeriod().getClass().equals("")) {
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.equals(c)&&  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.equals(c)&& item.getPeriod().getClass().equals(" ")) {
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals("")) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(this.data.getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] cannot find symbol b,   ,b.setValue(item.getValue()); b.addChangeListener(this);
compilation error,1269,replace,[CE] cannot find symbol B, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a * B)) {
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  /  100;    ,this.minY = Double.NaN / 100;
patch is same with buggy,188,replace,, this.minY  =  minY  /  2;    ,this.minY = minY / 2;
compilation error,634,add,[CE] cannot find symbol,   ,if(added) { item.addChangeListener(this); }
compilation error,634,add,[CE] cannot find symbol,   ,if(added) { item.addChangeListener(this); } else { addChangeListener(item); }
increase failing tests,634,add, [FE] AssertionFailedError,   ,if(added) { this.data.add(item); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); figured
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); Afterward
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4;    ,this.minY = Double.NaN * 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4;    ,this.minY = Double.NaN * 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4;    ,this.minY = Double.NaN * 12;
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,[Delete]
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,if(this.timePeriodClass!= null) { this.timePeriodClass = getTimePeriodClass(); if(range!= null) { this.range = range; }
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  anyone,  as  that  //  happens  next  anyway;    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  anyone,  as  that  //  happens  next  anyway;    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  anyone,  as  that  //  happens  next  anyway;    ,items.add(item);
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); figured
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); Afterward
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(d == null) { if(notify) { fireSeriesChanged(); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  3;    ,this.minY = Double.NaN + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  3;    ,this.minY = Double.NaN;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  3;    ,this.minY = Double.NaN + 2;
compilation error,188,add,[CE] class expected,   ,this.minY = double.NaN - 1L;
compilation error,188,add,[CE] cannot find symbol maximumY,   ,this.maxY = maximumY / 2;
compilation error,1064,replace,[CE] ')' expected, if(clone  ==  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { if(copy.add(item); } else if(item!= null) { copy.add(item); }
compilation error,1064,replace,[CE] 'catch' without 'try', if(clone  ==  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { if(item == null) { copy.add(item); }
compilation error,584,replace,[CE] illegal start of type, else  if(!this.timePeriodClass.isAssignableFrom(c)||  item.getPeriod().getClass().equals( " "))  {    ,else if(this.timePeriodClass.equals(c)) { throw new SeriesException(""); }
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  -  2;    ,this.maxY = Double.NaN - 2;
patch is same with buggy,188,replace,, this.minY  =  maxY  +  1;    ,this.minY = maxY + 1;
compilation error,1273,add,[CE] illegal start of expression,   ,[Delete] else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,1273,add,[CE] 'else' without 'if',   ,} else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 12.0;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(item.getPeriod().equals(this.data.size())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(item.getPeriod().equals(this.data.getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(item == null) { if(!added) { fireSeriesChanged(); }
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 2 / 1;
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChanged(); } ;
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChanged(); }
compilation error,584,replace,[CE] illegal start of type, else  if(!this.timePeriodClass.isAssignableFrom(c)||  item.getPeriod().getClass().equals( " "))  {    ,else if(this.timePeriodClass.equals(item.getPeriod())&& item.getPeriod().getClass().equals(" ")) { throw new SeriesException(""); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4  +  1;    ,this.minY = Double.NaN * 2 + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4  +  1;    ,this.minY = Double.NaN * 4;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  4  +  1;    ,this.minY = Double.NaN * 2;
increase failing tests,634,add, [FE] AssertionFailedError,   ,if(added) { this.data.add(item); }
compilation error,634,add,[CE] method addChangeListener in class Series cannot be applied to given types;,   ,if(!added) { this.data.add(item); } else { addChangeListener(this); }
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,193,replace,[CE] ';' expected, this.minY  =  Double.NaN  %  2  *  1;    ,this.minY = Double.NaN % 2, this.maximumItemAge;
compilation error,193,replace,[CE] ';' expected, this.minY  =  Double.NaN  %  2  *  1;    ,this.minY = Double.NaN % 2, this.maximumItemAge);
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  1000;    ,this.minY = Double.NaN % 1000;
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway......    ,removeAgedItems(false);// remove old items if needed, but // don't notify anyone, because that // happens next anyway......
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(item == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(item.getPeriod().equals(getItemCount())) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ;
patch is same with buggy,634,replace,, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false);  &/  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(fals
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L  +  1;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L  +  1;    ,this.minY = Double.NaN / 2 + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L  +  1;    ,this.minY = Double.NaN / 2 * 1;
compilation error,634,add,[CE] illegal start of expression,   ,if(isSeriesVisible()) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a * b)) {
patch is same with buggy,634,replace,, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway......    ,removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because that // happens next anyway......
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isNaN(a * b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isNaN(a * b)) {
compilation error,188,replace,[CE] illegal start of expression, if(domain  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,[Delete]
compilation error,188,replace,[CE] illegal start of type, if(domain  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,}
compilation error,188,replace,[CE] illegal start of expression, if(domain  ==  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,{
compilation error,634,replace,[CE] illegal start of expression, if(added)  {  fireSeriesChanged();  }    ,[Delete]
patch is same with buggy,634,replace,, if(added)  {  fireSeriesChanged();  }    ,if(added) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(added)  {  fireSeriesChanged();  }    ,if(!added) { fireSeriesChanged(); }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(m + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c + 1)) {
compilation error,188,replace,[CE] bad operand types for binary operator '-', this.maxY  =  minY  -  1;    ,this.maxY = range - 1;
compilation error,188,replace,[CE] cannot find symbol maximumY, this.maxY  =  minY  -  1;    ,this.maxY = maximumY - 1;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); ;
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false    ,if(notify) { fireSeriesChanged(); slated ; // removeAgedItems(false); ;
compilation error,1064,add,[CE] 'catch' without 'try',   ,if(clone!= null) { if(item!= null) { copy.add(item); } else if(item!= null) { copy.add(item); }
compilation error,1064,add,[CE] 'catch' without 'try',   ,if(clone!= null) { if(item!= null) { copy.add(item); }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  *  b))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 1)) }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(item.getPeriod().equals("")) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeries    ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range == null) { if(!this.data.contains(name)) { this.data.add(name); }
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range == null) { if(timePeriodClass == TimeSeries.MIN_VALUE) { throw new IllegalArgumentException(""); }
compilation error,188,replace,[CE] illegal start of expression, if(domain!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range == null) { if(timePeriodClass == TimeSeries.MIN_VALUE) { throw new SeriesException(""); }
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
patch is same with buggy,188,replace,, this.minY  =  minY;  this.maxY  =  maxY;    ,this.minY = minY; this.maxY = maxY;
compilation error,188,replace,[CE] cannot find symbol maximumY, this.minY  =  minY;  this.maxY  =  maxY;    ,this.minY = minY; this.maxY = maximumY;
compilation error,188,replace,[CE] bad operand types for binary operator '&', this.minY  =  minY;  this.maxY  =  maxY;    ,this.minY = minY & this.maxY = maxY;
compilation error,188,add,[CE] incompatible types,   ,this.timePeriodClass = range;
compilation error,188,add,[CE] cannot find symbol,   ,this.data = new ArrayList();
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  this  //  happens  next  anyway;    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  this  //  happens  next  anyway;    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  this  //  happens  next  anyway;    ,items.add(item);
compilation error,188,add,[CE] incompatible types,   ,this.timePeriodClass = range;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)|| Double.isInfinite(a + b)) {
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
patch is same with buggy,188,replace,, this.minY  =  Double.NaN  +  1;    ,this.minY = Double.NaN + 1;
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  any,  as  that  //  happens  next  anyway;    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  any,  as  that  //  happens  next  anyway;    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  won't  notify  any,  as  that  //  happens  next  anyway;    ,items.add(item);
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,634,replace,[CE] cannot find symbol b, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,b.setValue(item.getValue()); b.addChangeListener(this);
compilation error,634,replace,[CE] cannot find symbol d, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,d.addChangeListener(this);
compilation error,634,replace,[CE] bad operand types for binary operator '-', if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSeriesChange    ,b.setItemCount(item.getPeriod() - 1); b.addChangeListener(this);
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,193,add,[CE] no suitable method found for isNaN(Comparable),   ,this.minY = Double.NaN * 6 +(Double.isNaN(name)|| Double.isNaN(range))? Double.NaN : Double.NaN;
compilation error,193,add,[CE] no suitable method found for isNaN(Comparable),   ,this.minY = Double.NaN * 6 +(Double.isNaN(name)|| Double.isNaN(range));
patch is same with buggy,188,replace,, this.maxY  =  maxY  /  2;    ,this.maxY = maxY / 2;
compilation error,634,replace,[CE] illegal start of expression, if(!added)  {  this.data.add(item);  }    ,[Delete]
patch is same with buggy,634,replace,, if(!added)  {  this.data.add(item);  }    ,if(!added) { this.data.add(item); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(!added)  {  this.data.add(item);  }    ,if(added) { this.data.add(item); }
patch is same with buggy,188,replace,, this.minY  =  minY  /  2;    ,this.minY = minY / 2;
patch is same with buggy,188,replace,, this.minY  =  minY  /  2;    ,this.minY = minY / 2;
compilation error,193,replace,[CE] ';' expected, this.minY  =  Double.NaN  *  8.0;    ,this.minY = Double.NaN * 2, + 1;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(m)) {
compilation error,1269,add,[CE] <identifier> expected,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  1.0;    ,this.minY = Double.NaN * 1.0;
compilation error,193,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN % 2.0;
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSerie    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(""); } if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSerie    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(" "); } if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  fiance  ;!  throw  new  IllegalArgumentException( " ");  }  if(notify)  {  fireSerie    ,if(notify) { fireSeriesChanged(); fiance ;! throw new IllegalArgumentException(""); } if(notify) { fireSeriesChanged(); } ;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  20.0;    ,this.minY = Double.NaN % 20.0;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  1000;    ,this.minY = Double.NaN % 1000;
patch is same with buggy,1064,replace,, if(clone!=  null)  {  copy.add(clone);  }  else  if(item  ==  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); } else if(item == null) { copy.add(item); }
compilation error,1064,replace,[CE] 'catch' without 'try', if(clone!=  null)  {  copy.add(clone);  }  else  if(item  ==  null)  {  copy.add(item);  }    ,if(clone.length == 0) { if(clone!= null) { copy.add(clone); } else if(item == null) { copy.add(item); }
increase failing tests,1064,replace, [FE]  Size, if(clone!=  null)  {  copy.add(clone);  }  else  if(item  ==  null)  {  copy.add(item);  }    ,if(clone == null) { copy.add(clone); } else if(item == null) { copy.add(item); }
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  2.0;    ,this.minY = Double.NaN % 2.0;
compilation error,193,add,[CE] cannot find symbol,   ,this.minY = Double.NaN + 6 * name.length();
compilation error,188,add,[CE] no suitable method found for getDataItem(Comparable),   ,this.data = getDataItem(name);
compilation error,188,add,[CE] cannot find symbol,   ,this.data = new ArrayList();
