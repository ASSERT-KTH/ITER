increase failing tests,1217,add, [FE] AssertionFailedError,   ,this.data.add(item);
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0)||(b <= 0.0)) {
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = createTimePeriodClass();
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = new TimePeriodClass();
patch is same with buggy,695,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data.size() - 1);
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.timePeriodClass);
patch is same with buggy,189,replace,, this.timePeriodClass  =  timePeriodClass;    ,this.timePeriodClass = timePeriodClass;
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  timePeriodClass;    ,this.timePeriodClass = new TimePeriodClass();
compilation error,189,replace,[CE] illegal start of expression, this.timePeriodClass  =  timePeriodClass;    ,this.timePeriodClass = class;
compilation error,694,add,[CE] cannot find symbol,   ,item.setPeriod(period);
compilation error,694,add,[CE] cannot find symbol,   ,item.setData(item);
compilation error,192,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN;
compilation error,192,add,[CE] cannot find symbol minItemCount,   ,this.minItemCount = Long.MAX_VALUE;
patch is same with buggy,1288,replace,, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)&& Double.isInfinite(b)) {
patch is same with buggy,190,replace,, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass();
compilation error,190,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = createTimePeriodClass();
compilation error,190,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getDatePeriodClass();
compilation error,186,add,[CE] call to super must be first statement in constructor,   ,super(domain);
compilation error,186,add,[CE] call to super must be first statement in constructor,   ,super(name, domain);
compilation error,186,add,[CE] call to super must be first statement in constructor,   ,super(domain, range);
compilation error,877,add,[CE] illegal start of expression,   ,if(this.getItemCount() > 1) {
compilation error,877,add,[CE] illegal start of expression,   ,if(getItemCount() > 1) {
compilation error,877,add,[CE] illegal start of expression,   ,if(!this.getItemCount() - 1) {
compilation error,1217,add,[CE] cannot find symbol,   ,item.setValue(yN); item.removeChangeListener(this);
compilation error,1217,add,[CE] cannot find symbol,   ,item.setValue(yN); item.setPeriod(this.maxY, yN);
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  -  1;    ,this.maxY = Double.NaN - 1;
compilation error,187,add,[CE] incompatible types,   ,this.timePeriodClass = new java.util.ArrayList();
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = TimeSeries.newInstance();
patch is same with buggy,1064,replace,, copy.add(clone);    ,copy.add(clone);
compilation error,1064,replace,[CE] cannot find symbol, copy.add(clone);    ,if(clone!= null) { copy.add(clone); } else { clone.add(item); }
compilation error,1064,replace,[CE] cannot find symbol length, copy.add(clone);    ,if(clone.length > 0) { copy.add(clone); } else { copy.add(item.clone()); }
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,582,add,[CE] cannot find symbol,   ,c = item.getTimePeriod().getClass();
compilation error,582,add,[CE] cannot find symbol C,   ,C = item.getPeriod().getClass();
compilation error,680,replace,[CE] cannot find symbol, add(period,  value,  false);    ,setValue(period, value, false);
patch is same with buggy,680,replace,, add(period,  value,  false);    ,add(period, value, false);
compilation error,878,replace,[CE] cannot find symbol latest, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(0).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol latest, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol latest, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(1).getSerialIndex();
compilation error,1289,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)) { return a;!= else if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1289,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)) { return a; >> else if(Double.isNaN(b)) { return Math.min(a, b); }
patch is same with buggy,187,replace,, this.domain  =  domain;  this.range  =  range;    ,this.domain = domain; this.range = range;
compilation error,694,replace,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;, item.setValue(value);    ,item.setValue(value, notify);
patch is same with buggy,694,replace,, item.setValue(value);    ,item.setValue(value);
compilation error,694,replace,[CE] cannot find symbol, item.setValue(value);    ,item.addValue(value);
patch is same with buggy,1296,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
patch is same with buggy,1296,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,1296,replace,[CE] not a statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; delt else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
patch is same with buggy,1265,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
patch is same with buggy,1212,replace,, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,if(yN!= null) { double y = yN.doubleValue(); item.setValue(item.getValue()); item.setValue(item.getValue()); }
patch is same with buggy,1212,replace,, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,if(yN!= null) { double y = yN.doubleValue(); item.setValue(item.getValue()); item.setValue(item.getValue()); }
compilation error,1212,replace,[CE] not a statement, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,if(yN!= null) { double y = yN.doubleValue(); item.setValue(item.getValue()); item.setValue(item.getValue()); figured
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN - 1;
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN - 1;
compilation error,634,replace,[CE] not a statement, removeAgedItems(true);//  remove  old  items  if  necessary,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because that
compilation error,634,replace,[CE] not a statement, removeAgedItems(true);//  remove  old  items  if  necessary,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because
compilation error,634,replace,[CE] not a statement, removeAgedItems(true);//  remove  old  items  if  necessary,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove items if needed, but // don't notify anyone, because that // happens next anyway
patch is same with buggy,1217,replace,, item.setValue(yN);  fireSeriesChanged();    ,item.setValue(yN); fireSeriesChanged();
compilation error,1217,replace,[CE] illegal start of expression, item.setValue(yN);  fireSeriesChanged();    ,item.setValue(yN, 0); fireSeriesChanged();
compilation error,1217,replace,[CE] illegal start of expression, item.setValue(yN);  fireSeriesChanged();    ,item.setValue(yN); this.data.add(item.getValue());
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,627,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" the time period");
compilation error,627,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append("The time period");
increase failing tests,170,add, [FE] ClassCastException,   ,this.data.add(name);
patch is same with buggy,1068,replace,, System.err.println( "Unable  to  add  cloned  data  item. "  +  clone.toString());    ,System.err.println("Unable to add cloned data item." + clone.toString());
compilation error,1068,replace,[CE] illegal start of expression, System.err.println( "Unable  to  add  cloned  data  item. "  +  clone.toString());    ,System.err.println("Unable to add cloned data item." + this.clone.toString());
patch is same with buggy,1068,replace,, System.err.println( "Unable  to  add  cloned  data  item. "  +  clone.toString());    ,System.err.println("Unable to add cloned data item." + clone.toString());
patch is same with buggy,193,replace,, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass();
compilation error,193,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = createTimePeriodClass();
compilation error,193,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getDatePeriodClass();
patch is same with buggy,1269,replace,, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getTimePeriodClass();
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getRange();
increase failing tests,189,replace, [FE] NullPointerException, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = domain.getClass();
compilation error,668,add,[CE] cannot find symbol,   ,item.addChangeListener(this);
compilation error,668,add,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;,   ,item.setValue(value);
compilation error,668,add,[CE] cannot find symbol,   ,item.addValue();
compilation error,626,replace,[CE] cannot find symbol added, if(notify)  {    ,if(this.added) {
compilation error,626,replace,[CE] notify has private access in Series, if(notify)  {    ,if(this.notify) {
compilation error,1212,add,[CE] not a statement,   ,if(yN!= null) { double y = yN.doubleValue(); item.setValue(item.getValue()); item.setValue(item.getValue()); bodied
compilation error,1212,add,[CE] illegal start of expression,   ,if(yN!= null) { double y = yN.doubleValue(); item.setValue(item.getValue()); item.setValue(item.getValue());
compilation error,1266,replace,[CE] not a statement, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(Double.isNaN(b)) { return a; fought else if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1266,replace,[CE] not a statement, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(Double.isNaN(b)) { return a; fought else if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1266,replace,[CE] not a statement, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(a > 0) { if(Double.isNaN(b)) { return a; bodied else if(Double.isNaN(b)) { return Math.min(a, b); }
increase failing tests,680,add, [FE] SeriesException,   ,add(period, value, true);
increase failing tests,680,add, [FE] SeriesException,   ,add(period, value, false);
increase failing tests,680,add, [FE] StackOverflowError,   ,add(period, value);
compilation error,189,add,[CE] cannot find symbol,   ,this.timePeriodClass = name.getRange();
compilation error,189,add,[CE] cannot find symbol,   ,this.timePeriodClass = name.getRowKey();
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
patch is same with buggy,606,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,606,replace,[CE] cannot find symbol, fireSeriesChanged();    ,updateSeriesDataItem(item);
compilation error,606,replace,[CE] cannot find symbol, fireSeriesChanged();    ,updateSeries(item);
compilation error,637,add,[CE] illegal start of expression,   ,if(!notify) {
compilation error,637,add,[CE] illegal start of expression,   ,if(!notify) {
compilation error,637,add,[CE] not a statement,   ,if(!notify) propagate
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN - 1;
compilation error,187,add,[CE] cannot find symbol timePeriodAge,   ,this.timePeriodAge = getTimePeriodAge();
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = getDomainPeriodClass();
patch is same with buggy,596,replace,, boolean  added  =  notify;    ,boolean added = notify;
compilation error,596,replace,[CE] notify has private access in Series, boolean  added  =  notify;    ,boolean added = this.notify;
patch is same with buggy,194,replace,, this.minY  =  Double.NaN;    ,this.minY = Double.NaN;
compilation error,194,replace,[CE] bad operand types for binary operator '!=', this.minY  =  Double.NaN;    ,if(this.minY!= null) { this.minY = Double.NaN; } else { this.maxY = Double.NaN; }
compilation error,194,replace,[CE] bad operand type double for unary operator '!', this.minY  =  Double.NaN;    ,if(!this.minY = Double.NaN) { this.minY = Double.NaN; } else { this.maxY = Double.NaN; }
increase failing tests,654,add, [FE] ClassCastException,   ,this.data.add(period);
compilation error,654,add,[CE] no suitable method found for add(RegularTimePeriod,Double),   ,this.data.add(period, new Double(value));
compilation error,654,add,[CE] no suitable method found for add(RegularTimePeriod,double),   ,this.data.add(period, value);
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1212,add,[CE] illegal start of expression,   ,if(yN!= null) {
compilation error,1212,add,[CE] illegal start of expression,   ,if(yN == null) {
compilation error,1212,add,[CE] ')' expected,   ,if(yN { null) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)
compilation error,637,add,[CE] illegal start of expression,   ,if(!added) {
compilation error,637,add,[CE] illegal start of expression,   ,if(!added) {
compilation error,637,add,[CE] illegal start of expression,   ,if(!added) }
compilation error,1292,replace,[CE] cannot find symbol c, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(c)) {
compilation error,637,replace,[CE] ')' expected, if(added)  {    ,if(not notify) {
compilation error,637,replace,[CE] 'else' without 'if', if(added)  {    ,else if(notify) {
patch is same with buggy,877,replace,, if(this.getItemCount()  >  1)  {    ,if(this.getItemCount() > 1) {
compilation error,877,replace,[CE] cannot find symbol, if(this.getItemCount()  >  1)  {    ,if(getTimePeriod(0).getItemCount() > 1) {
compilation error,667,replace,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;, item.setValue(item.getValue());    ,item.setValue(item.getValue(), value);
patch is same with buggy,667,replace,, item.setValue(item.getValue());    ,item.setValue(item.getValue());
compilation error,667,replace,[CE] bad operand types for binary operator '+', item.setValue(item.getValue());    ,item.setValue(item.getValue() + 1);
increase failing tests,188,add, [FE] NullPointerException,   ,this.timePeriodClass = domain.getClass();
compilation error,188,add,[CE] cannot find symbol,   ,this.timePeriodClass = name.getRowKey();
compilation error,1057,add,[CE] cannot find symbol,   ,java.util.ArrayList(start); copy.data = new java.util.ArrayList(end);
compilation error,1057,add,[CE] cannot find symbol Copy,   ,copy.data = new java.util.ArrayList(start); Copy.data = new java.util.ArrayList(end);
compilation error,463,add,[CE] unreachable statement,   ,return getDataItem(index).getPeriod();
compilation error,463,add,[CE] generics are not supported in -source 1.4,   ,for(Class <?> timePeriodClass : getDataItem(index)); if(this.timePeriodClass!= null) { return this.data.getPeriod(); }
compilation error,463,add,[CE] generics are not supported in -source 1.4,   ,for(Class <?> timePeriodClass : getDataItem(index)); if(this.timePeriodClass!= null) { return this.data.getPeriod(index); }
compilation error,1273,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; >>
compilation error,1273,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) } return a; }
compilation error,189,add,[CE] incompatible types,   ,this.timePeriodClass = new java.util.ArrayList();
compilation error,189,add,[CE] incompatible types,   ,this.timePeriodClass = name;
compilation error,1296,add,[CE] 'else' without 'if',   ,else if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,1296,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a;!= else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,598,add,[CE] illegal start of expression,   ,if(count == 0 && item.getPeriod().compareTo( " ")> 0) {
compilation error,598,add,[CE] illegal start of expression,   ,if(count == 0 && item.getPeriod().compareTo(" ")> 0) {
compilation error,598,add,[CE] illegal start of expression,   ,if(count == 0 && item.getPeriod().compareTo( " ") > 0) {
increase failing tests,565,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,565,add,[CE] cannot find symbol,   ,updateBounds(item.getPeriod(), this.data.size() - 1);
compilation error,565,add,[CE] cannot find symbol,   ,updateBounds(item.getPeriod(), this.timePeriodClass);
patch is same with buggy,1292,replace,, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
patch is same with buggy,637,replace,, if(!notify)  {    ,if(!notify) {
compilation error,463,replace,[CE] cannot find symbol, getDataItem(index);    ,checkPeriod(index);
patch is same with buggy,463,replace,, getDataItem(index);    ,getDataItem(index);
compilation error,463,replace,[CE] not a statement, getDataItem(index);    ,getDataItem(index)+ 1;
compilation error,637,replace,[CE] cannot find symbol add, if(!notify)  {    ,if(!add) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a) || Double.isNaN(b)) {
compilation error,681,add,[CE] no suitable method found for add(RegularTimePeriod,Number),   ,this.data.add(period, value);
increase failing tests,681,add, [FE] ClassCastException,   ,this.data.add(period);
compilation error,681,add,[CE] no suitable constructor found for Double(Number),   ,this.data.add(period, new Double(value));
patch is same with buggy,1215,replace,, this.maxY  =  maxIgnoreNaN(this.maxY,  y);    ,this.maxY = maxIgnoreNaN(this.maxY, y);
compilation error,1215,replace,[CE] cannot find symbol maxX, this.maxY  =  maxIgnoreNaN(this.maxY,  y);    ,this.maxX = maxIgnoreNaN(this.maxX, y);
increase failing tests,1215,replace, [FE] AssertionFailedError, this.maxY  =  maxIgnoreNaN(this.maxY,  y);    ,this.maxY = minIgnoreNaN(this.maxY, y);
patch is same with buggy,1273,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; }
patch is same with buggy,1273,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; }
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) { return a; }
compilation error,1058,add,[CE] illegal start of expression,   ,if(this.data.size() > 1) {
compilation error,1058,add,[CE] illegal start of expression,   ,if(this.data.size() > 1) }
compilation error,1058,add,[CE] illegal start of expression,   ,if(this.data.size() > 1) >>
patch is same with buggy,1211,replace,, item.setValue(item.getValue());    ,item.setValue(item.getValue());
compilation error,1211,replace,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;, item.setValue(item.getValue());    ,item.setValue(item.getValue(), this.data.size());
compilation error,1211,replace,[CE] bad operand types for binary operator '+', item.setValue(item.getValue());    ,item.setValue(item.getValue() + 1);
compilation error,1215,add,[CE] cannot find symbol maxX,   ,this.maxX = maxIgnoreNaN(this.maxX, y);
increase failing tests,1215,add, [FE] AssertionFailedError,   ,this.maxY = minIgnoreNaN(this.maxY, y);
compilation error,1211,add,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;,   ,item.setValue(item.getValue(), this.data.size());
compilation error,1211,add,[CE] cannot find symbol,   ,item.setData(item.getDataItem());
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
patch is same with buggy,596,replace,, boolean  added  =  true;    ,boolean added = true;
compilation error,596,replace,[CE] cannot find symbol failed, boolean  added  =  true;    ,boolean added = failed;
compilation error,879,add,[CE] variable removed is already defined in method removeAgedItems(boolean),   ,boolean removed = true;
compilation error,879,add,[CE] illegal start of expression,   ,if(removed) { boolean removed = true; } while((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) { this.data.remove(0); if(notify) { fireSeriesChanged(); }
compilation error,879,add,[CE] not a statement,   ,if(removed) { boolean removed = true; } while((latest - getTimePeriod(0).getSerialIndex()) > this.maximumItemAge) { this.data.remove(0); if(notify) { fireSeriesChange
compilation error,879,add,[CE] illegal start of expression,   ,long maximum = getTimePeriod(getItemCount() - ).getSerialIndex();
increase failing tests,879,add, [FE]  Size,   ,long maximum = getTimePeriod(getItemCount() / 1).getSerialIndex();
compilation error,879,add,[CE] illegal start of expression,   ,long max = getTimePeriod(getItemCount() - ).getSerialIndex();
increase failing tests,879,add, [FE]  Size,   ,long max = getTimePeriod(getItemCount() / 1).getSerialIndex();
patch is same with buggy,629,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,629,replace,[CE] class or interface expected, fireSeriesChanged();    ,removeAgedItems(false);
compilation error,629,replace,[CE] class or interface expected, fireSeriesChanged();    ,addItem(item);
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,yN = item.getValue();
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,yN = item.getName();
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,yN = item.getItemCount();
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,item.setValue(value);
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,item.setPeriod(period);
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,item.setData(item);
compilation error,584,replace,[CE] cannot find symbol, else  if(!this.timePeriodClass.isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.isEquals(c)&& notify) {
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.equals(c)|| notify) {
increase failing tests,600,replace, [FE] AssertionFailedError, added  =  notify;    ,added = false;
compilation error,600,replace,[CE] cannot find symbol add, added  =  notify;    ,added = add;
compilation error,1068,add,[CE] cannot find symbol E,   ,E.printStackTrace();
compilation error,1068,add,[CE] cannot find symbol in,   ,in.printStackTrace();
patch is same with buggy,188,replace,, this.timePeriodClass  =  name.getClass();  this.minY  =  minY;    ,this.timePeriodClass = name.getClass(); this.minY = minY;
increase failing tests,188,replace, [FE] NullPointerException, this.timePeriodClass  =  name.getClass();  this.minY  =  minY;    ,this.timePeriodClass = domain.getClass(); this.minY = minY;
compilation error,188,replace,[CE] ';' expected, this.timePeriodClass  =  name.getClass();  this.minY  =  minY;    ,this.timePeriodClass = name.getClass(), but this.minY = minY;
compilation error,629,add,[CE] cannot find symbol,   ,recalculateBoundsForItem(item);
compilation error,629,add,[CE] cannot find symbol,   ,recalculateBoundsForAddedItem(item);
increase failing tests,581,replace, [FE] NullPointerException, if(c!=  null)  {    ,if(c == this.timePeriodClass) {
compilation error,581,replace,[CE] ')' expected, if(c!=  null)  {    ,if(c { this.timePeriodClass) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a) || Double.isNaN(b)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) }
increase failing tests,600,add, [FE] AssertionFailedError,   ,if(added) { added = notify; } else { this.data.add(item); added = true; }
compilation error,600,add,[CE] illegal start of type,   ,if(added = notify); } else { this.data.add(item); added = true; }
compilation error,653,replace,[CE] cannot find symbol, add(period,  value,  false);    ,setValue(period, value, false);
patch is same with buggy,653,replace,, add(period,  value,  false);    ,add(period, value, false);
patch is same with buggy,1058,replace,, if(this.data.size()  >  0  ||  this.data.size()  >  0)  {    ,if(this.data.size() > 0 || this.data.size() > 0) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1292,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) }
compilation error,1292,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b))!=
patch is same with buggy,626,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,626,replace,[CE] class or interface expected, fireSeriesChanged();    ,updateBoundsForItem(item);
compilation error,626,replace,[CE] class or interface expected, fireSeriesChanged();    ,removeAgedItems(false);
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals(c)) {
compilation error,584,add,[CE] illegal start of expression,   ,else if(!this.timePeriodClass.isAssignableFrom(c)) }
patch is same with buggy,1212,replace,, if(yN!=  null)  {    ,if(yN!= null) {
increase failing tests,1212,replace, [FE] NullPointerException, if(yN!=  null)  {    ,if(yN == null) {
compilation error,1212,replace,[CE] ')' expected, if(yN!=  null)  {    ,if(yN } null) {
patch is same with buggy,668,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,668,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data.size() - 1);
compilation error,668,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.timePeriodClass);
compilation error,604,add,[CE] illegal start of expression,   ,if(item.getPeriod().compareTo(last) == 0) {
compilation error,604,add,[CE] illegal start of expression,   ,if(item.getPeriod().compareTo(last)!= 0) {
compilation error,604,add,[CE] illegal start of expression,   ,if(item.getPeriod().compareTo(last) >= 0) {
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN;
compilation error,194,add,[CE] bad operand types for binary operator '<',   ,if(range < null) { this.minY = Double.NaN; } else { this.data.add(name); }
patch is same with buggy,581,replace,, if(c!=  null)  {    ,if(c!= null) {
compilation error,581,replace,[CE] cannot find symbol, if(c!=  null)  {    ,if(c!= null && c.isTimePeriod()) {
compilation error,581,replace,[CE] cannot find symbol, if(c!=  null)  {    ,if(c!= null && c.isTimePeriodClass()) {
patch is same with buggy,1273,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
patch is same with buggy,1273,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,1273,replace,[CE] not a statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; delt else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
increase failing tests,695,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,695,add,[CE] cannot find symbol,   ,item.addValue();
patch is same with buggy,604,replace,, if(item.getPeriod().compareTo(last)  ==  0)  {    ,if(item.getPeriod().compareTo(last) == 0) {
increase failing tests,604,replace, [FE] AssertionFailedError, if(item.getPeriod().compareTo(last)  ==  0)  {    ,if(item.getPeriod().compareTo(last)!= 0) {
compilation error,626,add,[CE] illegal start of expression,   ,if(notify) {
compilation error,626,add,[CE] illegal start of expression,   ,if(notify) }
compilation error,626,add,[CE] illegal start of expression,   ,if(notify) >>
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,187,replace,[CE] cannot find symbol, this.domain  =  domain;  this.range  =  range;    ,this.timePeriodClass = name.getTimePeriodClass();
increase failing tests,187,replace, [FE] NullPointerException, this.domain  =  domain;  this.range  =  range;    ,this.timePeriodClass = domain.getClass();
compilation error,187,replace,[CE] cannot find symbol, this.domain  =  domain;  this.range  =  range;    ,this.timePeriodClass = name.getRange();
patch is same with buggy,694,replace,, item.setValue(value);    ,item.setValue(value);
compilation error,694,replace,[CE] cannot find symbol, item.setValue(value);    ,item.setData(item);
compilation error,694,replace,[CE] cannot find symbol, item.setValue(value);    ,item.setPeriod(period);
increase failing tests,606,add, [FE] AssertionFailedError,   ,fireSeriesChanged(); if(notify) { this.data.add(item); }
increase failing tests,606,add, [FE] SeriesException,   ,fireSeriesChanged(); if(notify) { throw new SeriesException(""); }
patch is same with buggy,195,replace,, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.minY = Double.NaN; this.maxY = Double.NaN;
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,if(this.minY > Double.NaN) { this.minY = Double.NaN; this.maxY = Double.NaN; }
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,if(this.minY > Double.NaN) { this.minY = Double.NaN; this.maxY = Double.NaN; } else { this.data.add(name); }
compilation error,187,replace,[CE] incompatible types, this.domain  = "domain ";    ,this.domain = domain? domain :"domain";
compilation error,187,replace,[CE] incompatible types, this.domain  = "domain ";    ,this.domain = domain? domain : "domain";
compilation error,1056,add,[CE] no suitable method found for sort(List,int),   ,Collections.sort(this.data, end);
compilation error,1056,add,[CE] no suitable method found for sort(List,int),   ,Collections.sort(this.data, start);
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  -  1;    ,this.minX = Double.NaN + 1;
patch is same with buggy,878,replace,, long  maximum  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(0).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol latest, long  maximum  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(1).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol, long  maximum  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(0).getMaximumItemAge();
patch is same with buggy,188,replace,, this.range  =  domain;    ,this.range = domain;
compilation error,1064,add,[CE] cannot find symbol,   ,clone.add(item);
compilation error,1064,add,[CE] cannot find symbol,   ,clone.add(start);
compilation error,667,add,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;,   ,item.setValue(item.getValue(), notify);
compilation error,667,add,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;,   ,item.setValue(item.getValue(), notify);
patch is same with buggy,600,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,600,replace,[CE] method addChangeListener in class Series cannot be applied to given types;, fireSeriesChanged();    ,addChangeListener(this);
compilation error,600,replace,[CE] cannot find symbol, fireSeriesChanged();    ,updateSeries(item);
compilation error,188,replace,[CE] cannot find symbol, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getTimePeriodClass();
patch is same with buggy,188,replace,, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getClass();
compilation error,188,replace,[CE] cannot find symbol, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getRowKey();
patch is same with buggy,1265,replace,, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)&& Double.isInfinite(b)) {
patch is same with buggy,463,replace,, return  getDataItem(index).getPeriod();    ,return getDataItem(index).getPeriod();
compilation error,463,replace,[CE] cannot find symbol, return  getDataItem(index).getPeriod();    ,return getDataItem(index).getPeriodType();
compilation error,463,replace,[CE] cannot find symbol, return  getDataItem(index).getPeriod();    ,return getDataItem(index).getPeriodClass();
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.equals(c)&&  notify)  {    ,else if(!this.timePeriodClass.equals(c)&& notify) {
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.equals(c)&&  notify)  {    ,else if(!this.timePeriodClass.equals(c)|| notify) {
compilation error,189,replace,[CE] incompatible types, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = new java.util.ArrayList();
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = getTTimePeriodClass();
patch is same with buggy,1068,replace,, e.printStackTrace();    ,e.printStackTrace();
compilation error,1068,replace,[CE] illegal start of expression, e.printStackTrace();    ,e.printStackTrace("");
compilation error,1068,replace,[CE] illegal start of expression, e.printStackTrace();    ,e.printStackTrace(this.clone);
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount();    ,int count = getItemCount() - 1;
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount();    ,int count = getItemCount(0);
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount();    ,int count = getItemCount() / 2;
increase failing tests,598,replace, [FE] ArrayIndexOutOfBoundsException, if(count  ==  0  &&  item.getPeriod().compareTo( " ")>  0)  {    ,if(count > 0 && item.getPeriod().compareTo(" ")> 0) {
increase failing tests,598,replace, [FE] ArrayIndexOutOfBoundsException, if(count  ==  0  &&  item.getPeriod().compareTo( " ")>  0)  {    ,if(count > 0 && item.getPeriod().compareTo("")> 0) {
increase failing tests,598,replace, [FE] ArrayIndexOutOfBoundsException, if(count  ==  0  &&  item.getPeriod().compareTo( " ")>  0)  {    ,if(count > 0 && item.getPeriod().compareTo(" +")> 0) {
compilation error,879,replace,[CE] cannot find symbol removed, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long max = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long max = getTimePeriod(getItemCount() / 1).getSerialIndex();
compilation error,879,replace,[CE] illegal start of expression, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long max = getTimePeriod(getItemCount() - ).getSerialIndex();
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,1273,replace,[CE] 'else' without 'if', if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,else if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,626,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" but the series already contains an observation");
compilation error,626,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" but the series already contains an observation for");
patch is same with buggy,596,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,596,replace,[CE] cannot find symbol, fireSeriesChanged();    ,updateBounds(item.getPeriod(), notify);
compilation error,596,replace,[CE] cannot find symbol, fireSeriesChanged();    ,updateBounds(item.getPeriod());
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.timePeriodClass = getTimePeriodClass();
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.timePeriodClass = createTimePeriodClass();
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.timePeriodClass = getDatePeriodClass();
patch is same with buggy,582,replace,, c  =  item.getPeriod().getClass();    ,c = item.getPeriod().getClass();
compilation error,582,replace,[CE] cannot find symbol, c  =  item.getPeriod().getClass();    ,c = item.getPeriod().getName();
compilation error,582,replace,[CE] cannot find symbol, c  =  item.getPeriod().getClass();    ,c = item.getTimePeriod().getClass();
patch is same with buggy,627,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,627,replace,[CE] cannot find symbol, fireSeriesChanged();    ,addItem(item);
patch is same with buggy,1292,replace,, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1292,replace,[CE] cannot find symbol c, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(c)) {
patch is same with buggy,192,replace,, this.minY  =  Double.NaN;    ,this.minY = Double.NaN;
compilation error,192,replace,[CE] cannot find symbol NaN, this.minY  =  Double.NaN;    ,this.minY = Long.NaN;
compilation error,192,replace,[CE] cannot find symbol naN, this.minY  =  Double.NaN;    ,this.minY = Double.naN;
compilation error,1292,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)
compilation error,1217,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBoundsForAddedItem(item);
compilation error,1217,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBoundsForAddedItem(item, yN);
compilation error,1217,replace,[CE] illegal start of expression, fireSeriesChanged();    ,refreshBoundsForAddedItem(item);
compilation error,681,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(value);
compilation error,681,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(value, this.timePeriodClass);
compilation error,681,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(value, new Double(minY, value));
increase failing tests,564,add, [FE] AssertionFailedError,   ,add(item, false);
increase failing tests,564,add, [FE] SeriesException,   ,add(item, true);
increase failing tests,564,add, [FE] AssertionFailedError,   ,this.data.add(item);
patch is same with buggy,694,replace,, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); fireSeriesChanged();
compilation error,694,replace,[CE] cannot find symbol, item.setValue(value);  fireSeriesChanged();    ,item.addValue(value); fireSeriesChanged();
compilation error,694,replace,[CE] not a statement, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); notify;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if necessary, but // don't notify anyone
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if necessary, but // don't notify
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove old items if necessary, but // don't notify
compilation error,654,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(value);
compilation error,654,replace,[CE] illegal start of expression, fireSeriesChanged();    ,add(period);
compilation error,654,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds();
patch is same with buggy,1288,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = name.getRange();
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = name.getRowKey();
increase failing tests,187,add, [FE] NullPointerException,   ,this.timePeriodClass = domain.getClass();
compilation error,637,add,[CE] illegal start of expression,   ,if(added) {
compilation error,637,add,[CE] illegal start of expression,   ,if(added) }
compilation error,637,add,[CE] illegal start of expression,   ,if(added) >>
compilation error,600,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(":");
compilation error,600,add,[CE] cannot find symbol b,   ,b.append(":"); fireSeriesChanged();
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  +  1;    ,this.minY = Double.NaN + 1;
compilation error,463,add,[CE] cannot find symbol,   ,checkPeriod(this, index);
compilation error,463,add,[CE] cannot find symbol,   ,checkPeriod(index);
patch is same with buggy,1265,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)) {
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)&& Double.isNaN(b)) {
patch is same with buggy,1269,replace,, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,879,replace,[CE] cannot assign a value to final variable removed, boolean  removed  =  true;    ,final boolean removed = true;
patch is same with buggy,879,replace,, boolean  removed  =  true;    ,boolean removed = true;
compilation error,188,add,[CE] incompatible types,   ,this.timePeriodClass = new java.util.ArrayList();
compilation error,188,add,[CE] incompatible types,   ,this.timePeriodClass = new java.util.ArrayList(); this.minY = null;
compilation error,195,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN; this.maxY = Double.NaN;
compilation error,195,add,[CE] cannot find symbol minItemCount,   ,this.minItemCount = Integer.MAX_VALUE; this.maxY = Integer.MIN_VALUE;
patch is same with buggy,1292,replace,, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
patch is same with buggy,576,replace,, item  =(TimeSeriesDataItem)item.clone();    ,item =(TimeSeriesDataItem)item.clone();
compilation error,576,replace,[CE] <identifier> expected, item  =(TimeSeriesDataItem)item.clone();    ,item =(TimeSeriesDataItem)this.data.clone();
compilation error,576,replace,[CE] , item  =(TimeSeriesDataItem)item.clone();    ,item =(TimeSeriesDataItem)item.clone(), notify;
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,boolean added = true;
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,boolean added = false;
compilation error,596,add,[CE] incompatible types,   ,Boolean added = true;
compilation error,1062,add,[CE] no suitable method found for add(TimeSeriesDataItem,int),   ,copy.add(item, index);
compilation error,1062,add,[CE] cannot find symbol,   ,item.add(item);
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1056,replace,[CE] no suitable method found for sort(List,int), Collections.sort(this.data);    ,Collections.sort(this.data, end);
compilation error,1056,replace,[CE] no suitable method found for sort(List,int), Collections.sort(this.data);    ,Collections.sort(this.data, start);
compilation error,1056,replace,[CE] cannot find symbol ends, Collections.sort(this.data);    ,Collections.sort(this.data, ends);
patch is same with buggy,878,replace,, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long duration = getTimePeriod(0).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol latest, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long duration = getTimePeriod(1).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol latest, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long duration = getTimePeriod(0).getSerialIndex() - 1;
compilation error,596,add,[CE] cannot find symbol b,   ,b.append(" but the TimeSeries is expecting an instance of"); b.append(item.getPeriod().getClass().getName());
compilation error,596,add,[CE] cannot find symbol b,   ,b.append(" but the TimeSeries is expecting an instance of"); b.append(item.getPeriod().getName());
compilation error,190,add,[CE] cannot find symbol,   ,this.timePeriodClass = getTTimePeriodClass();
compilation error,190,add,[CE] cannot find symbol,   ,this.range = getRange();
compilation error,565,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data.size() - 1);
compilation error,565,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.timePeriodClass);
compilation error,565,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data);
patch is same with buggy,581,replace,, if(c!=  this.timePeriodClass)  {    ,if(c!= this.timePeriodClass) {
compilation error,581,replace,[CE] cannot find symbol, if(c!=  this.timePeriodClass)  {    ,if(c!= null && c.isTimePeriodClass()) {
compilation error,1288,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1288,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a) || Double.isNaN(b)) {
compilation error,1288,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) }
compilation error,1289,replace,[CE] missing return statement, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1289,replace,[CE] reached end of file while parsing, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(Double.isNaN(b)) { return a; if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1289,replace,[CE] reached end of file while parsing, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(Double.isNaN(b)) { return a; if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,195,add,[CE] cannot find symbol timePeriodAge,   ,this.timePeriodAge = getTimePeriodAge();
compilation error,195,add,[CE] cannot find symbol,   ,this.timePeriodClass = getDataItemClass();
increase failing tests,878,add, [FE]  Size,   ,long last = getTimePeriod(getItemCount() / 1).getSerialIndex();
increase failing tests,878,add, [FE]  Size,   ,long last = getTimePeriod(getItemCount() ).getSerialIndex();
compilation error,603,add,[CE] variable last is already defined in method add(TimeSeriesDataItem,boolean),   ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2);
compilation error,603,add,[CE] variable item is already defined in method add(TimeSeriesDataItem,boolean),   ,TimeSeriesDataItem item = getTimePeriod(getItemCount() / 2);
compilation error,1266,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)) { return a;!= else if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1266,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)) { return a; >> else if(Double.isNaN(b)) { return Math.min(a, b); }
patch is same with buggy,1288,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)&& Double.isNaN(b)) {
patch is same with buggy,1058,replace,, if(this.data.size()  >  1)  {    ,if(this.data.size() > 1) {
increase failing tests,1058,replace, [FE]  Size, if(this.data.size()  >  1)  {    ,if(copy.data.size() > 1) {
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)) {
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)|| notify) {
patch is same with buggy,629,replace,, if(this.data.size()  >  this.maximumItemCount)  {    ,if(this.data.size() > this.maximumItemCount) {
increase failing tests,629,replace, [FE] AssertionFailedError, if(this.data.size()  >  this.maximumItemCount)  {    ,if(this.data.size() > 1) {
compilation error,629,replace,[CE] cannot find symbol, if(this.data.size()  >  this.maximumItemCount)  {    ,if(this.data.size() > item.getItemCount()) {
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  -  1;    ,this.minY = Double.NaN - 1;
patch is same with buggy,1062,replace,, copy.add(item);    ,copy.add(item);
compilation error,1062,replace,[CE] no suitable method found for add(TimeSeriesDataItem,int), copy.add(item);    ,copy.add(item, index);
compilation error,1062,replace,[CE] no suitable method found for add(int,TimeSeriesDataItem), copy.add(item);    ,copy.add(index, item);
compilation error,1212,add,[CE] cannot find symbol,   ,yN = item.getName();
compilation error,1212,add,[CE] cannot find symbol,   ,yN = item.getKey();
increase failing tests,603,replace, [FE] ArrayIndexOutOfBoundsException, RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2 - 1);
patch is same with buggy,603,replace,, RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2);
increase failing tests,603,replace, [FE] AssertionFailedError, RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod last = getTimePeriod(getItemCount() / 4);
compilation error,629,add,[CE] illegal start of expression,   ,if(this.data.size() > this.maximumItemCount) {
compilation error,629,add,[CE] illegal start of expression,   ,if(this.data.size() > this.maximumItemCount) }
compilation error,629,add,[CE] illegal start of expression,   ,if(this.data.size() > this.maximumItemCount) >>
patch is same with buggy,695,replace,, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); fireSeriesChanged();
compilation error,695,replace,[CE] illegal start of expression, item.setValue(value);  fireSeriesChanged();    ,item.addValue(value); fireSeriesChanged();
compilation error,695,replace,[CE] generics are not supported in -source 1.4, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); notifyListeners(new LinkedHashSet < TimeSeriesDataItem>());
patch is same with buggy,186,replace,, super(name,  domain);    ,super(name, domain);
compilation error,186,replace,[CE] no suitable constructor found for Series(Comparable,String,String), super(name,  domain);    ,super(name, domain, range);
compilation error,186,replace,[CE] no suitable constructor found for Series(String,Comparable), super(name,  domain);    ,super(domain, name);
compilation error,1058,replace,[CE] package This does not exist, if(this.data.size()  >  1)  {    ,if(This.data.size() > 0 || this.data.size() > 0) {
compilation error,1058,replace,[CE] illegal start of expression, if(this.data.size()  >  1)  {    ,if(this.data.size() > 0 || this.data.size() > 0) }
increase failing tests,463,add, [FE]  Size,   ,this.data.remove(index);
compilation error,463,add,[CE] TimePeriod is abstract; cannot be instantiated,   ,this.data.add(new TimePeriod(this.timePeriodClass));
compilation error,463,add,[CE] TimePeriod is abstract; cannot be instantiated,   ,this.data.add(new TimePeriod(this.timePeriodClass, index));
compilation error,170,replace,[CE] illegal start of expression, fireSeriesChanged();    ,this.data.clear();
compilation error,170,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateSeries(name);
compilation error,170,replace,[CE] illegal start of expression, fireSeriesChanged();    ,reset();
increase failing tests,653,add, [FE] SeriesException,   ,add(period, value, true);
increase failing tests,653,add, [FE] SeriesException,   ,add(period, value, false);
increase failing tests,653,add, [FE] StackOverflowError,   ,add(period, value);
increase failing tests,878,add, [FE]  Size,   ,long last = getTimePeriod(getItemCount() / 1).getSerialIndex();
compilation error,878,add,[CE] illegal start of expression,   ,long last = getTimePeriod(getItemCount() - ).getSerialIndex();
compilation error,581,add,[CE] illegal start of expression,   ,if(c!= null) {
compilation error,581,add,[CE] illegal start of expression,   ,if(c == null) {
compilation error,581,add,[CE] ')' expected,   ,if(c { null) {
patch is same with buggy,1057,replace,, copy.data  =  new  java.util.ArrayList(start);    ,copy.data = new java.util.ArrayList(start);
compilation error,1057,replace,[CE] no suitable constructor found for ArrayList(int,int), copy.data  =  new  java.util.ArrayList(start);    ,copy.data = new java.util.ArrayList(start, end);
patch is same with buggy,189,replace,, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass();
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = createTimePeriodClass();
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = new TimePeriodClass();
compilation error,564,replace,[CE] cannot find symbol, add(item,  false);    ,setValue(item, false);
compilation error,564,replace,[CE] cannot find symbol, add(item,  false);    ,set(item, false);
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if necessary, but // don't notify anyone
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if necessary, but // don't notify
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if necessary, but // don't notify anybody
patch is same with buggy,1269,replace,, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,463,replace,[CE] missing return statement, this.data.get(index);    ,this.data.remove(index);
compilation error,463,replace,[CE] no suitable method found for add(int), this.data.get(index);    ,this.data.add(index);
patch is same with buggy,463,replace,, this.data.get(index);    ,this.data.get(index);
patch is same with buggy,879,replace,, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long maximum = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long maximum = getTimePeriod(getItemCount() / 1).getSerialIndex();
compilation error,879,replace,[CE] possible loss of precision, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,int maximum = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,boolean added = notify;
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,boolean added = notify;
compilation error,596,add,[CE] cannot find symbol notification,   ,boolean added = notification;
compilation error,187,replace,[CE] incompatible types, this.domain  = "domain ";    ,this.domain = domain?"domain" :"domain";
compilation error,187,replace,[CE] incompatible types, this.domain  = "domain ";    ,this.domain = domain?"domain " :"domain";
compilation error,637,replace,[CE] cannot find symbol Notify, if(added)  {    ,if(Notify) {
compilation error,637,replace,[CE] cannot find symbol notified, if(added)  {    ,if(notified) {
compilation error,187,add,[CE] incompatible types,   ,this.domain = domain.getClass();
compilation error,187,add,[CE] cannot find symbol,   ,this.data = new ArrayList();
compilation error,1062,add,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;,   ,item.setValue(index);
compilation error,1062,add,[CE] cannot find symbol,   ,item.add(item);
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,yN = item.getValue();
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,yN = item.getYValue();
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,yN = item.getValue() + 1;
patch is same with buggy,190,replace,, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass();
compilation error,190,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClassName();
compilation error,190,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = createTimePeriodClass();
compilation error,194,add,[CE] cannot find symbol minItemAge,   ,this.minItemAge = Long.MIN_VALUE;
compilation error,194,add,[CE] cannot find symbol minItemCount,   ,this.minItemCount = Long.MIN_VALUE;
compilation error,694,replace,[CE] not a statement, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); notify;
patch is same with buggy,694,replace,, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); fireSeriesChanged();
compilation error,694,replace,[CE] not a statement, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); notify);
patch is same with buggy,188,replace,, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getClass();
increase failing tests,188,replace, [FE] NullPointerException, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = timePeriodClass.getClass();
compilation error,188,replace,[CE] ';' expected, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getClass(), null;
compilation error,581,replace,[CE] cannot find symbol TimePeriodClass, if(c!=  null)  {    ,if(c!= this.TimePeriodClass) {
compilation error,581,replace,[CE] illegal start of expression, if(c!=  null)  {    ,if(c!= this.timePeriodClass) }
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,items.add(item);
patch is same with buggy,877,replace,, if(this.getItemCount()  >  1)  {    ,if(this.getItemCount() > 1) {
compilation error,629,add,[CE] illegal start of expression,   ,if(this.data.size() > this.maximumItemCount) {
compilation error,629,add,[CE] illegal start of expression,   ,if(this.data.size() > this.maximumItemCount) }
compilation error,629,add,[CE] generics are not supported in -source 1.4,   ,if(this.data.size() > this.maximumItemCount) <
compilation error,1292,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(Math.max(a, b)) {
compilation error,1292,replace,[CE] cannot find symbol m, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(m)|| Double.isNaN(b)) {
compilation error,1292,replace,[CE] cannot find symbol A, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(A)|| Double.isNaN(b)) {
patch is same with buggy,1288,replace,, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)&& Double.isInfinite(b)) {
increase failing tests,604,replace, [FE] AssertionFailedError, if(item.getPeriod().compareTo(last)  ==  0)  {    ,if(item.getPeriod().compareTo(last) < 0) {
patch is same with buggy,604,replace,, if(item.getPeriod().compareTo(last)  ==  0)  {    ,if(item.getPeriod().compareTo(last) == 0) {
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,item.addChangeListener(this);
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,item.add(period, notify);
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,this.data.add(item);
increase failing tests,195,add, [FE] NullPointerException,   ,this.timePeriodClass = name.getClass();
increase failing tests,195,add, [FE] AssertionFailedError,   ,this.timePeriodClass = name.getClass(); this.data.add(name);
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  name.getClass();    ,if(name == null) { this.timePeriodClass = getTimePeriodClass(); } else { this.data = new ArrayList(); }
compilation error,189,replace,[CE] cannot find symbol minItemCount, this.timePeriodClass  =  name.getClass();    ,this.minItemCount = getMinimumItemCount();
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)&& Double.isNaN(b)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
compilation error,1068,add,[CE] no suitable method found for printStackTrace(StackTraceElement[]),   ,e.printStackTrace(e.getStackTrace());
compilation error,1068,add,[CE] no suitable method found for printStackTrace(List),   ,e.printStackTrace(this.data);
compilation error,1266,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) { return a; if(Double.isNaN(b)) { return Math.max(a, b); }
compilation error,1266,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) { return a; if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1266,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)) { return a; if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,654,replace,[CE] illegal start of expression, fireSeriesChanged();    ,this.data.add(period);
compilation error,654,replace,[CE] illegal start of expression, fireSeriesChanged();    ,refreshBounds();
compilation error,654,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(period, getPeriodType(), false);
compilation error,878,replace,[CE] cannot find symbol latest, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(1).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol latest, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(0).getSerialIndex();
compilation error,878,replace,[CE] incompatible types, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(getItemCount() - 1);
patch is same with buggy,1057,replace,, copy.data  =  new  java.util.ArrayList(start);    ,copy.data = new java.util.ArrayList(start);
compilation error,1057,replace,[CE] no suitable constructor found for ArrayList(int,int), copy.data  =  new  java.util.ArrayList(start);    ,copy.data = new java.util.ArrayList(start, end);
patch is same with buggy,1056,replace,, Collections.sort(this.data);    ,Collections.sort(this.data);
compilation error,1056,replace,[CE] no suitable method found for sort(List,int), Collections.sort(this.data);    ,Collections.sort(this.data, start);
compilation error,1056,replace,[CE] no suitable method found for sort(List,int), Collections.sort(this.data);    ,Collections.sort(this.data, end);
compilation error,1292,replace,[CE] cannot find symbol c, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(c)) {
compilation error,1211,add,[CE] cannot find symbol,   ,item.setDataItem(item.getDataItem());
compilation error,1211,add,[CE] cannot find symbol,   ,item.setDataItem(item.getDataItem(0));
compilation error,667,add,[CE] cannot find symbol,   ,item.setDataItem(getDataItem(period), value, notify);
compilation error,667,add,[CE] cannot find symbol,   ,item.setDataItem(getDataItem(period));
compilation error,667,add,[CE] cannot find symbol,   ,item.setDataItem(getDataItem(period), value);
compilation error,695,add,[CE] cannot find symbol,   ,item.addChangeListener(this);
increase failing tests,695,add, [FE] AssertionFailedError,   ,this.data.add(item);
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = createTimePeriodClass();
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = getTimePeriodClassName();
increase failing tests,1217,add, [FE] ConcurrentModificationException,   ,this.data.add(item); item.setValue(yN);
increase failing tests,1217,add, [FE] ConcurrentModificationException,   ,this.data.add(item);
patch is same with buggy,576,replace,, item  =(TimeSeriesDataItem)item.clone();    ,item =(TimeSeriesDataItem)item.clone();
compilation error,576,replace,[CE] <identifier> expected, item  =(TimeSeriesDataItem)item.clone();    ,item =(TimeSeriesDataItem)item.getDataItem(notify);
compilation error,576,replace,[CE] <identifier> expected, item  =(TimeSeriesDataItem)item.clone();    ,item =(TimeSeriesDataItem)item.toArray(new TimeSeriesDataItem(item, notify));
increase failing tests,564,add, [FE] SeriesException,   ,add(item, true);
compilation error,564,add,[CE] cannot find symbol,   ,updateBounds(item.getPeriod(), this);
compilation error,564,add,[CE] no suitable method found for add(TimeSeriesDataItem,boolean),   ,this.data.add(item, true);
compilation error,565,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data);
compilation error,565,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds();
compilation error,565,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this);
patch is same with buggy,582,replace,, c  =  item.getPeriod().getClass();    ,c = item.getPeriod().getClass();
compilation error,582,replace,[CE] cannot find symbol, c  =  item.getPeriod().getClass();    ,c = item.getPeriod().getName();
compilation error,582,replace,[CE] cannot find symbol, c  =  item.getPeriod().getClass();    ,c = item.getPeriod().getDataItem(this);
compilation error,1296,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,[Delete]
compilation error,1296,replace,[CE] class or interface expected, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,}
compilation error,1296,replace,[CE] reached end of file while parsing, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,{
patch is same with buggy,189,replace,, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass();
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = createTimePeriodClass();
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClassName();
patch is same with buggy,193,replace,, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass();
compilation error,193,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClassName();
compilation error,193,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = createTimePeriodClass();
patch is same with buggy,192,replace,, this.minY  =  Double.NaN;    ,this.minY = Double.NaN;
compilation error,192,replace,[CE] cannot find symbol NaN, this.minY  =  Double.NaN;    ,this.minY = Long.NaN;
increase failing tests,192,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN;    ,this.minY = Double.NaN - 1;
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(Math.min(a, b)) {
increase failing tests,170,add, [FE] ClassCastException,   ,this.data.add(name);
increase failing tests,170,add, [FE] StackOverflowError,   ,this.data.add(new TimeSeries(name));
compilation error,170,add,[CE] cannot find symbol,   ,this.data.add(new DataItem(name));
compilation error,1064,add,[CE] cannot find symbol,   ,if(clone!= null) { copy.add(clone); } else { clone.add(item); clone.data.add(item); }
compilation error,1064,add,[CE] cannot find symbol data,   ,if(clone!= null) { copy.add(clone); } else { clone.data.add(item); clone.data.add(item); }
compilation error,1064,add,[CE] bad operand types for binary operator '!=',   ,if(item.getValue()!= 0) { copy.add(clone); } else { clone.add(item.getValue()); clone.add(item.getValue()); }
compilation error,1212,add,[CE] illegal start of expression,   ,if(yN!= null) {
compilation error,1212,add,[CE] illegal start of expression,   ,if(yN!= null && item.getValue() < null) {
compilation error,1212,add,[CE] illegal start of expression,   ,if(yN!= null && item.getValue() == null) {
compilation error,668,add,[CE] cannot find symbol,   ,item.addChangeListener(this);
increase failing tests,668,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,668,add,[CE] cannot find symbol,   ,item.addChangeListener(TimePeriod.getPeriodType(), this);
compilation error,1217,add,[CE] cannot find symbol,   ,item.setDataItem(yN);
increase failing tests,1217,add, [FE] ConcurrentModificationException,   ,this.data.add(item);
compilation error,1217,add,[CE] cannot find symbol,   ,item.setDataItem(item);
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.equals(c)&&  notify)  {    ,else if(!this.timePeriodClass.equals(c)&& notify) {
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.equals(c)&&  notify)  {    ,else if(!this.timePeriodClass.equals("TimePeriod")&& notify) {
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.equals(c)&&  notify)  {    ,else if(!this.timePeriodClass.equals("")&& notify) {
compilation error,606,replace,[CE] cannot find symbol, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data);
compilation error,606,replace,[CE] cannot find symbol, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data.size() - 1);
compilation error,606,replace,[CE] 'void' type not allowed here, fireSeriesChanged();    ,updateBounds(item.getPeriod(), fireSeriesChanged());
patch is same with buggy,188,replace,, this.timePeriodClass  =  name.getClass();  this.minY  =  minY;    ,this.timePeriodClass = name.getClass(); this.minY = minY;
increase failing tests,188,replace, [FE] NullPointerException, this.timePeriodClass  =  name.getClass();  this.minY  =  minY;    ,this.timePeriodClass = timePeriodClass.getClass(); this.minY = minY;
patch is same with buggy,188,replace,, this.timePeriodClass  =  name.getClass();  this.minY  =  minY;    ,this.timePeriodClass = name.getClass() ; this.minY = minY;
patch is same with buggy,600,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,600,replace,[CE] bad operand types for binary operator '-', fireSeriesChanged();    ,updateBounds(item.getPeriod() - 1);
compilation error,600,replace,[CE] cannot find symbol add, fireSeriesChanged();    ,updateBounds(item.getPeriod(), add);
increase failing tests,629,replace, [FE] AssertionFailedError, if(this.data.size()  >  this.maximumItemCount)  {    ,if(this.data.size() > 0) {
patch is same with buggy,629,replace,, if(this.data.size()  >  this.maximumItemCount)  {    ,if(this.data.size() > this.maximumItemCount) {
increase failing tests,629,replace, [FE] NullPointerException, if(this.data.size()  >  this.maximumItemCount)  {    ,if(this.data.size() < this.maximumItemCount) {
compilation error,189,add,[CE] incompatible types,   ,this.timePeriodClass = name;
increase failing tests,189,add, [FE] NullPointerException,   ,this.timePeriodClass = timePeriodClass.getClass();
compilation error,600,add,[CE] cannot find symbol it,   ,it.remove(); added = notify;
compilation error,600,add,[CE] cannot find symbol b,   ,b.append(","); added = true;
compilation error,680,replace,[CE] cannot find symbol, add(period,  value,  false);    ,setValue(period, value, false);
compilation error,680,replace,[CE] cannot find symbol, add(period,  value,  false);    ,updateBounds(period, value, true);
compilation error,626,add,[CE] illegal start of expression,   ,if(notify) {
compilation error,626,add,[CE] illegal start of expression,   ,if(!notify) {
compilation error,626,add,[CE] illegal start of expression,   ,if(justify) {
increase failing tests,1212,add, [FE] SeriesException,   ,if(yN!= null) { yN = item.getValue(); } else { throw new SeriesException(""); }
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)&& Double.isNaN(b)) {
increase failing tests,598,replace, [FE] ArrayIndexOutOfBoundsException, if(count  ==  0  &&  item.getPeriod().compareTo( " ")>  0)  {    ,if(count > 0 && item.getPeriod().compareTo(" ")> 0) {
increase failing tests,598,replace, [FE] ArrayIndexOutOfBoundsException, if(count  ==  0  &&  item.getPeriod().compareTo( " ")>  0)  {    ,if(count > 0 && item.getPeriod().compareTo("")> 0) {
increase failing tests,598,replace, [FE] ArrayIndexOutOfBoundsException, if(count  ==  0  &&  item.getPeriod().compareTo( " ")>  0)  {    ,if(count > 0 && item.getPeriod().compareTo(" -")> 0) {
increase failing tests,195,add, [FE] StackOverflowError,   ,this.data.add(new TimeSeries(name, domain, range));
compilation error,195,add,[CE] no suitable method found for add(TimeSeries,String,String),   ,this.data.add(new TimeSeries(name), domain, range);
compilation error,463,replace,[CE] cannot find symbol, getDataItem(index);    ,checkDataItem(index);
compilation error,463,replace,[CE] cannot find symbol, getDataItem(index);    ,checkAndUpdate(index, new DataItem(getTimePeriod(), index));
compilation error,463,replace,[CE] cannot find symbol, getDataItem(index);    ,checkOldItem(index);
compilation error,463,add,[CE] method getTimePeriod in class TimeSeries cannot be applied to given types;,   ,checkPeriod(getTimePeriod());
compilation error,463,add,[CE] cannot find symbol,   ,checkOldItem(index);
compilation error,463,add,[CE] cannot find symbol,   ,checkPeriod(index);
increase failing tests,1058,replace, [FE] AssertionFailedError, if(this.data.size()  >  0  ||  this.data.size()  >  0)  {    ,if(this.data.size() > 0 && copy.data.size() > 0) {
compilation error,629,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" for that time period. Duplicates are not");
compilation error,629,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" but the series already contains an observation");
increase failing tests,879,add, [FE]  Size,   ,long maximum = getTimePeriod(getItemCount() + 1).getSerialIndex();
increase failing tests,596,add, [FE] SeriesException,   ,this.data.add(item);
compilation error,596,add,[CE] cannot find symbol b,   ,b.append(" but the series already contains an instance of");
compilation error,581,add,[CE] illegal start of expression,   ,if(c!= null) {
compilation error,581,add,[CE] illegal start of expression,   ,if(c == null) {
compilation error,581,add,[CE] illegal start of expression,   ,if(c!= null), {
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  -  1;    ,this.minY = Double.NaN - 1;
compilation error,188,add,[CE] no suitable method found for max(long),   ,this.maximumItemAge = Math.max(maximumItemAge);
compilation error,188,add,[CE] no suitable method found for max(long,Class),   ,this.maximumItemAge = Math.max(maximumItemAge, name.getClass());
compilation error,626,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" for that time period. Duplicates are not");
compilation error,626,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" but the series already contains an observation");
compilation error,1217,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBoundsForAddedItem(item);
compilation error,1217,replace,[CE] illegal start of expression, fireSeriesChanged();    ,refreshBoundsForAddedItem(item);
compilation error,1217,replace,[CE] illegal start of expression, fireSeriesChanged();    ,refreshBounds();
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  necessary,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(true);//  remove  old  items  if  necessary,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(true);//  remove  old  items  if  necessary,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,items.add(item);
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)&& Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(!Double.isNaN(a)&&!Double.isNaN(b)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1288,replace,[CE] cannot find symbol, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isVar(a)|| Double.isInfinite(b)) {
compilation error,604,add,[CE] illegal start of expression,   ,if(item.getPeriod().compareTo(last) == 0) {
compilation error,604,add,[CE] illegal start of expression,   ,if(item.getPeriod().compareTo(last)> 0) {
compilation error,604,add,[CE] illegal start of expression,   ,if(item.getPeriod().compareTo(last) < 0) {
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  -  1;    ,this.maxY = Double.NaN - 1;
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.timePeriodClass = getTimePeriodClass();
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.timePeriodClass = getTimePeriodClassName();
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.timePeriodClass = createTimePeriodClass();
compilation error,1068,replace,[CE] illegal start of expression, e.printStackTrace();    ,e.printStackTrace(clone);
compilation error,1068,replace,[CE] illegal start of expression, e.printStackTrace();    ,e.printStackTrace(this);
compilation error,1068,replace,[CE] illegal start of expression, e.printStackTrace();    ,e.printStackTrace(start);
compilation error,584,replace,[CE] illegal start of type, else  if(!this.timePeriodClass.isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.equals(c)&& notify) { throw new SeriesException(""); }
compilation error,584,replace,[CE] illegal start of type, else  if(!this.timePeriodClass.isAssignableFrom(c))  {    ,else if(this.timePeriodClass.equals(c)&& notify) { throw new SeriesException(""); }
compilation error,879,replace,[CE] cannot assign a value to final variable removed, boolean  removed  =  true;    ,final boolean removed = true;
patch is same with buggy,879,replace,, boolean  removed  =  true;    ,boolean removed = true;
compilation error,626,replace,[CE] cannot find symbol add, if(notify)  {    ,if(this.add) {
increase failing tests,626,replace, [FE] AssertionFailedError, if(notify)  {    ,if(!added) {
patch is same with buggy,878,replace,, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long duration = getTimePeriod(0).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long duration = getTimePeriod(0).getItemCount();
compilation error,878,replace,[CE] cannot find symbol latest, long  duration  =  getTimePeriod(0).getSerialIndex();    ,long duration = getTimePeriod(1).getSerialIndex();
patch is same with buggy,1288,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)&& Double.isNaN(b)) {
compilation error,681,add,[CE] no suitable method found for add(RegularTimePeriod,Number),   ,this.data.add(period, value);
compilation error,681,add,[CE] no suitable constructor found for Double(Number),   ,this.data.add(period, new Double(value));
compilation error,681,add,[CE] no suitable constructor found for Long(Number),   ,this.data.add(period, new Long(value));
increase failing tests,565,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,565,add,[CE] cannot find symbol,   ,item.addChangeListener(this);
compilation error,565,add,[CE] cannot find symbol,   ,updateBounds(item.getPeriod(), this.data);
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(this.timePeriodClass.isAssignableFrom(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(this.timePeriodClass.equals("")) {
compilation error,1269,replace,[CE] cannot find symbol m, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(m)|| Double.isNaN(b)) {
increase failing tests,581,replace, [FE] NullPointerException, if(c!=  null)  {    ,if(c!= null &&!notify) {
increase failing tests,581,replace, [FE] NullPointerException, if(c!=  null)  {    ,if(c!= null &&!this.timePeriodClass.equals(c)) {
increase failing tests,581,replace, [FE] NullPointerException, if(c!=  null)  {    ,if(c!= null &&!this.timePeriodClass.isAssignableFrom(c)) {
compilation error,1265,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)] ||(a <= 0.0)||(b <= 0.0)) {
compilation error,695,replace,[CE] illegal start of expression, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); notifyListeners(new DataItem(period, null, notify));
compilation error,695,replace,[CE] illegal start of expression, item.setValue(value);  fireSeriesChanged();    ,item.addValue(value); fireSeriesChanged();
compilation error,695,replace,[CE] not a statement, item.setValue(value);  fireSeriesChanged();    ,item.setValue(value); notify;
compilation error,187,replace,[CE] cannot find symbol, this.domain  =  domain;  this.range  =  range;    ,this.timePeriodClass = name.getRowKey();
compilation error,187,replace,[CE] ';' expected, this.domain  =  domain;  this.range  =  range;    ,this.timePeriodClass = name.class();
patch is same with buggy,1265,replace,, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)&& Double.isInfinite(b)) {
compilation error,596,replace,[CE] cannot assign a value to final variable added, boolean  added  =  true;    ,final boolean added = true;
patch is same with buggy,596,replace,, boolean  added  =  true;    ,boolean added = true;
compilation error,653,replace,[CE] cannot find symbol, add(period,  value,  false);    ,setValue(period, value, false);
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount();    ,int count = getItemCount(0);
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount();    ,int count = getItemCount() - 1;
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount();    ,int count = getItemCount(1);
increase failing tests,1215,add, [FE] AssertionFailedError,   ,this.minY = yN.doubleValue();
compilation error,1215,add,[CE] cannot find symbol minX,   ,this.minX = minIgnoreNaN(this.minX, y);
compilation error,694,replace,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;, item.setValue(value);    ,item.setValue(value, notify);
compilation error,694,replace,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;, item.setValue(value);    ,item.setValue(value, notify);
patch is same with buggy,694,replace,, item.setValue(value);    ,item.setValue(value);
compilation error,584,replace,[CE] , else  if(!this.timePeriodClass.isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)&&(item.getPeriod().getClass()!= null || item.getPeriod().getClass().getName().equals("")) {
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0)||(b <= 0.0)) {
compilation error,1056,add,[CE] no suitable method found for add(int),   ,this.data.add(start);
compilation error,1056,add,[CE] cannot find symbol Arrays,   ,Arrays.sort(this.data);
increase failing tests,187,replace, [FE] NullPointerException, this.domain  =  domain;  this.range  =  range;    ,if(this.domain!= null) { this.domain = domain; this.range = range; } else { this.data.add(name); }
compilation error,694,replace,[CE] cannot find symbol, item.setValue(value);    ,item.addChangeListener(this);
compilation error,694,replace,[CE] cannot find symbol, item.setValue(value);    ,item.setDataItem(getDataItem(period), value, notify);
compilation error,694,replace,[CE] cannot find symbol, item.setValue(value);    ,item.add(period, notify);
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)&& Double.isNaN(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(!Double.isNaN(a)&&!Double.isNaN(b)) {
compilation error,187,add,[CE] cannot find symbol,   ,this.domain = getDomain();
compilation error,187,add,[CE] no suitable method found for getDataItem(Comparable),   ,this.data = getDataItem(name);
compilation error,1289,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) { return a; if(Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1289,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(b)) { return a; if(Double.isNaN(b)) { return Math.min(a, b); }
increase failing tests,1289,add, [FE] AssertionFailedError,   ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) { return a; }
compilation error,1058,replace,[CE] illegal start of type, if(this.data.size()  >  1)  {    ,if(start < end) { throw new IllegalArgumentException(""); }
compilation error,1058,replace,[CE] illegal start of type, if(this.data.size()  >  1)  {    ,if(start < this.data.size()) { throw new IllegalArgumentException(""); }
increase failing tests,1058,add, [FE] IllegalArgumentException,   ,if(this.data.size() > 0) { throw new IllegalArgumentException(""); }
compilation error,1058,add,[CE] illegal start of expression,   ,if(this.data.size() > 0) {
increase failing tests,1058,add, [FE] SeriesException,   ,if(this.data.size() > 0) { throw new SeriesException(""); }
compilation error,878,replace,[CE] cannot find symbol, long  maximum  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(0).getMaximumItemAge();
compilation error,878,replace,[CE] cannot find symbol latest, long  maximum  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(1).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol, long  maximum  =  getTimePeriod(0).getSerialIndex();    ,long maximum = getTimePeriod(0).getMillis();
compilation error,564,replace,[CE] cannot find symbol, add(item,  false);    ,updateBounds(item, true);
compilation error,564,replace,[CE] cannot find symbol, add(item,  false);    ,updateBounds(item, false);
compilation error,186,replace,[CE] no suitable constructor found for Series(Comparable,String,String), super(name,  domain);    ,super(name, domain, range);
patch is same with buggy,186,replace,, super(name,  domain);    ,super(name, domain);
compilation error,186,replace,[CE] cannot find symbol array, super(name,  domain);    ,super(name, domain, array);
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,boolean added = false;
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,boolean added = true;
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,final boolean added = true;
compilation error,1292,replace,[CE] bad operand types for binary operator '||', if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Math.max(a, b)|| Double.isNaN(a)|| Double.isNaN(b)) {
increase failing tests,653,add, [FE] SeriesException,   ,add(period, value, true);
increase failing tests,653,add, [FE] SeriesException,   ,add(period, new Double(value));
increase failing tests,653,add, [FE] SeriesException,   ,add(period, new Double(value), true);
compilation error,187,add,[CE] cannot find symbol,   ,this.timePeriodClass = createTimePeriodClass(name);
increase failing tests,606,add, [FE] AssertionFailedError,   ,this.data.add(item); fireSeriesChanged();
compilation error,606,add,[CE] bad operand type TimeSeriesDataItem for unary operator '-',   ,this.data.add(-item); fireSeriesChanged();
patch is same with buggy,634,replace,, removeAgedItems(true);//  remove  old  items  if  necessary,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,removeAgedItems(true);// remove old items if necessary, but // don't notify anyone, because that // happens next anyway...
compilation error,170,replace,[CE] illegal start of expression, fireSeriesChanged();    ,this.data.add(name);
compilation error,170,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds();
compilation error,170,replace,[CE] illegal start of expression, fireSeriesChanged();    ,this.copyIn(name);
patch is same with buggy,1062,replace,, copy.add(item);    ,copy.add(item);
compilation error,1062,replace,[CE] cannot find symbol Item, copy.add(item);    ,copy.add(Item.clone());
compilation error,1062,replace,[CE] no suitable method found for add(int,TimeSeriesDataItem), copy.add(item);    ,copy.add(-index - 1, item);
compilation error,877,add,[CE] illegal start of expression,   ,if(this.data!= null) {
compilation error,877,add,[CE] illegal start of expression,   ,if(getItemCount() > 1) {
compilation error,877,add,[CE] illegal start of expression,   ,if(this.data == null) {
increase failing tests,603,replace, [FE] ArrayIndexOutOfBoundsException, RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2 - 1);
patch is same with buggy,603,replace,, RegularTimePeriod  last  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2);
compilation error,1211,replace,[CE] bad operand types for binary operator '+', item.setValue(item.getValue());    ,item.setValue(item.getValue() + 1);
compilation error,1211,replace,[CE] bad operand types for binary operator '-', item.setValue(item.getValue());    ,item.setValue(item.getValue() - 1);
compilation error,1211,replace,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;, item.setValue(item.getValue());    ,item.setValue(item.getValue(), this.data.size());
patch is same with buggy,634,replace,, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway...    ,removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because that // happens next anyway...
compilation error,627,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" for that time period. Duplicates are not");
compilation error,627,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(" but the series already contains an observation");
increase failing tests,878,add, [FE]  Size,   ,long last = getTimePeriod(getItemCount() + 1).getSerialIndex();
increase failing tests,878,add, [FE]  Size,   ,long last = getTimePeriod(getItemCount()).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long max = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long max = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long max = getTimePeriod(getItemCount() + 1).getSerialIndex();
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,637,add,[CE] illegal start of expression,   ,if(!added) {
compilation error,637,add,[CE] method get in interface List cannot be applied to given types;,   ,if(!added) { throw new SeriesException("TimeSeriesDataItem item does not belong to the same category." + this.data.get(item)); }
compilation error,463,add,[CE] unreachable statement,   ,return getDataItem(index).getPeriod();
compilation error,463,add,[CE] ';' expected,   ,for(int i = 0; i < this.data.size(); i++) { RegularTimePeriod getTimePeriod(getItemCount(), index); } else { return getDataItem(index).getPeriod(); }
compilation error,463,add,[CE] cannot find symbol,   ,checkPeriod(getDataItem(index));
compilation error,879,add,[CE] variable removed is already defined in method removeAgedItems(boolean),   ,boolean removed = true;
compilation error,879,add,[CE] variable latest is already defined in method removeAgedItems(boolean),   ,long latest = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,879,add,[CE] variable latest is already defined in method removeAgedItems(boolean),   ,long latest = getTimePeriod(getItemCount() - 1).getSerialIndex(); boolean removed = true;
compilation error,596,replace,[CE] cannot find symbol added, fireSeriesChanged();    ,this.data.add(item);
patch is same with buggy,596,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,596,replace,[CE] cannot find symbol, fireSeriesChanged();    ,updateBounds();
compilation error,603,add,[CE] variable last is already defined in method add(TimeSeriesDataItem,boolean),   ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2);
compilation error,603,add,[CE] variable last is already defined in method add(TimeSeriesDataItem,boolean),   ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2 + 1);
patch is same with buggy,626,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,626,replace,[CE] class or interface expected, fireSeriesChanged();    ,this.data.add(item);
compilation error,626,replace,[CE] class or interface expected, fireSeriesChanged();    ,refreshBounds();
compilation error,193,replace,[CE] cannot find symbol NaN, this.minY  =  Double.NaN  -  1;    ,this.minY = Long.NaN + 1;
increase failing tests,627,replace, [FE] AssertionFailedError, fireSeriesChanged();    ,this.data.add(item);
patch is same with buggy,627,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,627,replace,[CE] no suitable method found for add(int), fireSeriesChanged();    ,this.data.add(0);
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(m)) {
compilation error,694,add,[CE] cannot find symbol,   ,item.add(period, notify);
compilation error,694,add,[CE] cannot find symbol,   ,item.setDataItem(getDataItem(period), value, notify);
compilation error,694,add,[CE] cannot find symbol,   ,item.setDataItem(getDataItem(period), value);
compilation error,189,add,[CE] cannot find symbol,   ,if(name!= null) { this.timePeriodClass = name.getClass(); } else { this.data = new ArrayList(); }
compilation error,1292,replace,[CE] cannot find symbol c, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)) {
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,boolean added = notify;
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,boolean added = notify;
compilation error,596,add,[CE] variable added is already defined in method add(TimeSeriesDataItem,boolean),   ,final boolean added = notify;
compilation error,598,add,[CE] illegal start of expression,   ,if(count == 0 && item.getPeriod().compareTo(" ")> 0) {
compilation error,598,add,[CE] illegal start of expression,   ,if(count == 0 && item.getPeriod().compareTo( " ")> 0) {
compilation error,598,add,[CE] illegal start of expression,   ,if(count == 0 && item.getPeriod().compareTo(", ")> 0) {
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,[Delete] else if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,1273,replace,[CE] 'else' without 'if', if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,} else if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,637,replace,[CE] cannot find symbol add, if(!notify)  {    ,if(!add) {
compilation error,877,add,[CE] no suitable method found for getItemCount(int),   ,int count = getItemCount(0);
compilation error,877,add,[CE] no suitable method found for getItemCount(int),   ,int count = getItemCount(1);
patch is same with buggy,1288,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
increase failing tests,1288,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,668,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data);
compilation error,668,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds();
compilation error,668,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), notify);
compilation error,1288,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1288,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)&& Double.isNaN(b)) {
compilation error,1288,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,[Delete]
compilation error,1273,replace,[CE] class or interface expected, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,}
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }    ,{
compilation error,1269,replace,[CE] cannot find symbol c, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(c)) {
patch is same with buggy,581,replace,, if(c!=  this.timePeriodClass)  {    ,if(c!= this.timePeriodClass) {
increase failing tests,581,replace, [FE] NullPointerException, if(c!=  this.timePeriodClass)  {    ,if(c!= null && this.timePeriodClass!= null) {
compilation error,1296,add,[CE] illegal start of expression,   ,[Delete] else if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,1296,add,[CE] 'else' without 'if',   ,} else if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; }
compilation error,654,add,[CE] no suitable method found for add(RegularTimePeriod,Double),   ,this.data.add(period, new Double(value));
compilation error,654,add,[CE] no suitable method found for add(RegularTimePeriod,double),   ,this.data.add(period, value);
compilation error,654,add,[CE] cannot find symbol,   ,updateBounds(period, getPeriodType(), value);
compilation error,1266,replace,[CE] illegal start of expression, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,[Delete]
compilation error,1266,replace,[CE] illegal start of type, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,}
compilation error,1266,replace,[CE] 'else' without 'if', if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,{
patch is same with buggy,879,replace,, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long maximum = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long maximum = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximum  =  getTimePeriod(getItemCount()  -  1).getSerialIndex();    ,long maximum = getTimePeriod(getItemCount() + 1).getSerialIndex();
compilation error,637,add,[CE] illegal start of expression,   ,if(added) {
increase failing tests,637,add, [FE] SeriesException,   ,if(added) { throw new SeriesException("TimeSeriesDataItem item has changed:" + item.getPeriod()); }
compilation error,637,add,[CE] cannot find symbol,   ,if(added) { throw new SeriesException("TimeSeriesDataItem item has changed:" + item.getPeriodType() +" does not match the data it contains"); }
compilation error,1064,replace,[CE] cannot find symbol, copy.add(clone);    ,if(clone!= null) { copy.add(clone); } else { clone.add(item); }
increase failing tests,600,add, [FE] AssertionFailedError,   ,fireSeriesChanged(); this.data.add(item);
compilation error,600,add,[CE] cannot find symbol b,   ,fireSeriesChanged(); b.append(",");
increase failing tests,1058,replace, [FE] AssertionFailedError, if(this.data.size()  >  1)  {    ,if(this.data.size() < 0) {
increase failing tests,1058,replace, [FE]  Size, if(this.data.size()  >  1)  {    ,if(this.data.size() == 0) {
compilation error,186,add,[CE] call to super must be first statement in constructor,   ,super(name);
compilation error,186,add,[CE] call to super must be first statement in constructor,   ,super(name, domain);
compilation error,186,add,[CE] call to super must be first statement in constructor,   ,super(domain);
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), this.data);
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), notify);
compilation error,695,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(item.getPeriod(), notify);
compilation error,188,add,[CE] cannot find symbol time,   ,this.timePeriodClass = time.getClass();
compilation error,188,add,[CE] cannot find symbol,   ,this.data = new ArrayList();
increase failing tests,680,add, [FE] SeriesException,   ,add(period, value, true);
compilation error,680,add,[CE] no suitable method found for add(RegularTimePeriod,Number,boolean),   ,this.data.add(period, value, true);
compilation error,680,add,[CE] no suitable method found for add(RegularTimePeriod,Number,boolean),   ,this.data.add(period, value, false);
compilation error,582,add,[CE] inconvertible types,   ,c =(TimePeriod)item.getPeriod().getClass();
increase failing tests,582,add, [FE] NullPointerException,   ,c = this.timePeriodClass.getClass();
patch is same with buggy,188,replace,, this.range  =  domain;    ,this.range = domain;
patch is same with buggy,1265,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
compilation error,190,add,[CE] generics are not supported in -source 1.4,   ,if(getTimePeriodClass()!= null) { this.timePeriodClass = getTimePeriodClass(); } else { this.data = new ArrayList < TimeSeries>(0.0, 0.0, 0.0); }
compilation error,190,add,[CE] cannot find symbol,   ,if(getTimePeriodClass()!= null) { this.timePeriodClass = getTimePeriodClass(); } else { this.data = new ArrayList(); }
compilation error,629,replace,[CE] class or interface expected, fireSeriesChanged();    ,this.data.add(item);
patch is same with buggy,629,replace,, fireSeriesChanged();    ,fireSeriesChanged();
compilation error,629,replace,[CE] class or interface expected, fireSeriesChanged();    ,updateBoundsForAddedItem(item);
patch is same with buggy,596,replace,, boolean  added  =  notify;    ,boolean added = notify;
compilation error,596,replace,[CE] notify has private access in Series, boolean  added  =  notify;    ,boolean added = this.notify;
patch is same with buggy,596,replace,, boolean  added  =  notify;    ,boolean added = notify;
compilation error,463,replace,[CE] no suitable method found for add(int), this.data.get(index);    ,this.data.add(index);
compilation error,463,replace,[CE] missing return statement, this.data.get(index);    ,this.data.remove(index);
patch is same with buggy,463,replace,, this.data.get(index);    ,this.data.get(index);
compilation error,188,add,[CE] cannot find symbol min,   ,this.min = min; this.range = range;
patch is same with buggy,1212,replace,, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,if(yN!= null) { double y = yN.doubleValue(); item.setValue(item.getValue()); item.setValue(item.getValue()); }
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  double  y  =  yN.doubleValue();  item.setValue(item.getValue());  item.setValue(item.getValue());  }    ,if(yN!= null) { double y = yN.doubleValue(); item.setValue(item.getValue()); item.addValue(item.getValue()); }
patch is same with buggy,1215,replace,, this.maxY  =  maxIgnoreNaN(this.maxY,  y);    ,this.maxY = maxIgnoreNaN(this.maxY, y);
increase failing tests,1215,replace, [FE] AssertionFailedError, this.maxY  =  maxIgnoreNaN(this.maxY,  y);    ,this.maxY = minIgnoreNaN(this.maxY, y);
compilation error,1215,replace,[CE] cannot find symbol, this.maxY  =  maxIgnoreNaN(this.maxY,  y);    ,this.maxY = maximumIgnoreNaN(this.maxY, y);
compilation error,1289,replace,[CE] illegal start of expression, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,[Delete]
compilation error,1289,replace,[CE] illegal start of type, if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,}
compilation error,1289,replace,[CE] 'else' without 'if', if(Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,{
compilation error,667,replace,[CE] bad operand types for binary operator '+', item.setValue(item.getValue());    ,item.setValue(item.getValue() + 1);
compilation error,667,replace,[CE] cannot find symbol, item.setValue(item.getValue());    ,item.setValue(period.getValue() + 1);
compilation error,667,replace,[CE] method setValue in class TimeSeriesDataItem cannot be applied to given types;, item.setValue(item.getValue());    ,item.setValue(item.getValue(), notify);
patch is same with buggy,189,replace,, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getClass();
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getComparable();
compilation error,189,replace,[CE] ';' expected, this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getClass(), range;
increase failing tests,878,add, [FE]  Size,   ,long last = getTimePeriod(getItemCount() + 1).getSerialIndex();
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  +  1;    ,this.minY = Double.NaN + 1;
compilation error,1057,add,[CE] cannot find symbol Copy,   ,Copy.data = new java.util.ArrayList(start);
increase failing tests,600,replace, [FE] AssertionFailedError, added  =  notify;    ,added = false;
compilation error,600,replace,[CE] incompatible types, added  =  notify;    ,added = this;
compilation error,192,add,[CE] cannot find symbol minItemAge,   ,this.minItemAge = Long.MIN_VALUE;
compilation error,192,add,[CE] cannot find symbol minItemAge,   ,this.minItemAge = Long.MAX_VALUE;
compilation error,192,add,[CE] cannot find symbol minItemCount,   ,this.minItemCount = Long.MIN_VALUE;
patch is same with buggy,1265,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1265,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)] {
compilation error,637,add,[CE] illegal start of expression,   ,if(!notify) {
compilation error,681,replace,[CE] illegal start of expression, fireSeriesChanged();    ,this.data.add(period);
compilation error,681,replace,[CE] illegal start of expression, fireSeriesChanged();    ,updateBounds(period, getPeriodType(), value);
compilation error,681,replace,[CE] illegal start of expression, fireSeriesChanged();    ,this.data.add(period, value);
patch is same with buggy,195,replace,, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.minY = Double.NaN; this.maxY = Double.NaN;
compilation error,195,replace,[CE] illegal start of expression, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.minX = Double.NaN; this.maxY = Double.NaN;
patch is same with buggy,195,replace,, this.minY  =  Double.NaN;  this.maxY  =  Double.NaN;    ,this.minY = Double.NaN;this.maxY = Double.NaN;
patch is same with buggy,1068,replace,, System.err.println( "Unable  to  add  cloned  data  item. "  +  clone.toString());    ,System.err.println("Unable to add cloned data item." + clone.toString());
compilation error,1068,replace,[CE] illegal start of expression, System.err.println( "Unable  to  add  cloned  data  item. "  +  clone.toString());    ,System.err.println("Unable to add cloned data item." + clone.getName());
compilation error,1068,replace,[CE] illegal start of expression, System.err.println( "Unable  to  add  cloned  data  item. "  +  clone.toString());    ,System.err.println("Unable to add cloned data item." + this.data.toString());
patch is same with buggy,194,replace,, this.minY  =  Double.NaN;    ,this.minY = Double.NaN;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN;    ,this.minY = Double.NaN - 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN;    ,this.minY = Double.NaN + 1;
patch is same with buggy,1217,replace,, item.setValue(yN);  fireSeriesChanged();    ,item.setValue(yN); fireSeriesChanged();
compilation error,1217,replace,[CE] illegal start of expression, item.setValue(yN);  fireSeriesChanged();    ,item.setValue(yN);
compilation error,1217,replace,[CE] illegal start of expression, item.setValue(yN);  fireSeriesChanged();    ,item.setValue(yN); continue;
patch is same with buggy,189,replace,, this.timePeriodClass  =  timePeriodClass;    ,this.timePeriodClass = timePeriodClass;
compilation error,189,replace,[CE] incompatible types, this.timePeriodClass  =  timePeriodClass;    ,this.timePeriodClass = name;
compilation error,189,replace,[CE] cannot find symbol, this.timePeriodClass  =  timePeriodClass;    ,this.timePeriodClass = TimePeriodClass.class;
compilation error,1269,replace,[CE] cannot find symbol c, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)) {
patch is same with buggy,463,replace,, return  getDataItem(index).getPeriod();    ,return getDataItem(index).getPeriod();
compilation error,463,replace,[CE] method getPeriod in class TimeSeriesDataItem cannot be applied to given types;, return  getDataItem(index).getPeriod();    ,return getDataItem(index).getPeriod(0);
compilation error,463,replace,[CE] cannot find symbol, return  getDataItem(index).getPeriod();    ,return getDataItem(index).getTimePeriod();
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,[Delete]
compilation error,1273,replace,[CE] class or interface expected, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,}
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }    ,{
compilation error,463,add,[CE] method getTimePeriod in class TimeSeries cannot be applied to given types;,   ,checkPeriod(getTimePeriod());
compilation error,463,add,[CE] cannot find symbol,   ,checkPeriod(getTimePeriod(index));
compilation error,463,add,[CE] cannot find symbol,   ,checkOldFormat();
compilation error,637,replace,[CE] cannot find symbol Notify, if(!notify)  {    ,if(Notify) {
compilation error,1269,replace,[CE] bad operand types for binary operator '||', if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Math.min(a, b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1212,add,[CE] cannot find symbol yy,   ,if(yN!= null) { double y = yN.doubleValue(); this.minY = minIgnoreNaN(this.minY, yy); this.maxY = maxY.doubleValue(); }
compilation error,1212,add,[CE] cannot find symbol yy,   ,if(yN!= null) { double y = yN.doubleValue(); this.minY = minIgnoreNaN(this.minY, yy); item.setValue(item.getValue()); }
compilation error,1212,add,[CE] cannot find symbol yy,   ,if(yN!= null) { double y = yN.doubleValue(); item.setIgnoreNaN(this.minY, yy); this.maxY = yN.doubleValue(); }
increase failing tests,193,add, [FE] StackOverflowError,   ,this.data.add(new TimeSeries(name, domain, range));
compilation error,193,add,[CE] cannot find symbol,   ,this.data.add(new Data(name, domain, range));
compilation error,1212,replace,[CE] bad operand types for binary operator '<', if(yN!=  null)  {    ,if(yN!= null && item.getValue() < this.minY) {
compilation error,1212,replace,[CE] bad operand types for binary operator '<', if(yN!=  null)  {    ,if(yN!= null && item.getValue() < this.maxY) {
compilation error,1212,replace,[CE] incomparable types: RegularTimePeriod and TimeSeries, if(yN!=  null)  {    ,if(yN!= null && item.getPeriod() == this) {
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)&& Double.isInfinite(b)) {
