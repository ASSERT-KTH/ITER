compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because that
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anybody, because that
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isNaN(a)|| Double.isNaN(b)) }
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  /  10;    ,this.minY = Double.NaN / 10;
compilation error,188,replace,[CE] cannot find symbol maximumY, this.maxY  =  minY;    ,this.maxY = maximumY;
compilation error,879,add,[CE] possible loss of precision,   ,int maximal = getTimePeriod(getItemCount() - 2).getSerialIndex();
patch is same with buggy,879,replace,, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long maximal = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long maximal = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long maximal = getTimePeriod(getItemCount() / 2).getSerialIndex();
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.equals(c)||  item.getClass().isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.equals("")|| item.getClass().isAssignableFrom(c)) {
compilation error,584,replace,[CE] method isAssignableFrom in class Class cannot be applied to given types;, else  if(!this.timePeriodClass.equals(c)||  item.getClass().isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.equals("")|| c.getClass().isAssignableFrom(item)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)) }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a))!=
patch is same with buggy,1057,replace,, copy.data  =  new  java.util.ArrayList(start  +  end);    ,copy.data = new java.util.ArrayList(start + end);
compilation error,1057,replace,[CE] no suitable constructor found for ArrayList(int,int), copy.data  =  new  java.util.ArrayList(start  +  end);    ,copy.data = new java.util.ArrayList(start + end, this.maximumItemCount);
compilation error,1292,add,[CE] ')' expected,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,627,add,[CE] illegal start of expression,   ,[Delete]
compilation error,627,add,[CE] illegal start of expression,   ,if(this.data!= null) { if(this.data!= null) { updateBoundsForAddedItem(item); } else { throw new SeriesException(" "); }
compilation error,627,add,[CE] illegal start of expression,   ,if(this.data!= null) { if(this.data == null) { updateBoundsForAddedItem(item); } else { throw new SeriesException(" "); }
compilation error,627,add,[CE] illegal start of expression,   ,if(this.data!= null) { updateBoundsForAddedItem(item); >>
compilation error,627,add,[CE] generics are not supported in -source 1.4,   ,if(this.data!= null) { updateBoundsForAddedItem(item); <
compilation error,1292,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isNaN(a)|| Double.isInfinite(b)) }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)&&!Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0)&&(b <= 0.0)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0)&&(b <= 0.0)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a << 0.0)&&(b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isNaN(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isNaN(c)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isNaN(b)) {
compilation error,1292,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(b))  {    ,if(Double.isNaN(b)&& Double.isNaN(a)) }
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.equals(c)||  item.getClass().isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.equals(c)|| item.getClass().isAssignableFrom(c)) {
patch is same with buggy,188,replace,, this.minY  =  minY;    ,this.minY = minY;
compilation error,188,replace,[CE] cannot find symbol MinY, this.minY  =  minY;    ,this.minY = MinY;
compilation error,188,replace,[CE] cannot find symbol Y, this.minY  =  minY;    ,this.minY = Y;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 4;
compilation error,1292,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)&& Double.isInfinite(b)) }
compilation error,187,add,[CE] not a statement,   ,if(domain == null) { this.domain = domain; slated else { this.domain = domain; this.range = range; }
compilation error,187,add,[CE] not a statement,   ,if(domain == null) { this.domain = domain; figured else if(domain!= null) { this.domain = domain; this.range = range; }
compilation error,187,add,[CE] not a statement,   ,if(domain == null) { this.domain = domain; slated else { this.range = range; }
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 2;
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN * 2;
increase failing tests,1265,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b)||(a  >=  0.0)&&(b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0)||(b <= 0.0)) {
patch is same with buggy,187,replace,, if(domain  ==  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,if(domain == null) { this.domain = domain; this.range = range; } else { this.domain = domain; this.range = range; }
compilation error,1057,replace,[CE] cannot find symbol index, copy.data  =  new  java.util.ArrayList(end  +  1);    ,copy.data = new java.util.ArrayList(index + 1);
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  *  2;    ,this.maxY = Double.NaN * 2;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isNaN(a)) {
compilation error,603,add,[CE] variable last is already defined in method add(TimeSeriesDataItem,boolean),   ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2);
patch is same with buggy,1273,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
patch is same with buggy,1273,replace,, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,if(Double.isInfinite(a)|| Double.isInfinite(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
patch is same with buggy,1292,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isNaN(a)|| Double.isInfinite(b)) {
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  >  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b > 0.0)) {
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }, but // don't notify anyone, because that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }, but // don't notify anyone, because that // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if needed, but // don't notify
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b > 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a < 0.0 && b > 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b > 0.0)) {
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isNaN(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isNaN(a)|| Double.isInfinite(b)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals(c)|| item.getClass().isAssignableFrom(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals(c)&& item.getClass().isAssignableFrom(c)) {
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  /  2;    ,this.minX = Double.NaN * 2 + 1;
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException(""); }
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException(" "); }
compilation error,584,replace,[CE] , else  if(!this.timePeriodClass.isAssignableFrom(c))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException("")); }
compilation error,1269,replace,[CE] cannot find symbol c, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)||(a <= 0.0 && b <= 0.0)) {
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a >= 0.0 && b <= 0.0)) {
increase failing tests,653,add, [FE] SeriesException,   ,add(period, new Double(value), true);
increase failing tests,653,add, [FE] SeriesException,   ,add(period, new Double(value), false);
increase failing tests,653,add, [FE] SeriesException,   ,add(period, new Double(value));
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b < 0.0)) {
patch is same with buggy,1212,replace,, if(yN!=  null)  {  yN  =  item.getValue();  }    ,if(yN!= null) { yN = item.getValue(); }
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  yN  =  item.getValue();  }    ,if(yN == null) { yN = item.getValue(); }
compilation error,1212,replace,[CE] illegal start of expression, if(yN!=  null)  {  yN  =  item.getValue();  }    ,if(yN!= null) { yN = item.getValue(); [Delete]
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  name.getClass();  }  else  if(name!=  null)  {  this.data.add(name);  }    ,[Delete]
increase failing tests,189,replace, [FE] NullPointerException, if(name!=  null)  {  this.timePeriodClass  =  name.getClass();  }  else  if(name!=  null)  {  this.data.add(name);  }    ,if(this.timePeriodClass!= null) { this.timePeriodClass = name.getClass(); } else if(name!= null) { this.data.add(name); }
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  name.getClass();  }  else  if(name!=  null)  {  this.data.add(name);  }    ,if(!this.timePeriodClass.isArray()) { if(name!= null) { this.timePeriodClass = name.getClass(); } else if(name!= null) { this.data.add(name); }
increase failing tests,877,replace, [FE] ArrayIndexOutOfBoundsException, if(this.data.size()  >  0)  {    ,if(this.data!= null) {
compilation error,1212,add,[CE] illegal start of expression,   ,if(yN!= null) { yN = item.getValue(); >>
patch is same with buggy,1292,replace,, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN + 1;
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN + 1;
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException(" "); }
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException( " "); }
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException( ""); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1;    ,this.minY = Double.NaN / 2;
compilation error,194,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  /  1;    ,this.minX = Double.NaN / 2;
compilation error,188,add,[CE] cannot find symbol MinY,   ,this.minY = MinY;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 12;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,627,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(this.timePeriodClass)) { updateBoundsForAddedItem(item); >>
compilation error,627,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(this.timePeriodClass)) } updateBoundsForAddedItem(item); }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)) {
compilation error,878,replace,[CE] cannot find symbol latest, long  first  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long first = getTimePeriod(getItemCount() - 1).getSerialIndex();
patch is same with buggy,878,replace,, long  first  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long first = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol latest, long  first  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long first = getTimePeriod(getItemCount() ).getSerialIndex();
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount()  -  2;    ,int count = getItemCount();
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount()  -  2;    ,int count = getItemCount() - 1;
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount()  -  2;    ,int count = getItemCount() / 2;
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1064,add,[CE] illegal start of expression,   ,if(clone == null)) { copy.add(clone); } else { copy.add(item); }
compilation error,1064,add,[CE] not a statement,   ,if(clone == null) { copy.add(clone); bodied else { copy.add(item); }
patch is same with buggy,584,replace,, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals("")) { throw new SeriesException(""); }
patch is same with buggy,584,replace,, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals("")) { throw new SeriesException(" "); }
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals(" +")) { throw new SeriesException(" "); }
compilation error,1057,add,[CE] cannot find symbol,   ,java.util.ArrayList(end + 1); copy.data = new java.util.ArrayList(start + 1);
compilation error,1057,add,[CE] cannot find symbol,   ,java.util.ArrayList(end + 1); copy.data = new java.util.ArrayList(end + 1);
compilation error,584,replace,[CE] illegal start of type, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  notify)  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)|| notify) { throw new SeriesException(""); }
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  notify)  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)&& notify) { throw new SeriesException(""); }
compilation error,584,replace,[CE] illegal start of type, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  notify)  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)|| notify) { throw new SeriesException(" "); }
compilation error,189,add,[CE] illegal start of expression,   ,if(name == null) { if(domain!= null) { this.timePeriodClass = getTimePeriodClass(); } else { this.domain = domain; this.range = range; }
compilation error,189,add,[CE] illegal start of expression,   ,if(name!= null) { if(domain!= null) { this.timePeriodClass = getTimePeriodClass(); } else { this.domain = domain; this.range = range; }
compilation error,189,add,[CE] illegal start of expression,   ,if(domain!= null) { if(name.length() > 0) { this.timePeriodClass = getTimePeriodClass(); } else { this.domain = domain; this.range = range; }
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  4;    ,this.maxY = Double.NaN / 4;
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,[Delete]
compilation error,189,replace,[CE] ')' expected, if(name!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,if(name == null) { if(this.timePeriodClass!= getTimePeriodClass(); } else { this.domain = domain; this.range = range; }
compilation error,189,replace,[CE] ')' expected, if(name!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,if(name!= null) { if(this.timePeriodClass!= getTimePeriodClass(); } else { this.domain = domain; this.range = range; }
patch is same with buggy,627,replace,, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }    ,if(this.data!= null) { updateBoundsForAddedItem(item); }
increase failing tests,627,replace, [FE] AssertionFailedError, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }    ,if(this.data == null) { updateBoundsForAddedItem(item); }
compilation error,627,replace,[CE] illegal start of expression, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }    ,[Delete]
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getClass().isAssignableFrom(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)|| item.getClass().isAssignableFrom(c)) {
compilation error,584,add,[CE] illegal start of expression,   ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getClass().isAssignableFrom(c)) }
patch is same with buggy,1269,replace,, if(Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1057,add,[CE] cannot find symbol,   ,java.util.ArrayList(start + end); copy.data = new java.util.ArrayList(start + end);
compilation error,1057,add,[CE] cannot find symbol Copy,   ,Copy.data = new java.util.ArrayList(start + end);
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b < 0.0)) {
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
compilation error,576,replace,[CE] illegal start of expression, if(item  ==  null)  {  throw  new  IllegalArgumentException( " ");  }    ,[Delete]
compilation error,576,replace,[CE] <identifier> expected, if(item  ==  null)  {  throw  new  IllegalArgumentException( " ");  }    ,if(item!= null) { throw new IllegalArgumentException("Null 'item' argument. "); }
compilation error,576,replace,[CE] <identifier> expected, if(item  ==  null)  {  throw  new  IllegalArgumentException( " ");  }    ,if(item == null) { throw new IllegalArgumentException("Null 'item' argument. "); }
patch is same with buggy,1292,replace,, if(Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  10;    ,this.maxY = Double.NaN / 10;
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 4;
compilation error,194,replace,[CE] cannot find symbol minX, this.maxY  =  Double.NaN  /  2;    ,this.minX = Double.NaN / 4;
compilation error,194,replace,[CE] cannot find symbol NaN, this.maxY  =  Double.NaN  /  2;    ,this.minY = Long.NaN / 4;
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }!    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated; // removeAgedItems(false); // remove old items if needed, but // don't notify anyone, because that // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }!    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }!    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated; // removeAgedItems(false); // remove old items if needed, but // don't notify anyone, because that // happens next anyway; }!
patch is same with buggy,627,replace,, if(item.getPeriod().equals(this.timePeriodClass))  {  updateBoundsForAddedItem(item);  }    ,if(item.getPeriod().equals(this.timePeriodClass)) { updateBoundsForAddedItem(item); }
compilation error,627,replace,[CE] illegal start of expression, if(item.getPeriod().equals(this.timePeriodClass))  {  updateBoundsForAddedItem(item);  }    ,if(this.timePeriodClass!= TimeSeriesDataItem.CLASS) { if(item.getPeriod().equals(this.timePeriodClass)) { updateBoundsForAddedItem(item); }
increase failing tests,627,replace, [FE] AssertionFailedError, if(item.getPeriod().equals(this.timePeriodClass))  {  updateBoundsForAddedItem(item);  }    ,if(this.timePeriodClass.equals(item.getPeriod())) { updateBoundsForAddedItem(item); }
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  item.getClass().isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getClass().isAssignableFrom(c)) {
compilation error,584,replace,[CE] cannot find symbol, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  item.getClass().isAssignableFrom(c))  {    ,else if(!item.isAssignableFrom(c)&& item.getClass().isAssignableFrom(c)) {
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 2;
patch is same with buggy,879,replace,, long  min  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  min  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount() - 1).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  min  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount() / 2).getSerialIndex();
compilation error,603,replace,[CE] cannot find symbol last, RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod second = getTimePeriod(getItemCount() / 2 - 1);
patch is same with buggy,603,replace,, RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod second = getTimePeriod(getItemCount() / 2);
compilation error,1292,replace,[CE] illegal start of expression, if(Double.isNaN(b)||  Double.isInfinite(a))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) }
compilation error,1057,add,[CE] cannot find symbol,   ,java.util.ArrayList(start + 2); copy.data = new java.util.ArrayList(start + 2);
compilation error,1057,add,[CE] cannot find symbol Copy,   ,Copy.data = new java.util.ArrayList(start + 2);
compilation error,1064,replace,[CE] illegal start of expression, if(clone  ==  null)  {  copy.add(clone);  }  else  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); } else { copy.add(item); >>
compilation error,1064,replace,[CE] illegal start of expression, if(clone  ==  null)  {  copy.add(clone);  }  else  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); } else >> copy.add(item); }
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  2;    ,this.maxY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  /  1L;    ,this.minY = Double.NaN - 1D;
compilation error,194,replace,[CE] cannot find symbol minX, this.maxY  =  Double.NaN  /  1L;    ,this.minX = Double.NaN - 1D;
compilation error,194,replace,[CE] cannot find symbol NaN, this.maxY  =  Double.NaN  /  1L;    ,this.minY = Long.NaN - 1D;
compilation error,1273,add,[CE] 'else' without 'if',   ,else if(Double.isNaN(a)|| Double.isNaN(b)) { return b; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
patch is same with buggy,1269,replace,, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 2;
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals( " ")&& item.getClass().isAssignableFrom(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals(" ")&& item.getClass().isAssignableFrom(c)) {
compilation error,584,add,[CE] illegal start of expression,   ,else if(!this.timePeriodClass.equals( " ")&& item.getClass().isAssignableFrom(c)) }
patch is same with buggy,584,replace,, else  if(this.timePeriodClass.equals(item.getPeriod()))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals(item.getPeriod())) { throw new SeriesException(""); }
patch is same with buggy,584,replace,, else  if(this.timePeriodClass.equals(item.getPeriod()))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals(item.getPeriod())) { throw new SeriesException(" "); }
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals(item.getPeriod()))  {  throw  new  SeriesException( " ");  }    ,else if(item.getPeriod().equals(this.timePeriodClass)) { throw new SeriesException(""); }
patch is same with buggy,627,replace,, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }  else  {  this.data.add(item);  }    ,if(this.data!= null) { updateBoundsForAddedItem(item); } else { this.data.add(item); }
compilation error,627,replace,[CE] illegal start of expression, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }  else  {  this.data.add(item);  }    ,if(this.data!= null) { if(this.data!= null) { updateBoundsForAddedItem(item); } else { this.data.add(item); }
patch is same with buggy,627,replace,, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }  else  {  this.data.add(item);  }    ,if(this.data!= null) { updateBoundsForAddedItem(item); } else { this.data.add(item); }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }, but // don't notify anyone, because that // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }, but // don't notify anybody, because that // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }, but // don't notify anybody, because that // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,653,replace,[CE] cannot find symbol, add(period,  new  Double(value),  true);    ,setValue(period, new Double(value), true);
patch is same with buggy,653,replace,, add(period,  new  Double(value),  true);    ,add(period, new Double(value), true);
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&&
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| (a <= 0.0 && b <= 0.0)) {
compilation error,877,add,[CE] illegal start of expression,   ,if(this.data.size() > 0) {
compilation error,877,add,[CE] illegal start of expression,   ,if(this.data.size() > 1) {
compilation error,877,add,[CE] illegal start of expression,   ,if(this.data.size() > 2) {
compilation error,1057,add,[CE] cannot find symbol,   ,java.util.ArrayList(start + 3); copy.data = new java.util.ArrayList(start + 3);
compilation error,1057,add,[CE] cannot find symbol Copy,   ,Copy.data = new java.util.ArrayList(start + 3);
compilation error,1273,add,[CE] not a statement,   ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; bodied else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,1273,replace,[CE] not a statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; bod else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2;
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN / 2;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| (a <= 0.0 && b <= 0.0)) {
compilation error,1057,add,[CE] cannot find symbol index,   ,copy.data = new java.util.ArrayList(index + 2);
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify any, because that
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify any, because
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove items if needed, but // don't notify any, because that
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) }
compilation error,188,add,[CE] incompatible types,   ,this.timePeriodClass = new java.util.ArrayList();
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isNaN(a)) {
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  +  1;    ,this.maxY = Double.NaN + 1;
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)) }
compilation error,1292,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a))!=
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anybody, because that
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because that
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anybody, because
compilation error,637,add,[CE] illegal start of expression,   ,if(notify) { if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); }
compilation error,637,add,[CE] illegal start of expression,   ,if(notify) { if(!added) { throw new SeriesException( "TimeSeriesDataItem item does not exist: " + this); }
compilation error,637,add,[CE] illegal start of expression,   ,if(notify) { if(!added) { throw new SeriesException( "TimeSeriesDataItem item does not exist:" + this); }
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 10;
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(c)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)&& Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)&& Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
increase failing tests,189,add, [FE] NullPointerException,   ,if(name == null) { this.timePeriodClass = name.getClass(); } else if(name!= null) { this.data.add(name); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  *  2;    ,this.minY = Double.NaN / 1L;
compilation error,194,replace,[CE] cannot find symbol minX, this.maxY  =  Double.NaN  *  2;    ,this.minX = Double.NaN / 1L;
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  *  2;    ,this.minY = Double.NaN / 2L;
compilation error,1292,replace,[CE] cannot find symbol c, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)||(a <= 0.0 && b <= 0.0)) {
patch is same with buggy,1292,replace,, if(Double.isNaN(b)||  Double.isInfinite(a))  {    ,if(Double.isNaN(b)|| Double.isInfinite(a)) {
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  2;    ,this.minY = Double.NaN * 2;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }    ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,1292,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(b)) {
compilation error,1292,replace,[CE] cannot find symbol c, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(c)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1;    ,this.minY = Double.NaN * 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1;    ,this.minY = Double.NaN / 4;
compilation error,1068,replace,[CE] illegal start of expression, System.err.println( "Unable  to  add  cloned  data  item.... "  +  this.data.toString());    ,System.err.println("Unable to add cloned data item..." + this.data.toString());
compilation error,1068,replace,[CE] illegal start of expression, System.err.println( "Unable  to  add  cloned  data  item.... "  +  this.data.toString());    ,System.err.println("Unable to add cloned data item..." + this.data.get(index));
patch is same with buggy,1068,replace,, System.err.println( "Unable  to  add  cloned  data  item.... "  +  this.data.toString());    ,System.err.println("Unable to add cloned data item...." + this.data.toString());
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)&& Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)&& Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)&& Double.isInfinite(b)) }
compilation error,1273,add,[CE] 'else' without 'if',   ,else if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,637,replace,[CE] illegal start of expression, if(notify)  {  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,[Delete]
patch is same with buggy,637,replace,, if(notify)  {  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(notify) { if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  /  4;    ,this.minY = Double.NaN / 10;
compilation error,194,replace,[CE] cannot find symbol minX, this.maxY  =  Double.NaN  /  4;    ,this.minX = Double.NaN / 10;
compilation error,194,replace,[CE] cannot find symbol NaN, this.maxY  =  Double.NaN  /  4;    ,this.minY = Long.NaN / 10;
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long max = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] ';' expected, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount() - 2)getSerialIndex();
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 2 + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 4;
patch is same with buggy,188,replace,, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass();
compilation error,188,replace,[CE] ';' expected, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass(), range);
compilation error,188,replace,[CE] cannot find symbol, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = createTimePeriodClass();
patch is same with buggy,1292,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // don't notify any, because that // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove items if needed, but // don't notify any, because that // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // don't notify any, because that // happens next anyway; } 
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  /  4;    ,this.minY = Double.NaN / 4;
patch is same with buggy,637,replace,, if(!added)  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist:   "  +  this);  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(!added) throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
patch is same with buggy,637,replace,, if(!added)  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist:   "  +  this);  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(!added) throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
patch is same with buggy,637,replace,, if(!added)  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist:   "  +  this);  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(!added)throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
compilation error,1212,add,[CE] method updateBoundsForAddedItem in class TimeSeries cannot be applied to given types;,   ,if(yN!= null) { yN = item.getValue(); } else { updateBoundsForAddedItem(item, yN); }
increase failing tests,1212,add, [FE] SeriesException,   ,if(yN!= null) { yN = item.getValue(); } else { throw new SeriesException(""); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(getItemCount())) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,877,replace,, if(this.data.size()  >  0)  {    ,if(this.data.size() > 0) {
compilation error,1057,add,[CE] incompatible types,   ,copy.data = new java.util.ArrayList(start + end).clone();
compilation error,1057,add,[CE] cannot find symbol Copy,   ,Copy.data = new java.util.ArrayList(start + end);
compilation error,1064,add,[CE] 'catch' without 'try',   ,if(clone!= null) { if(clone.length == 0) { copy.add(item); }
compilation error,1064,add,[CE] cannot find symbol,   ,if(clone!= null) { copy.add(clone); } else { clone.add(item); }
compilation error,193,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN / 12;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 2;
compilation error,189,add,[CE] illegal start of expression,   ,if(range == null) { if(name.getClass()!= TimeSeries.MILLIS_PER_SECOND) { this.data.add(name); }
compilation error,189,add,[CE] illegal start of expression,   ,if(range == null) { if(name.getClass()!= TimeSeries.MILLIS_PER_HOUR) { this.data.add(name); }
compilation error,189,add,[CE] illegal start of expression,   ,if(name.length() > 0) { if(name.getClass()!= null) { this.data.add(name); }
compilation error,637,replace,[CE] illegal start of expression, if(notify)  {  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,[Delete]
patch is same with buggy,637,replace,, if(notify)  {  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(notify) { if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
patch is same with buggy,188,replace,, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass();
compilation error,188,replace,[CE] ';' expected, this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass(), range;
compilation error,188,replace,[CE] bad operand types for binary operator '*', this.timePeriodClass  =  getTimePeriodClass();    ,this.timePeriodClass = getTimePeriodClass() * 2;
compilation error,1057,add,[CE] cannot find symbol Copy,   ,Copy.data = new java.util.ArrayList(start + 3);
compilation error,1057,add,[CE] incompatible types,   ,copy.data = new java.util.ArrayList(start + 3).clone();
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0)&&(b <= 0.0)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0)&&(b <= 0.0)) {
compilation error,1265,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b) ||(a <= 0.0)&&(b <= 0.0)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals("")&& item.getClass().isAssignableFrom(c)) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(this.timePeriodClass.equals("")) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals("")) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b < 0.0)) {
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,[Delete]
compilation error,1273,replace,[CE] class or interface expected, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,}
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  a;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.min(a,  b);  }    ,{
compilation error,584,add,[CE] 'else' without 'if',   ,else if(this.timePeriodClass.isAssignableFrom(c)) {
increase failing tests,584,add, [FE] SeriesException,   ,else if(this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException(""); }
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] ')' expected,   ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,replace,[CE] cannot find symbol m, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isNaN(m)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isNaN(Math.min(a, b)) {
compilation error,188,add,[CE] incompatible types,   ,this.minY = minY +" -";
patch is same with buggy,188,replace,, this.minY  =  minY;    ,this.minY = minY;
compilation error,188,replace,[CE] cannot find symbol y, this.minY  =  minY;    ,this.minY = y;
compilation error,627,replace,[CE] illegal start of expression, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }    ,if(this.data!= null) { if(item!= null) { throw new SeriesException(" "); }
compilation error,627,replace,[CE] illegal start of expression, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }    ,if(this.data!= null) { if(item!= null) { throw new SeriesException(""); }
patch is same with buggy,634,replace,, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,removeAgedItems(true);// remove old items if needed, but // don't notify any, because that // happens next anyway...
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  +  1;    ,this.maxY = Double.NaN + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  *  2;    ,this.minY = Double.NaN / 1L;
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  *  2;    ,this.minY = Double.NaN / 2L;
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  *  2;    ,this.minY = Double.NaN / 2;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(m)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(A)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  >  0.0))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b < 0.0)) {
compilation error,627,add,[CE] illegal start of expression,   ,if(this.data!= null) { if(this.data.size() > this.maximumItemCount) { this.data.add(item); }
compilation error,627,add,[CE] illegal start of expression,   ,if(this.data!= null) { if(this.data.size() == this.maximumItemCount) { this.data.add(item); }
compilation error,627,add,[CE] illegal start of expression,   ,if(this.data!= null) { if(this.data.size() > this.maximumItemCount) { this.data.add(item); } else { this.data.add(item); }
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,627,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(this.timePeriodClass)) } updateBoundsForAddedItem(item); }
compilation error,627,replace,[CE] '(' expected, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }  else  {  this.data.add(item);  }    ,if(this.data!= null) { updateBoundsForAddedItem(item); if else { this.data.add(item); }
compilation error,627,replace,[CE] '(' expected, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }  else  {  this.data.add(item);  }    ,if(this.data!= null) { updateBoundsForAddedItem(item); if else { this.data.add(item); }
compilation error,627,replace,[CE] , if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }  else  {  this.data.add(item);  }    ,if(this.data!= null) { updateBoundsForAddedItem(item); } else if(this.data.add(item); }
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException(""); }
compilation error,584,replace,[CE] , else  if(!this.timePeriodClass.isAssignableFrom(c))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException("")); }
compilation error,584,replace,[CE] illegal start of type, else  if(!this.timePeriodClass.isAssignableFrom(c))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.equals(c)) { throw new SeriesException(""); }
patch is same with buggy,1269,replace,, if(Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,replace,[CE] cannot find symbol c, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,replace,[CE] cannot find symbol v, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(v)||(a <= 0.0 && b <= 0.0)) {
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||(a  <=  0.0  &&  b  >  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b > 0.0)) {
compilation error,1292,replace,[CE] cannot find symbol c, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(c)) {
patch is same with buggy,1292,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a || b <= 0.0)) {
patch is same with buggy,1057,replace,, copy.data  =  new  java.util.ArrayList(start  +  end);    ,copy.data = new java.util.ArrayList(start + end);
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,627,add,[CE] ,   ,if(this.data!= null) { updateBoundsForAddedItem(item); if else { throw new SeriesException(" "); }
compilation error,627,add,[CE] ,   ,if(this.data!= null) { updateBoundsForAddedItem(item); if else { throw new SeriesException(" "); Afterward
compilation error,627,add,[CE] ';' expected,   ,if(this.data!= null) { updateBoundsForAddedItem(item); } else { throw new SeriesException(" "); Afterward
increase failing tests,653,add, [FE] SeriesException,   ,add(period, new Double(value), false);
increase failing tests,653,add, [FE] SeriesException,   ,add(period, new Double(value));
increase failing tests,653,add, [FE] SeriesException,   ,add(period, new Double(value), true);
patch is same with buggy,1292,replace,, if(Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a))  {    ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1292,replace,[CE] ')' expected, if(Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,603,add,[CE] variable last is already defined in method add(TimeSeriesDataItem,boolean),   ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2);
compilation error,603,add,[CE] variable last is already defined in method add(TimeSeriesDataItem,boolean),   ,RegularTimePeriod last = getTimePeriod(getItemCount() / 2 + 1);
compilation error,1292,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)
compilation error,1292,replace,[CE] 'else' without 'if', if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b))
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  /  1L;    ,this.minY = Double.NaN - 1D;
compilation error,194,replace,[CE] cannot find symbol NaN, this.maxY  =  Double.NaN  /  1L;    ,this.minY = Long.NaN - 1D;
increase failing tests,627,add, [FE] SeriesException,   ,if(this.data!= null) { throw new SeriesException(""); }
increase failing tests,627,add, [FE] AssertionFailedError,   ,if(this.data!= null) { this.data.add(item); }
compilation error,1273,add,[CE] illegal start of expression,   ,[Delete] else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isNaN(a)) {
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isNaN(Math.min(a, b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isNaN(m)) {
compilation error,1068,replace,[CE] illegal start of expression, System.err.println( "Unable  to  add  cloned  data  item.... "  +  this.data.toString());    ,System.err.println("Unable to add cloned data item..." + this.data.get(index).toString());
compilation error,1068,replace,[CE] illegal start of expression, System.err.println( "Unable  to  add  cloned  data  item.... "  +  this.data.toString());    ,System.err.println("Unable to add cloned data item..." + this.data.get(index));
compilation error,1068,replace,[CE] illegal start of expression, System.err.println( "Unable  to  add  cloned  data  item.... "  +  this.data.toString());    ,System.err.println("Unable to add cloned data item..." + this.data.toString());
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.equals(c)||  item.getClass().isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.equals("")&& item.getPeriod().getClass().isAssignableFrom(c)) {
compilation error,584,replace,[CE] bad operand types for binary operator , else  if(!this.timePeriodClass.equals(c)||  item.getClass().isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.equals("")&& item.getPeriod().getClass().getName()) {
increase failing tests,584,replace, [FE] AssertionFailedError, else  if(!this.timePeriodClass.equals(c)||  item.getClass().isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.equals("")|| item.getClass().isAssignableFrom(c)) {
compilation error,576,replace,[CE] illegal start of expression, if(item  ==  null)  {  throw  new  IllegalArgumentException( " ");  }    ,[Delete]
patch is same with buggy,576,replace,, if(item  ==  null)  {  throw  new  IllegalArgumentException( " ");  }    ,if(item == null) { throw new IllegalArgumentException(""); }
compilation error,576,replace,[CE] <identifier> expected, if(item  ==  null)  {  throw  new  IllegalArgumentException( " ");  }    ,if(item!= null) { throw new IllegalArgumentException(""); }
compilation error,878,replace,[CE] cannot find symbol latest, long  first  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long first = getTimePeriod(getItemCount() - 1).getSerialIndex();
patch is same with buggy,878,replace,, long  first  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long first = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,878,replace,[CE] cannot find symbol latest, long  first  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long first = getTimePeriod(getItemCount()).getSerialIndex();
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 4;
compilation error,194,replace,[CE] cannot find symbol minX, this.maxY  =  Double.NaN  /  2;    ,this.minX = Double.NaN / 4;
compilation error,194,replace,[CE] cannot find symbol minItemCount, this.maxY  =  Double.NaN  /  2;    ,this.minItemCount = Double.NaN / 4;
patch is same with buggy,1292,replace,, if(Double.isNaN(b)||  Double.isInfinite(a))  {    ,if(Double.isNaN(b)|| Double.isInfinite(a)) {
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  item.getClass().isAssignableFrom(c))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getClass().isAssignableFrom(c)) {
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  2;    ,this.minY = Double.NaN * 2;
patch is same with buggy,1265,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||(a  >=  0.0)&&(b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0)&&(b <= 0.0)) {
compilation error,637,replace,[CE] ';' expected, if(!added)  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist:   "  +  this);  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(!added) throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); Afterward
patch is same with buggy,637,replace,, if(!added)  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist:   "  +  this);  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(!added) throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); }
compilation error,637,replace,[CE] illegal start of expression, if(!added)  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist:   "  +  this);  if(!added)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(!added) throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); && item.getPeriod().equals(this.
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals("")) { if(!added) { fireSeriesChanged(); }
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2;    ,this.minY = Double.NaN;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2;    ,this.minY = Double.NaN / 2 + 1;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2;
compilation error,194,add,[CE] no suitable method found for isNaN(Comparable),   ,this.minY = Double.NaN * 2 +(Double.isNaN(name));
compilation error,637,add,[CE] illegal start of expression,   ,if(!added) { if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); }
compilation error,637,add,[CE] illegal start of expression,   ,if(!added) { if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
compilation error,637,add,[CE] illegal start of expression,   ,if(added) { if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(math.min(a, b)) {
compilation error,603,replace,[CE] cannot find symbol last, RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod second = getTimePeriod(getItemCount() / 2 - 1);
compilation error,603,replace,[CE] cannot find symbol last, RegularTimePeriod  second  =  getTimePeriod(getItemCount()  /  2);    ,RegularTimePeriod second = getTimePeriod(getItemCount() - 1);
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); slated
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterward
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterwards ; // removeAgedItems(false); // remove old items if needed, but don't notify anyone, because that's next
compilation error,193,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN / 4;
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  notify)  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)&& notify) { throw new SeriesException(""); }
compilation error,584,replace,[CE] illegal start of type, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  notify)  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)|| notify) { throw new SeriesException(""); }
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  notify)  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)&& notify) { throw new SeriesException(" "); }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a)) {
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;    ,items.add(item);
compilation error,1273,add,[CE] illegal start of expression,   ,[Delete] else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
compilation error,1273,add,[CE] 'else' without 'if',   ,} else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
patch is same with buggy,627,replace,, if(item.getPeriod().equals(this.timePeriodClass))  {  updateBoundsForAddedItem(item);  }    ,if(item.getPeriod().equals(this.timePeriodClass)) { updateBoundsForAddedItem(item); }
compilation error,627,replace,[CE] cannot find symbol getTimePeriodClass, if(item.getPeriod().equals(this.timePeriodClass))  {  updateBoundsForAddedItem(item);  }    ,if(this.timePeriodClass.equals(item.getTimePeriodClass)) { updateBoundsForAddedItem(item); }
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount()  -  2;    ,int count = getItemCount();
patch is same with buggy,877,replace,, int  count  =  getItemCount()  -  2;    ,int count = getItemCount() - 2;
compilation error,877,replace,[CE] class or interface expected, int  count  =  getItemCount()  -  2;    ,int count = getItemCount() / 2;
patch is same with buggy,1269,replace,, if(Double.isInfinite(a)&&  Double.isInfinite(b))  {    ,if(Double.isInfinite(a)&& Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)&& Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,193,add,[CE] no suitable method found for isNaN(Comparable),   ,this.minY = Double.NaN * 2 +(Double.isNaN(name)|| Double.isNaN(range));
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b > 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b > 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b < 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)&& Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
compilation error,1057,add,[CE] cannot find symbol Copy,   ,Copy.data = new java.util.ArrayList(start + 2);
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  2;    ,this.maxY = Double.NaN / 2;
compilation error,584,add,[CE] cannot find symbol getPeriodClass,   ,else if(item.getPeriodClass.equals(item.getPeriod())) { throw new SeriesException(""); }
compilation error,584,add,[CE] illegal start of expression,   ,else if(this.timePeriodClass.equals(item.getPeriod())) } throw new SeriesException(""); }
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,[Delete]
compilation error,1273,replace,[CE] class or interface expected, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,}
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,{
patch is same with buggy,1292,replace,, if(Double.isInfinite(a)&&  Double.isInfinite(b))  {    ,if(Double.isInfinite(a)&& Double.isInfinite(b)) {
compilation error,187,add,[CE] illegal start of expression,   ,if(domain!= null) { if(domain.equals("")) { throw new IllegalArgumentException(""); }
compilation error,187,add,[CE] illegal start of expression,   ,if(domain!= null) { if(domain == null) { throw new IllegalArgumentException(""); }
compilation error,187,add,[CE] illegal start of expression,   ,if(domain!= null) { if(domain.equals(getDomainName())) { throw new IllegalArgumentException(""); }
increase failing tests,878,add, [FE]  Size,   ,long first = getTimePeriod(getItemCount() + 2).getSerialIndex();
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,187,replace,[CE] illegal start of expression, if(domain  ==  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,[Delete]
compilation error,187,replace,[CE] 'else' without 'if', if(domain  ==  null)  {  this.domain  =  domain;  this.range  =  range;  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,if(domain!= null) { this.domain = domain; this.range = range; else { this.domain = domain; this.range = range; }
patch is same with buggy,1292,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,193,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN / 10;
compilation error,1057,add,[CE] cannot find symbol Copy,   ,Copy.data = new java.util.ArrayList(start + 1);
compilation error,1057,add,[CE] cannot find symbol ArrayList,   ,copy.data =(List)ArrayList.newArrayList(start + 1);
compilation error,188,add,[CE] cannot find symbol maximumY,   ,this.maxY = maximumY;
patch is same with buggy,584,replace,, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals("")) { throw new SeriesException(""); }
patch is same with buggy,584,replace,, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals(" ")) { throw new SeriesException(""); }
compilation error,584,replace,[CE] unclosed string literal, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals(")) { throw new SeriesException(""); }
compilation error,1273,replace,[CE] missing return statement, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,1273,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,[Delete] else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,1273,replace,[CE] 'else' without 'if', if(Double.isNaN(a)||  Double.isNaN(b))  {  return  b;  }  else  if(Double.isNaN(a)||  Double.isNaN(b))  {  return  Math.max(a,  b);  }    ,} else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); }
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  name.getClass();  }  else  if(name!=  null)  {  this.data.add(name);  }    ,[Delete]
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  name.getClass();  }  else  if(name!=  null)  {  this.data.add(name);  }    ,if(this.timePeriodClass!= null) { this.timePeriodClass = name.getClass(); if(name!= null) { this.data.add(name); }
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  name.getClass();  }  else  if(name!=  null)  {  this.data.add(name);  }    ,if(name == null) { this.timePeriodClass = name.getClass(); if(name!= null) { this.data.add(name); }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,877,add,[CE] illegal start of expression,   ,if(this.data.size() > 0) {
compilation error,877,add,[CE] illegal start of expression,   ,if(getItemCount() > 1) {
compilation error,877,add,[CE] illegal start of expression,   ,if(this.data.size() > 1) {
compilation error,637,add,[CE] illegal start of expression,   ,if(!added) throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); && item.getPeriod().equals(this.
compilation error,637,add,[CE] illegal start of expression,   ,if(!added) throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); if(!added) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); && item.getClass().isAssignableFrom
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(b)|| Double.isInfinite(a)) {
increase failing tests,194,replace, [FE] AssertionFailedError, this.maxY  =  Double.NaN  /  4;    ,this.minY = Double.NaN / 10;
compilation error,194,replace,[CE] cannot find symbol minX, this.maxY  =  Double.NaN  /  4;    ,this.minX = Double.NaN / 10;
compilation error,194,replace,[CE] cannot find symbol NaN, this.maxY  =  Double.NaN  /  4;    ,this.minY = Long.NaN / 10;
patch is same with buggy,634,replace,, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway...    ,removeAgedItems(true);// remove old items if needed, but // don't notify anybody, because that // happens next anyway...
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  -  1D;    ,this.maxY = Double.NaN - 1D;
patch is same with buggy,879,replace,, long  min  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  min  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount() + 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  min  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount()).getSerialIndex();
patch is same with buggy,627,replace,, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }    ,if(this.data!= null) { updateBoundsForAddedItem(item); }
compilation error,627,replace,[CE] illegal start of expression, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }    ,[Delete]
increase failing tests,627,replace, [FE] AssertionFailedError, if(this.data!=  null)  {  updateBoundsForAddedItem(item);  }    ,if(this.data == null) { updateBoundsForAddedItem(item); }
compilation error,189,add,[CE] illegal start of expression,   ,if(name == null) { if(getTimePeriodClass()!= null) { this.data = new ArrayList(); }
compilation error,189,add,[CE] illegal start of expression,   ,if(name == null) { if(getTimePeriodClass()!= null) { throw new IllegalArgumentException(""); }
compilation error,189,add,[CE] illegal start of expression,   ,if(name == null) { if(getTimePeriodClass()!= null) { throw new SeriesException(""); }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isNaN(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
patch is same with buggy,879,replace,, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long maximal = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long maximal = getTimePeriod(getItemCount() + 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long maximal = getTimePeriod(getItemCount()).getSerialIndex();
compilation error,1057,replace,[CE] cannot find symbol Copy, copy.data  =  new  java.util.ArrayList(end  +  1);    ,Copy.data = new java.util.ArrayList(start + 1);
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals(item.getPeriod()))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals(item.getPeriodClass())) { throw new SeriesException(""); }
patch is same with buggy,584,replace,, else  if(this.timePeriodClass.equals(item.getPeriod()))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals(item.getPeriod())) { throw new SeriesException(""); }
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals(item.getPeriod()))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals(item.getPeriodType())) { throw new SeriesException(""); }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isInfinite(a)) {
patch is same with buggy,653,replace,, add(period,  new  Double(value),  true);    ,add(period, new Double(value), true);
compilation error,653,replace,[CE] cannot find symbol, add(period,  new  Double(value),  true);    ,setValue(period, new Double(value), true);
compilation error,584,add,[CE] 'else' without 'if',   ,else if(this.timePeriodClass.equals(item.getPeriod())) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals(item.getPeriod())) {
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long max = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long min = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,879,replace,[CE] cannot find symbol removed, long  maximal  =  getTimePeriod(getItemCount()  -  2).getSerialIndex();    ,long maximum = getTimePeriod(getItemCount() - 2).getSerialIndex();
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN + 1;
compilation error,1292,add,[CE] ')' expected,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1064,replace,[CE] ')' expected, if(clone  ==  null)  {  copy.add(clone);  }  else  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); } else if(copy.add(item); }
compilation error,1064,replace,[CE] illegal start of expression, if(clone  ==  null)  {  copy.add(clone);  }  else  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); } else >> copy.add(item); }
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  10;    ,this.maxY = Double.NaN / 10;
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,[Delete]
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,if(name == null) { if(this.timePeriodClass!= getTimePeriodClass()) { this.timePeriodClass = getTimePeriodClass(); } else { this.domain = domain; this.range = range; }
compilation error,189,replace,[CE] illegal start of expression, if(name!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  {  this.domain  =  domain;  this.range  =  range;  }    ,if(name == null) { if(this.timePeriodClass!= getTimePeriodClass()) { this.timePeriodClass = getTimePeriodClass(); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1;    ,this.minY = Double.NaN;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1;    ,this.minY = Double.NaN * 1;
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  *  2;    ,this.maxY = Double.NaN * 2;
compilation error,1212,replace,[CE] illegal start of expression, if(yN!=  null)  {  yN  =  item.getValue();  }    ,[Delete]
patch is same with buggy,1212,replace,, if(yN!=  null)  {  yN  =  item.getValue();  }    ,if(yN!= null) { yN = item.getValue(); }
compilation error,1212,replace,[CE] class or interface expected, if(yN!=  null)  {  yN  =  item.getValue();  }    ,if(yN == null) { yN = item.getValue(); }
compilation error,188,replace,[CE] cannot find symbol maximumY, this.maxY  =  minY;    ,this.maxY = maximumY;
compilation error,188,replace,[CE] incompatible types, this.maxY  =  minY;    ,this.maxY = range;
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(b)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(c)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(b)) {
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1;    ,this.minY = Double.NaN / 2;
compilation error,194,replace,[CE] cannot find symbol NaN, this.minY  =  Double.NaN  /  1;    ,this.maxY = Long.NaN / 2;
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a || b <= 0.0)) {
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;    ,items.add(item);
increase failing tests,584,add, [FE] SeriesException,   ,else if(this.timePeriodClass.isAssignableFrom(c)&& notify) { throw new SeriesException(""); }
compilation error,1292,replace,[CE] cannot find symbol c, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,replace,[CE] cannot find symbol v, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)||(a  <=  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(v)||(a <= 0.0 && b <= 0.0)) {
compilation error,193,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN / 2;
compilation error,1273,add,[CE] illegal start of expression,   ,[Delete]
compilation error,1273,add,[CE] class or interface expected,   ,}
compilation error,1273,add,[CE] illegal start of expression,   ,{
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }!    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); slated
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }!    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterwards ; // removeAgedItems(false); // remove old items if needed, but don't notify anyone, because that's next
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway;  }!    ,if(isSeriesVisible()) { if(notify) { fireSeriesChanged(); }
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(!this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException(""); }
compilation error,584,replace,[CE] illegal start of type, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.isAssignableFrom(c)) { throw new SeriesException(""); }
patch is same with buggy,584,replace,, else  if(this.timePeriodClass.equals( " "))  {  throw  new  SeriesException( " ");  }    ,else if(this.timePeriodClass.equals("")) { throw new SeriesException(""); }
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  /  10;    ,this.minY = Double.NaN / 10;
