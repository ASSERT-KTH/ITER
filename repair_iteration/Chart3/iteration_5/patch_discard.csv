patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove Items if needed, but // don't notify anybody, because that // happens next anyway....
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove items if needed, but // don't notify anybody, because that // happens next anyway....
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove Items if needed, but // don't notify anyone, because that // happens next anyway....
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ; if(notify) { fireSeriesChanged(); } ;
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(notify) { fireSeriesChanged(); bodied ; // removeAgedItems(false); // refreshAgedItems(false); } ; if(notify) { fireSeriesChanged(); } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ; if(notify) { fireSeriesChanged(); } ; bodied ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ;! refreshAgedItems(false); } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ;! refreshAgedItems(false); } ; } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ;! refreshAgedItems(false); } ; ; } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove Items if needed, but // don't notify any, because that // happens next anyway...
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove items if needed, but // don't notify any, because that // happens next anyway...
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
compilation error,634,replace,[CE] not a statement, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); bodied ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ notifyAny, but // won't notify any
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1D;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1D;    ,this.minY = Double.NaN / 4;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1D;    ,this.minY = Double.NaN / 1;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove items if needed, but // won't notify any, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove items if needed, but // won't notify any, as that // happens next anyway; } 
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove items if needed, but // won't notify any, as that = happens next anyway; }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  12;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  12;    ,this.minY = Double.NaN / 10;
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  /  12;    ,this.minY = Double.NaN / 12;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  3;    ,this.minY = Double.NaN * 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  3;    ,this.minY = Double.NaN / 3;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  3;    ,this.minY = Double.NaN * 4;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c + 1)) {
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 3;
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a  +  2))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) {
patch is same with buggy,188,replace,, this.minY  =  minY  -  1;    ,this.minY = minY - 1;
compilation error,188,replace,[CE] cannot find symbol MinY, this.minY  =  minY  -  1;    ,this.minY = MinY / 1;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove items if needed, but // don't notify anybody, because that // happens next anyway....
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove items if needed, but // don't notify anybody, because that // happens next anyway
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because that
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  2;    ,this.minY = Double.NaN % 2;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 10;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 1D;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN % 3;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }, but // don't notify anyone, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }, but // don't notify anybody, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }, but // don't notify anyone, as that // happens next anyway; } if(notify) { fireSeriesChanged();
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // don't notify anyone, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove items if needed, but // don't notify anyone, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // don't notify anyone, as that // happens next anyway; } if(notify) { fireSeriesChange
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN + 2;
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a < 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a >> 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
compilation error,188,add,[CE] incompatible types,   ,this.minY = name.getClass();
compilation error,188,add,[CE] incompatible types,   ,this.minY = name.getClass(); this.maxY = minY;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)) }
compilation error,1269,add,[CE] generics are not supported in -source 1.4,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)) <
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b < 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a < 0.0 && b <= 0.0)) {
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway.    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway.    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway.    ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); }
compilation error,188,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN - 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2D;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2D;    ,this.minY = Double.NaN / 2D + 1;
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  /  2D;    ,this.minY = Double.NaN / 2D;
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a < 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a < 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)||(a >> 0.0 && b <= 0.0)) {
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2L + 1;
compilation error,194,add,[CE] cannot find symbol miniX,   ,this.miniX = Double.NaN / 2L + 1;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }!    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }!    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated; // removeAgedItems(false); // remove old items if needed, but // don't notify anybody, because that // happens next anyway; }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }!    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated; // removeAgedItems(false); // remove old items if needed, but // don't notify anybody, because that // happens next anyway; }!
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) }
compilation error,637,add,[CE] illegal start of expression,   ,if(added) { if(!notify) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); }
compilation error,637,add,[CE] illegal start of expression,   ,if(added) { if(!notify) { throw new SeriesException( "TimeSeriesDataItem item does not exist: " + this); }
compilation error,637,add,[CE] illegal start of expression,   ,if(added) { if(!notify) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  3;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  3;    ,this.minY = Double.NaN / 4;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  3;    ,this.minY = Double.NaN * 3;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,188,replace,[CE] illegal start of expression, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,[Delete]
patch is same with buggy,188,replace,, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,if(range!= null) { this.timePeriodClass = getTimePeriodClass(); } else if(range!= null) { this.timePeriodClass = getTimePeriodClass(); }
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  *  4;    ,this.maxY = Double.NaN * 4;
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove items if needed, but // don't notify any, as this // happens next anyway; }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove items if needed, but // don't notify any, as this // happens next anyway; } if(notify) { fireSeriesChanged(); } 
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove old items if needed, but // don't notify any, as this // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(!added)) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(!added) { fireSeriesChanged(); >>
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ; if(notify) { fireSeriesChanged();
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ; if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ; if(notify) { fireSeriesChanged(); } ;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // won't notify anybody, because that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove items if needed, but // won't notify anybody, because that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // won't notify anyone, because that // happens next anyway; }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||(a  <  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a < 0.0 && b <= 0.0)) {
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||(a  <  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a >= 0.0 && b <= 0.0)) {
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // won't notify anyone, because that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove items if needed, but // won't notify anyone, because that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // won't notify anyone, because that // happens next anyway; } 
compilation error,188,replace,[CE] illegal start of expression, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,[Delete]
patch is same with buggy,188,replace,, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,if(range!= null) { this.timePeriodClass = getTimePeriodClass(); } else if(range!= null) { this.range = range; }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  -  2;    ,this.minY = Double.NaN - 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  -  2;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  -  2;    ,this.minY = Double.NaN;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN % 8;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); // removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); // removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false);
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(true);  //  removeAgedItems(false);  fiance  ;  Toujours!    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(true); // removeAgedItems(false); fiance ; Toujours!
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(true);  //  removeAgedItems(false);  fiance  ;  Toujours!    ,if(d.getItemCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(true); // removeAgedItems(false); fiance ; Toujours!
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(true);  //  removeAgedItems(false);  fiance  ;  Toujours!    ,if(d.getSeries().size() > 0) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(true); // removeAgedItems(false); fiance ; Toujours!
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  *  2  +  1;    ,this.maxY = Double.NaN * 2 + 1;
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN % 2;
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isNaN(b)) {
compilation error,188,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if needed, but // don't notify
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); &/ remove items if needed, but // don't notify
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); &/ remove old items if needed, but // don't notify
compilation error,1273,replace,[CE] missing return statement, return  Math.min(a,  b);    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
increase failing tests,1273,replace, [FE] AssertionFailedError, return  Math.min(a,  b);    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); } else { return Math.max(a, b); }
compilation error,1273,replace,[CE] no suitable method found for isNaN(double,double), return  Math.min(a,  b);    ,if(Double.isNaN(a, b)) { return Math.min(a, b); }
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)&&  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)&& Double.isNaN(b)) {
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)&&  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)||
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)&&  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)&&
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN - 2;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // won't notify any, because that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove items if needed, but // won't notify any, because that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); &/ removeAgedItems(true); // remove items if needed, but // won't notify any, because that // happens next anyway; }
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2D;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); >> ; // removeAgedItems(true); // removeAgedItems(false); fiance ; Toujours!
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged();!= ; // removeAgedItems(true); // removeAgedItems(false); fiance ; Toujours!
patch is same with buggy,634,replace,, removeAgedItems(false);//  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway.....    ,removeAgedItems(false);// remove old items if needed, but // don't notify anyone, because that // happens next anyway.....
patch is same with buggy,1269,replace,, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isNaN(b)|| Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  3;    ,this.minY = Double.NaN * 3;
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getPeriod().getClass().equals("")) {
patch is same with buggy,1269,replace,, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b  +  1))  {    ,if(Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b + 1)) {
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove items if needed, but // don't notify any, because that // happens next anyway...
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated; &/ removeAgedItems(false); &/ remove items if needed, but // don't notify any, because that // happens next anyway...
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,188,replace,[CE] cannot find symbol MinY, this.minY  =  minY  +  2;    ,this.minY = MinY + 1;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;!  refreshAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ;! refreshAgedItems(false); } ;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;!  refreshAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ;! refreshAgedItems(false); } ;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;!  refreshAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); // refreshAgedItems(false); } ;! refreshAgedItems(false); } 
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 2 / 3;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  2  +  1;    ,this.minY = Double.NaN % 2 + 1;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a < 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a >> 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); luckily ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); prompted ; // removeAgedItems(false); // removeAgedItems(false); } ; // removeAgedItems(false); }
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2D;
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN / 2D;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,1292,replace,, if(Double.isInfinite(a)||  Double.isNaN(b)||  Double.isInfinite(a))  {    ,if(Double.isInfinite(a)|| Double.isNaN(b)|| Double.isInfinite(a)) {
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway.....    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove old items if needed, but // don't notify anyone, because that // happens next anyway.....
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway.....    ,if(notify) { fireSeriesChanged(); } ;// removeAgedItems(false); &/ remove old items if needed, but // don't notify anyone, because that // happens next anyway.....
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway.....    ,if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove items if needed, but // don't notify anyone, because that // happens next anyway.....
compilation error,1273,add,[CE] unreachable statement,   ,return Math.max(a, b);
compilation error,1273,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) { return a; } else { if(Double.isNaN(a)|| Double.isNaN(b)) { return a; }
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  *  2  /  2;    ,this.minY = Double.NaN * 2 / 2;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 12;
patch is same with buggy,188,replace,, this.minY  =  Double.NaN;    ,this.minY = Double.NaN;
patch is same with buggy,188,replace,, this.minY  =  Double.NaN;    ,this.minY = Double.NaN;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 3;
compilation error,1064,add,[CE] not a statement,   ,if(clone!= null) { copy.add(item); bodied else if(item!= null) { copy.add(item); }
compilation error,1064,add,[CE] illegal start of expression,   ,if(clone!= null) { copy.add(item); >> else if(item!= null) { copy.add(item); }
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2L;
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); bodied ; // removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false); &/ removeAgedItems(false);
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); bodied ; // removeAgedItems(false); // refreshAgedItems(false); } ;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged();!= ; // removeAgedItems(false); // refreshAgedItems(false); } ;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  2;    ,this.minY = Double.NaN + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  2;    ,this.minY = Double.NaN;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  2;    ,this.minY = Double.NaN / 2;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if needed, but // don't notify anyone
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); // remove items if needed, but // don't notify
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); }? true : false; // removeAgedItems(true); &/ remove items if needed, but // don't notify anyone
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isNaN(b)|| Double.isInfinite(a)) }
compilation error,1064,add,[CE] not a statement,   ,if(clone == null) { copy.add(clone); bodied else if(item!= null) { copy.add(item); }
compilation error,1064,add,[CE] illegal start of expression,   ,if(clone == null) { copy.add(clone);!= else if(item!= null) { copy.add(item); }
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  100;    ,this.minY = Double.NaN % 100;
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)&& Double.isNaN(b)) }
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)|| Double.isNaN(b)&&
patch is same with buggy,1292,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||(a  <  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a < 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway;  }    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway;  }    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway;  }    ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,634,replace,, if(!added)  {  fireSeriesChanged();  }    ,if(!added) { fireSeriesChanged(); }
patch is same with buggy,634,replace,, if(!added)  {  fireSeriesChanged();  }    ,if(!added) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(!added)  {  fireSeriesChanged();  }    ,if(added) { fireSeriesChanged(); }
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 4;
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN * 4;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L;    ,this.minY = Double.NaN / 2;
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  /  2L;    ,this.minY = Double.NaN / 2L;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L;    ,this.minY = Double.NaN * 2L;
compilation error,1064,replace,[CE] illegal start of expression, if(clone  ==  null)  {  copy.add(clone);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); } else if(item!= null) { copy.add(item); >>
compilation error,1064,replace,[CE] illegal start of expression, if(clone  ==  null)  {  copy.add(clone);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); } else if(item!= null) { copy.add(item); [Delete]
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getPeriod().getClass().equals( " ")) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getPeriod().getClass().equals(" ")) {
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.equals(c)&& item.getPeriod().getClass().equals( " ")) {
patch is same with buggy,188,replace,, this.timePeriodClass  =  name.getClass();  this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getClass(); this.timePeriodClass = name.getClass();
increase failing tests,188,replace, [FE] NullPointerException, this.timePeriodClass  =  name.getClass();  this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = domain.getClass(); this.timePeriodClass = name.getClass();
compilation error,637,replace,[CE] illegal start of expression, if(added)  {  if(!notify)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,[Delete]
patch is same with buggy,637,replace,, if(added)  {  if(!notify)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(added) { if(!notify) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN % 100;
compilation error,188,replace,[CE] cannot find symbol MinY, this.minY  =  minY  /  1;    ,this.minY = MinY / 2;
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  2L  +  1;    ,this.maxY = Double.NaN / 2L + 1;
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 2 + 1;
compilation error,194,add,[CE] cannot find symbol miniX,   ,this.miniX = Double.NaN * 2 + 1;
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove old items if needed, but // don't notify any, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove items if needed, but // don't notify any, as that // happens next anyway; }
compilation error,634,add,[CE] illegal start of expression,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { removeAgedItems(true);// remove items if needed, but // don't notify any, as that // happens next anyway; } if(notify) { fireSeriesChange
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated; &/ removeAgedItems(false); &/ remove old items if needed, but // don't notify any, because that // happens next anyway...
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); } ; // removeAgedItems(false); &/ remove old items if needed, but // don't notify any, because that // happens next anyway...
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); luckily ; // removeAgedItems(false); // refreshAgedItems(false); } ; }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated ; // removeAgedItems(false); // refreshAgedItems(false); } ; }
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anybody, because that
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anyone, because that
compilation error,634,add,[CE] not a statement,   ,if(notify) { fireSeriesChanged(); } ; if(notify) { fireSeriesChanged(); } ; }!removeAgedItems(true);// remove old items if needed, but // don't notify anybody, because
patch is same with buggy,188,replace,, this.maxY  =  minY  +  1;    ,this.maxY = minY + 1;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b < 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b >> 0.0)) {
patch is same with buggy,1292,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||(a  <  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a < 0.0 && b <= 0.0)) {
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)) {
compilation error,1269,replace,[CE] illegal start of expression, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)) }
patch is same with buggy,1064,replace,, if(clone!=  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(item); } else if(item!= null) { copy.add(item); }
patch is same with buggy,1064,replace,, if(clone!=  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(item); } else if(item!= null) { copy.add(item); }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,193,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN * 2 / 2;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(d.getItemCount() > 1) { if(notify) { fireSeriesChanged(); }
compilation error,193,replace,[CE] cannot find symbol minX, this.minY  =  Double.NaN  -  4;    ,this.minX = Double.NaN % 2 + 1;
compilation error,634,add,[CE] not a statement,   ,if(d.getSeriesCount() > 1) { if(notify) { fireSeriesChanged(); slated; &/ removeAgedItems(false); &/ remove old items if needed, but // won't notify any, because that // happens next anyway; }
compilation error,634,add,[CE] not a statement,   ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); slated; &/ removeAgedItems(false); &/ remove old items if needed, but // won't notify any, because that // happens next anyway; }
compilation error,634,add,[CE] not a statement,   ,if(d.getItemCount() > this.maximumItemCount) { if(notify) { fireSeriesChanged(); slated; &/ removeAgedItems(false); &/ remove old items if needed, but // won't notify any, because that
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2D;
compilation error,194,add,[CE] cannot find symbol minItemAge,   ,this.minItemAge = Double.NaN / 2D;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c + 1)) {
compilation error,188,replace,[CE] illegal start of expression, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,[Delete]
compilation error,188,replace,[CE] illegal start of type, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,}
compilation error,188,replace,[CE] illegal start of expression, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }    ,{
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  3;    ,this.minY = Double.NaN % 3;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(!added) { fireSeriesChanged(); } ; // removeAgedItems(false); ;! refreshAgedItems(false); } ;
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(!added) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(!added) { fireSeriesChanged(); } ; // removeAgedItems(false); ;! refreshAgedItems(false); } ; } ;
compilation error,634,add,[CE] illegal start of expression,   ,if(isSeriesVisible()) { if(notify) { fireSeriesChanged(); }
compilation error,194,add,[CE] cannot find symbol minX,   ,this.minX = Double.NaN / 2L + 1;
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(b)||  Double.isInfinite(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a * b)) {
compilation error,188,add,[CE] cannot find symbol,   ,this.minY = minY + name.getValue();
compilation error,188,add,[CE] cannot find symbol,   ,this.data = new ArrayList();
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||(a  <  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a >= 0.0 && b <= 0.0)) {
increase failing tests,1269,replace, [FE] AssertionFailedError, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||(a  <  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(Math.min(a, b)) < 0) {
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  100;    ,this.minY = Double.NaN % 100;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L;    ,this.minY = Double.NaN / 2;
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  /  2L;    ,this.minY = Double.NaN / 2L;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2L;    ,this.minY = Double.NaN / 2;
compilation error,193,add,[CE] no suitable method found for isNaN(Comparable),   ,this.minY = Double.NaN * 7 +(Double.isNaN(name)|| Double.isNaN(range));
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)&&  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.isN
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b)&&  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.is
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterwards ; &/ removeAgedItems(false); &/ remove old items if needed, but // don't notify any, because
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(d == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterward ; &/ removeAgedItems(false); &/ remove old items if needed, but // don't notify any, because
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(item.getPeriod().equals(getItemCount())) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(!added) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  3;    ,this.minY = Double.NaN * 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  3;    ,this.minY = Double.NaN * 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  *  3;    ,this.minY = Double.NaN * 4;
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  2  +  1;    ,this.minY = Double.NaN % 2 + 1;
compilation error,193,replace,[CE] ';' expected, this.minY  =  Double.NaN  %  2  +  1;    ,this.minY = Double.NaN % 2, this.maximumItemAge + 1;
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(b)) {
compilation error,1269,replace,[CE] cannot find symbol m, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(m)) {
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  /  12;    ,this.minY = Double.NaN / 12;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  12;    ,this.minY = Double.NaN / 10;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  12;    ,this.minY = Double.NaN / 2;
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a >= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a >> 0.0 && b <= 0.0)) {
patch is same with buggy,1292,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||(a  <  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)||(a < 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b < 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a >= 0.0 && b <= 0.0)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(b))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)&& Double.is
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,188,add,[CE] illegal start of expression,   ,if(this.data!= null) { if(domain == null) { this.timePeriodClass = getTimePeriodClass(); }
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,1064,add,[CE] cannot find symbol Copy,   ,if(clone!= null) { Copy.add(item); } else if(item!= null) { copy.add(item); }
compilation error,1064,add,[CE] illegal start of expression,   ,if(clone!= null) { copy.add(item); } else if(item!= null) [Delete] copy.add(item); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals("")) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); slated
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterward
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterwards ; // removeAgedItems(false); // remove old items if needed, but don't notify anybody, because that's next
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(item == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;    ,if(item!= null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); figured
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); Afterward; if(removeAgedItems(false); // refreshAgedItems(false);
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;  if(notify)  {  fireSeriesChanged();  }  ;  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); Afterward; if(removeAgedItems(false); // refreshAgedItems(false); }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a >= 0.0 && b <= 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a < 0.0 && b <= 0.0)) {
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(d == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); figured
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterward
patch is same with buggy,193,replace,, this.minY  =  Double.NaN  %  2;    ,this.minY = Double.NaN % 2;
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,if(item!= null) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }!    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); slated
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }!    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterwards ; // removeAgedItems(false); // remove old items if needed, but don't notify anybody, because that's next
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }!    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterwards ; // removeAgedItems(false); // remove old items if needed, but don't notify anyone, because that's next
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); figured
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(getItemCount() < this.maximumItemCount) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(true);  //  removeAgedItems(false);  fiance  ;  Toujours!    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); fiance; Toujours!
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(true);  //  removeAgedItems(false);  fiance  ;  Toujours!    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); fiance; Toujours!
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(true);  //  removeAgedItems(false);  fiance  ;  Toujours!    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); fiance; }
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,634,add,[CE] illegal start of expression,   ,if(!added) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals("")) { if(!added) { fireSeriesChanged(); }
compilation error,188,replace,[CE] cannot find symbol maximumY, this.maxY  =  minY  +  1;    ,this.maxY = maximumY + 1;
compilation error,188,replace,[CE] incompatible types, this.maxY  =  minY  +  1;    ,this.maxY = range + 1;
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1273,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.max(a, b); } else if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a,
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,637,replace,[CE] illegal start of expression, if(added)  {  if(!notify)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,[Delete]
patch is same with buggy,637,replace,, if(added)  {  if(!notify)  {  throw  new  SeriesException( "TimeSeriesDataItem  item  does  not  exist: "  +  this);  }    ,if(added) { if(!notify) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(getItemCount())) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getPeriod().getClass().equals("")) {
patch is same with buggy,584,replace,, else  if(!this.timePeriodClass.isAssignableFrom(c)&&  item.getPeriod().getClass().equals( " "))  {    ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getPeriod().getClass().equals(" ")) {
compilation error,634,replace,[CE] illegal start of expression, if(!added)  {  fireSeriesChanged();  }    ,[Delete]
compilation error,634,replace,[CE] class or interface expected, if(!added)  {  fireSeriesChanged();  }    ,}
compilation error,634,replace,[CE] illegal start of expression, if(!added)  {  fireSeriesChanged();  }    ,{
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals("")) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;!  refreshAgedItems(false);  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); figured
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;!  refreshAgedItems(false);  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); Afterward
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  refreshAgedItems(false);  }  ;!  refreshAgedItems(false);  }  ;    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,188,replace,, this.minY  =  minY  -  1;    ,this.minY = minY - 1;
compilation error,188,replace,[CE] bad operand types for binary operator '-', this.minY  =  minY  -  1;    ,this.minY = range - 1;
compilation error,1292,replace,[CE] bad operand types for binary operator '||', if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a)||(a  <  0.0  &&  b  <=  0.0))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(Math.max(a, b))) {
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b < 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b >> 0.0)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  3;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  3;    ,this.minY = Double.NaN;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  3;    ,this.minY = Double.NaN / 4;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  2;    ,this.minY = Double.NaN + 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  2;    ,this.minY = Double.NaN;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  +  2;    ,this.minY = Double.NaN - 2;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(m)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)) {
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(Math.min(a, b)) {
patch is same with buggy,188,replace,, this.minY  =  minY  +  2;    ,this.minY = minY + 2;
compilation error,584,add,[CE] 'else' without 'if',   ,else if(!this.timePeriodClass.isAssignableFrom(c)&& item.getPeriod().getClass().equals(" ")) {
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); figured
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(d == null) { if(notify) { fireSeriesChanged(); }
compilation error,193,add,[CE] cannot find symbol NaN,   ,this.minY = Long.NaN % 100;
compilation error,188,add,[CE] class expected,   ,this.minY = double.NaN - 1;
compilation error,634,add,[CE] not a statement,   ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterwards ; // removeAgedItems(false); &/ remove old items if needed, but // won't notify any, because that
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); &&!removeAgedItems(false); &/ remove old items if needed, but // won't notify any, because that
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); &&!removeAgedItems(false); &/ remove old items if needed, but // won't notify any, because
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a + b)) {
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2D;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2D;    ,this.minY = Double.NaN / 3;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  2D;    ,this.minY = Double.NaN / 4;
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a <= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a >= 0.0 && b <= 0.0)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a)||(a < 0.0 && b <= 0.0)) {
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item.getPeriod().equals(getItemCount())) { if(notify) { fireSeriesChanged(); }
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  /  2L  +  1;    ,this.maxY = Double.NaN / 2L + 1;
compilation error,188,replace,[CE] illegal start of expression, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,[Delete]
compilation error,188,replace,[CE] illegal start of expression, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,if(this.timePeriodClass!= null) { this.timePeriodClass = getTimePeriodClass(); if(range!= null) { this.range = range; }
compilation error,188,replace,[CE] illegal start of expression, if(range!=  null)  {  this.timePeriodClass  =  getTimePeriodClass();  }  else  if(range!=  null)  {  this.range  =  range;  }    ,if(timePeriodClass!= null) { this.timePeriodClass = getTimePeriodClass(); if(range!= null) { this.range = range; }
compilation error,1064,replace,[CE] 'catch' without 'try', if(clone  ==  null)  {  copy.add(clone);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { if(clone!= null) { copy.add(clone); } else if(item!= null) { copy.add(item); }
compilation error,1064,replace,[CE] illegal start of expression, if(clone  ==  null)  {  copy.add(clone);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(clone); [Delete] else if(item!= null) { copy.add(item); }
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isInfinite(a)|| Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,1292,add,[CE] reached end of file while parsing,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,634,add,[CE] illegal start of expression,   ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item!= null) { if(!added) { fireSeriesChanged(); }
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isInfinite(b)||  Double.isInfinite(a  +  b))  {    ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a * b)) {
patch is same with buggy,1269,replace,, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a  +  2))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) {
compilation error,1269,replace,[CE] ')' expected, if(Double.isNaN(a)||  Double.isNaN(b)||  Double.isNaN(a  +  2))  {    ,if(Double.isNaN(a), Double.isNaN(b)|| Double.isNaN(a + 2)) {
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  -  2;    ,this.minY = Double.NaN - 1;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  -  2;    ,this.minY = Double.NaN;
patch is same with buggy,194,replace,, this.minY  =  Double.NaN  -  2;    ,this.minY = Double.NaN - 2;
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,188,add,[CE] ';' expected,   ,this.maxY = Double.NaN -- 1;
compilation error,1064,add,[CE] cannot find symbol,   ,if(clone!= null) { clone.add(item); } else if(item!= null) { copy.add(item); }
compilation error,1273,replace,[CE] missing return statement, return  Math.min(a,  b);    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); }
increase failing tests,1273,replace, [FE] AssertionFailedError, return  Math.min(a,  b);    ,if(Double.isNaN(a)|| Double.isNaN(b)) { return Math.min(a, b); } else { return Math.max(a, b); }
increase failing tests,1273,replace, [FE] AssertionFailedError, return  Math.min(a,  b);    ,if(a > b) { return Math.min(a, b); } else { return Math.max(a, b); }
compilation error,637,add,[CE] illegal start of expression,   ,if(added) { if(!notify) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); }
compilation error,637,add,[CE] illegal start of expression,   ,if(added) { if(!notify) { throw new SeriesException("TimeSeriesDataItem item does not exist:" + this); }
compilation error,637,add,[CE] illegal start of expression,   ,if(added) } if(!notify) { throw new SeriesException("TimeSeriesDataItem item does not exist: " + this); }
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  any,  as  that  //  happens  next  anyway;    ,items.add(item);
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); &&!removeAgedItems(false); &/ remove old items if needed, but // don't notify any, because
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterward ; &/ removeAgedItems(false); &/ remove old items if needed, but // don't notify any, because
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); Afterward ; &/ removeAgedItems(false); &/ remove old items if needed, but // don't notify any, because that
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  *  2  +  1;    ,this.maxY = Double.NaN * 2 + 1;
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isInfinite(b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a)|| Double.isNaN(b)) {
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1D;    ,this.minY = Double.NaN / 2;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1D;    ,this.minY = Double.NaN / 10;
increase failing tests,194,replace, [FE] AssertionFailedError, this.minY  =  Double.NaN  /  1D;    ,this.minY = Double.NaN / 4;
compilation error,188,replace,[CE] cannot find symbol maximumY, this.maxY  =  minY  +  1;    ,this.maxY = maximumY - 1;
increase failing tests,188,replace, [FE] NullPointerException, this.timePeriodClass  =  name.getClass();  this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = timePeriodClass.getClass();
patch is same with buggy,188,replace,, this.timePeriodClass  =  name.getClass();  this.timePeriodClass  =  name.getClass();    ,this.timePeriodClass = name.getClass(); this.timePeriodClass = name.getClass();
patch is same with buggy,188,replace,, this.minY  =  Double.NaN;    ,this.minY = Double.NaN;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(item.getPeriod().equals(this.data.size())) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(item == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  removeAgedItems(false);  }  ;  //  removeAgedItems(false);    ,if(d == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  //  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway;  }    ,if(item.getPeriod().equals(getItemCount())) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  anyone,  because  that  //  happens  next  anyway....    ,if(item == null) { if(getItemCount() > this.maximumItemCount) { fireSeriesChanged(); }
compilation error,194,add,[CE] cannot find symbol NaN,   ,this.maxY = Number.NaN / 2L;
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item.getPeriod().equals(getItemCount())) { if(!added) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway...    ,if(item == null) { if(getItemCount() > this.maximumItemCount) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] not a statement, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); figured
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway....    ,if(getItemCount() < this.maximumItemCount) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway.    ,if(item.getPeriod().equals("")) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway.    ,if(item == null) { if(notify) { fireSeriesChanged(); }
compilation error,634,replace,[CE] illegal start of expression, if(notify)  {  fireSeriesChanged();  }  ;  //  removeAgedItems(false);  &/  remove  old  items  if  needed,  but  //  don't  notify  any,  because  that  //  happens  next  anyway.    ,if(d == null) { if(notify) { fireSeriesChanged(); }
increase failing tests,634,replace, [FE] AssertionFailedError, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway.....    ,this.data.add(item);
compilation error,634,replace,[CE] cannot find symbol value, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway.....    ,item.setValue(value);
compilation error,634,replace,[CE] cannot find symbol items, removeAgedItems(true);//  remove  old  items  if  needed,  but  //  don't  notify  anybody,  because  that  //  happens  next  anyway.....    ,items.add(item);
compilation error,634,add,[CE] illegal start of expression,   ,if(item == null) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(isSeriesVisible()) { if(!added) { fireSeriesChanged(); }
compilation error,634,add,[CE] illegal start of expression,   ,if(item == null) { if(notify) { fireSeriesChanged(); }
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isInfinite(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] ')' expected,   ,if(Double.isInfinite(a), Double.isInfinite(b)|| Double.isInfinite(a + b)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 1)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(a + 2)) {
compilation error,1269,add,[CE] illegal start of expression,   ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(A + 1)) {
patch is same with buggy,1292,replace,, if(Double.isInfinite(a)||  Double.isNaN(b)||  Double.isInfinite(a))  {    ,if(Double.isInfinite(a)|| Double.isNaN(b)|| Double.isInfinite(a)) {
compilation error,188,add,[CE] class expected,   ,this.minY = double.NaN + 1;
increase failing tests,634,add, [FE] AssertionFailedError,   ,this.data.add(item);
compilation error,634,add,[CE] cannot find symbol value,   ,item.setValue(value);
compilation error,634,add,[CE] cannot find symbol items,   ,items.add(item);
compilation error,188,add,[CE] illegal start of expression,   ,if(name == null) { if(getTimePeriodClass()!= null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,188,add,[CE] illegal start of expression,   ,if(this.domain!= null) { if(getTimePeriodClass()!= null) { this.timePeriodClass = getTimePeriodClass(); }
compilation error,188,add,[CE] illegal start of expression,   ,if(name == null) { if(timePeriodClass!= getTimePeriodClass()) { this.data = new ArrayList(); }
patch is same with buggy,1064,replace,, if(clone!=  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone!= null) { copy.add(item); } else if(item!= null) { copy.add(item); }
compilation error,1064,replace,[CE] 'catch' without 'try', if(clone!=  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone.isSeries()) { if(clone!= null) { copy.add(item); }
compilation error,1064,replace,[CE] 'catch' without 'try', if(clone!=  null)  {  copy.add(item);  }  else  if(item!=  null)  {  copy.add(item);  }    ,if(clone.isSeries()) { if(copy!= null) { copy.add(item); }
compilation error,1269,replace,[CE] cannot find symbol c, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b  +  1))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(c)) {
compilation error,1269,replace,[CE] cannot find symbol v, if(Double.isNaN(b)||  Double.isNaN(a)||  Double.isNaN(b  +  1))  {    ,if(Double.isNaN(a)|| Double.isNaN(b)|| Double.isNaN(v)) {
compilation error,634,add,[CE] cannot find symbol,   ,if(!added) { item.addChangeListener(this); }
compilation error,634,add,[CE] method addChangeListener in class Series cannot be applied to given types;,   ,if(!added) { this.data.add(item); } else { addChangeListener(this); }
patch is same with buggy,194,replace,, this.maxY  =  Double.NaN  *  4;    ,this.maxY = Double.NaN * 4;
