bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE,   objectType.toString())); [FE] AssertionFailedError [CONTEXT]   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    if (visibility == Visibility.PRIVATE && !sameInput) { [BUGGY] compiler.report(    t.makeError(getprop, PRIVATE_OVERRIDE,         objectType.toString())); [BUGGY] t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) { compiler.report( t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name())); } } else { [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	
2	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    if (visibility == Visibility.PRIVATE && !sameInput) { [BUGGY] [BUGGY] compiler.report(    t.makeError(getprop, PRIVATE_OVERRIDE,         objectType.toString())); t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) { compiler.report( t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name())); } } else { [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	
3	[BUG] [BUGGY] JSDocInfo overridingInfo = parent.getJSDocInfo(); [FE] AssertionFailedError [CONTEXT] return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) {   [BUGGY] JSDocInfo overridingInfo = parent.getJSDocInfo(); [BUGGY] Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    if (visibility == Visibility.PRIVATE && !sameInput) { compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.2886751345948129	447	447	2	replace	
4	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) {   [BUGGY] [BUGGY] JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    if (visibility == Visibility.PRIVATE && !sameInput) { compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.2886751345948129	447	447	2	add	
5	[BUG] [BUGGY] Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility(); [FE] AssertionFailedError [CONTEXT] } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); [BUGGY] Visibility overridingVisibility = overridingInfo == null ?   Visibility.INHERITED : overridingInfo.getVisibility(); [BUGGY] Visibility.INHERITED : overridingInfo.getVisibility();    if (visibility == Visibility.PRIVATE && !sameInput) { compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.2886751345948129	448	449	2	replace	
6	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); [BUGGY] [BUGGY] Visibility overridingVisibility = overridingInfo == null ?   Visibility.INHERITED : overridingInfo.getVisibility(); Visibility.INHERITED : overridingInfo.getVisibility();    if (visibility == Visibility.PRIVATE && !sameInput) { compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.2886751345948129	448	449	2	add	
7	[BUG] [BUGGY] if (visibility == Visibility.PRIVATE && !sameInput) { [FE] AssertionFailedError [CONTEXT] if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    [BUGGY] if (visibility == Visibility.PRIVATE && !sameInput) { [BUGGY] compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) { compiler.report( t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name())); } [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.2886751345948129	454	454	2	replace	
8	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    [BUGGY] [BUGGY] if (visibility == Visibility.PRIVATE && !sameInput) { compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) { compiler.report( t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name())); } [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.2886751345948129	454	454	2	add	
9	[BUG] [BUGGY] } else { [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) { compiler.report( t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name())); } [BUGGY] } else { [BUGGY] if (sameInput) {  return; } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) { if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) { return; }  [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.2886751345948129	465	465	2	replace	
10	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(getprop, PRIVATE_OVERRIDE, objectType.toString())); } else if (overridingVisibility != Visibility.INHERITED && overridingVisibility != visibility) { compiler.report( t.makeError(getprop, VISIBILITY_MISMATCH, visibility.name(), objectType.toString(), overridingVisibility.name())); } [BUGGY] [BUGGY] } else { if (sameInput) {  return; } else if (visibility == Visibility.PRIVATE && (currentClass == null || ownerType.differsFrom(currentClass))) { if (docInfo.isConstructor() && isValidPrivateConstructorAccess(parent)) { return; }  [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.2886751345948129	465	465	2	add	
11	[BUG] [BUGGY] break; [FE] AssertionFailedError [CONTEXT]  if (isOverride) { objectType = objectType.getImplicitPrototype(); } JSDocInfo docInfo = null; for (; objectType != null; objectType = objectType.getImplicitPrototype()) { docInfo = objectType.getOwnPropertyJSDocInfo(propertyName); if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) { [BUGGY] break; [BUGGY] } } if (objectType == null) {  return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	431	431	2	replace	
12	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT]  if (isOverride) { objectType = objectType.getImplicitPrototype(); } JSDocInfo docInfo = null; for (; objectType != null; objectType = objectType.getImplicitPrototype()) { docInfo = objectType.getOwnPropertyJSDocInfo(propertyName); if (docInfo != null && docInfo.getVisibility() != Visibility.INHERITED) { [BUGGY] [BUGGY] break; } } if (objectType == null) {  return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	431	431	2	add	
13	[BUG] [BUGGY] boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); [FE] AssertionFailedError [CONTEXT] docInfo.getVisibility() != Visibility.INHERITED) { break; } } if (objectType == null) {  return; } [BUGGY] boolean sameInput =   t.getInput().getName().equals(docInfo.getSourceName()); [BUGGY] t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();  [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	440	441	2	replace	
14	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] docInfo.getVisibility() != Visibility.INHERITED) { break; } } if (objectType == null) {  return; } [BUGGY] [BUGGY] boolean sameInput =   t.getInput().getName().equals(docInfo.getSourceName()); t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();  [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	440	441	2	add	
15	[BUG] [BUGGY] Visibility visibility = docInfo.getVisibility(); [FE] AssertionFailedError [CONTEXT] } } if (objectType == null) {  return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); [BUGGY] Visibility visibility = docInfo.getVisibility(); [BUGGY] JSType ownerType = normalizeClassType(objectType); if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	442	442	2	replace	
16	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } } if (objectType == null) {  return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); [BUGGY] [BUGGY] Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	442	442	2	add	
17	[BUG] [BUGGY] JSType ownerType = normalizeClassType(objectType); [FE] AssertionFailedError [CONTEXT] } if (objectType == null) {  return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); [BUGGY] JSType ownerType = normalizeClassType(objectType); [BUGGY] if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();     [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	443	443	2	replace	
18	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } if (objectType == null) {  return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); [BUGGY] [BUGGY] JSType ownerType = normalizeClassType(objectType); if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();     [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	443	443	2	add	
19	[BUG] [BUGGY] if (isOverride) { [FE] AssertionFailedError [CONTEXT] if (objectType == null) {  return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); [BUGGY] if (isOverride) { [BUGGY]   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    if (visibility == Visibility.PRIVATE && !sameInput) { [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	444	444	2	replace	
20	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (objectType == null) {  return; } boolean sameInput = t.getInput().getName().equals(docInfo.getSourceName()); Visibility visibility = docInfo.getVisibility(); JSType ownerType = normalizeClassType(objectType); [BUGGY] [BUGGY] if (isOverride) {   JSDocInfo overridingInfo = parent.getJSDocInfo(); Visibility overridingVisibility = overridingInfo == null ? Visibility.INHERITED : overridingInfo.getVisibility();    if (visibility == Visibility.PRIVATE && !sameInput) { [CLASS] CheckAccessControls [METHOD] checkPropertyVisibility [RETURN_TYPE] void  NodeTraversal t Node getprop Node parent [VARIABLES] JSType currentClass lValueType ownerType type NodeTraversal t Node getprop parent String propertyName JSDocInfo docInfo overridingInfo int deprecatedDepth methodDepth TypeValidator validator Multimap initializedConstantProperties ObjectType objectType AbstractCompiler compiler boolean isOverride sameInput DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Visibility overridingVisibility visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.254000254000381	444	444	2	add	
21	[BUG] [BUGGY] ObjectType prototype = objectType.getImplicitPrototype(); [FE] AssertionFailedError [CONTEXT] JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { [BUGGY] ObjectType prototype = objectType.getImplicitPrototype(); [BUGGY] if (prototype != null) { JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.22360679774997896	388	388	2	replace	
22	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { [BUGGY] [BUGGY] ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.22360679774997896	388	388	2	add	
23	[BUG] [BUGGY] if (prototype != null) { [FE] AssertionFailedError [CONTEXT] JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); [BUGGY] if (prototype != null) { [BUGGY] JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.22360679774997896	389	389	2	replace	
24	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); [BUGGY] [BUGGY] if (prototype != null) { JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.22360679774997896	389	389	2	add	
25	[BUG] [BUGGY] JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); [FE] AssertionFailedError [CONTEXT] if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { [BUGGY] JSDocInfo prototypeInfo   = prototype.getOwnPropertyJSDocInfo(propertyName); [BUGGY] = prototype.getOwnPropertyJSDocInfo(propertyName); if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } } } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.22360679774997896	390	391	2	replace	
26	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { [BUGGY] [BUGGY] JSDocInfo prototypeInfo   = prototype.getOwnPropertyJSDocInfo(propertyName); = prototype.getOwnPropertyJSDocInfo(propertyName); if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } } } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.22360679774997896	390	391	2	add	
27	[BUG] [BUGGY] if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { [FE] AssertionFailedError [CONTEXT] initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); [BUGGY] if (prototypeInfo != null && prototypeInfo.isConstant()    && prototype.hasReferenceName()) { [BUGGY] && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } } } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.22360679774997896	392	393	2	replace	
28	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); [BUGGY] [BUGGY] if (prototypeInfo != null && prototypeInfo.isConstant()    && prototype.hasReferenceName()) { && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } } } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.22360679774997896	392	393	2	add	
29	[BUG] [BUGGY] ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); [FE] AssertionFailedError [CONTEXT] Node getprop) {  Node parent = getprop.getParent(); if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) { return; } [BUGGY] ObjectType objectType =  ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); [BUGGY] ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	359	360	2	replace	
30	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getprop) {  Node parent = getprop.getParent(); if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) { return; } [BUGGY] [BUGGY] ObjectType objectType =  ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	359	360	2	add	
31	[BUG] [BUGGY] String propertyName = getprop.getLastChild().getString(); [FE] AssertionFailedError [CONTEXT] Node getprop) {  Node parent = getprop.getParent(); if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) { return; } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); [BUGGY] String propertyName = getprop.getLastChild().getString(); [BUGGY]   if (objectType != null) { ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	361	361	2	replace	
32	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] Node getprop) {  Node parent = getprop.getParent(); if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) { return; } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); [BUGGY] [BUGGY] String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	361	361	2	add	
33	[BUG] [BUGGY] if (objectType != null) { [FE] AssertionFailedError [CONTEXT] if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) { return; } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  [BUGGY] if (objectType != null) { [BUGGY] ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	364	364	2	replace	
34	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] if (!(NodeUtil.isAssignmentOp(parent) && parent.getFirstChild() == getprop) && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) { return; } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  [BUGGY] [BUGGY] if (objectType != null) { ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	364	364	2	add	
35	[BUG] [BUGGY] ObjectType oType = objectType; [FE] AssertionFailedError [CONTEXT] && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) { return; } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { [BUGGY] ObjectType oType = objectType; [BUGGY] while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	365	365	2	replace	
36	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] && (parent.getType() != Token.INC) && (parent.getType() != Token.DEC)) { return; } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { [BUGGY] [BUGGY] ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	365	365	2	add	
37	[BUG] [BUGGY] while (oType != null) { [FE] AssertionFailedError [CONTEXT] return; } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; [BUGGY] while (oType != null) { [BUGGY] if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	366	366	2	replace	
38	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] return; } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; [BUGGY] [BUGGY] while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	366	366	2	add	
39	[BUG] [BUGGY] if (oType.hasReferenceName()) { [FE] AssertionFailedError [CONTEXT] } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; while (oType != null) { [BUGGY] if (oType.hasReferenceName()) { [BUGGY] if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	367	367	2	replace	
40	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; while (oType != null) { [BUGGY] [BUGGY] if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	367	367	2	add	
41	[BUG] [BUGGY] if (initializedConstantProperties.containsEntry(  oType.getReferenceName(), propertyName)) { [FE] AssertionFailedError [CONTEXT] ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { [BUGGY] if (initializedConstantProperties.containsEntry(     oType.getReferenceName(), propertyName)) { [BUGGY] oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); }  [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	368	369	2	replace	
42	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] ObjectType objectType = ObjectType.cast(dereference(getprop.getFirstChild().getJSType())); String propertyName = getprop.getLastChild().getString();  if (objectType != null) { ObjectType oType = objectType; while (oType != null) { if (oType.hasReferenceName()) { [BUGGY] [BUGGY] if (initializedConstantProperties.containsEntry(     oType.getReferenceName(), propertyName)) { oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); }  [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	368	369	2	add	
43	[BUG] [BUGGY] oType = oType.getImplicitPrototype(); [FE] AssertionFailedError [CONTEXT] while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } [BUGGY] oType = oType.getImplicitPrototype(); [BUGGY] } JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }   [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	376	376	2	replace	
44	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] while (oType != null) { if (oType.hasReferenceName()) { if (initializedConstantProperties.containsEntry( oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } [BUGGY] [BUGGY] oType = oType.getImplicitPrototype(); } JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }   [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	376	376	2	add	
45	[BUG] [BUGGY] JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); [FE] AssertionFailedError [CONTEXT] oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); } [BUGGY] JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); [BUGGY] if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	379	379	2	replace	
46	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] oType.getReferenceName(), propertyName)) { compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); } [BUGGY] [BUGGY] JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	379	379	2	add	
47	[BUG] [BUGGY] if (info != null && info.isConstant() && objectType.hasReferenceName()) { [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); } JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); [BUGGY] if (info != null && info.isConstant()   && objectType.hasReferenceName()) { [BUGGY] && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { JSDocInfo prototypeInfo [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	380	381	2	replace	
48	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] compiler.report( t.makeError(getprop, CONST_PROPERTY_REASSIGNED_VALUE, propertyName)); break; } } oType = oType.getImplicitPrototype(); } JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); [BUGGY] [BUGGY] if (info != null && info.isConstant()   && objectType.hasReferenceName()) { && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { JSDocInfo prototypeInfo [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	380	381	2	add	
49	[BUG] [BUGGY] if (objectType.isInstanceType()) { [FE] AssertionFailedError [CONTEXT] } JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  [BUGGY] if (objectType.isInstanceType()) { [BUGGY] ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	387	387	2	replace	
50	[BUG] [BUGGY] [FE] AssertionFailedError [CONTEXT] } JSDocInfo info = objectType.getOwnPropertyJSDocInfo(propertyName); if (info != null && info.isConstant() && objectType.hasReferenceName()) { initializedConstantProperties.put(objectType.getReferenceName(), propertyName); }  [BUGGY] [BUGGY] if (objectType.isInstanceType()) { ObjectType prototype = objectType.getImplicitPrototype(); if (prototype != null) { JSDocInfo prototypeInfo = prototype.getOwnPropertyJSDocInfo(propertyName); if (prototypeInfo != null && prototypeInfo.isConstant() && prototype.hasReferenceName()) { initializedConstantProperties.put(prototype.getReferenceName(), propertyName); } } [CLASS] CheckAccessControls [METHOD] checkConstantProperty [RETURN_TYPE] void  NodeTraversal t Node getprop [VARIABLES] TypeValidator validator Multimap initializedConstantProperties ObjectType oType objectType prototype AbstractCompiler compiler JSType currentClass lValueType type boolean NodeTraversal t DiagnosticType BAD_PRIVATE_GLOBAL_ACCESS BAD_PRIVATE_PROPERTY_ACCESS BAD_PROTECTED_PROPERTY_ACCESS CONST_PROPERTY_REASSIGNED_VALUE DEPRECATED_CLASS DEPRECATED_CLASS_REASON DEPRECATED_NAME DEPRECATED_NAME_REASON DEPRECATED_PROP DEPRECATED_PROP_REASON PRIVATE_OVERRIDE VISIBILITY_MISMATCH Node getprop parent String propertyName JSDocInfo info prototypeInfo int deprecatedDepth methodDepth  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.1781741612749496	387	387	2	add	
