bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()));  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	compilable	  [FE]  AssertionFailedError  	1	2	replace
3	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	compilable	  [FE]  AssertionFailedError  	1	2	replace
4	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE  [FE]        AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE	1	None	replace
5	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [CE]  cannot  find  symbol  PROPERTY_REASSIGNED_VALUE  [FE]          AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PROPERTY_REASSIGNED_VALUE,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol  PROPERTY_REASSIGNED_VALUE	1	None	replace
6	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [CE]  cannot  find  symbol  PRIVATE_PROPERTY_REASSIGNED_VALUE  [FE]            AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol  PRIVATE_PROPERTY_REASSIGNED_VALUE	1	None	replace
7	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.name()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.name()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.name()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
8	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_VIDE,  objectType.toString()));  [CE]  cannot  find  symbol  PRIVATE_VIDE  [FE]                AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_VIDE,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_VIDE,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol  PRIVATE_VIDE	1	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]    [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	  	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	compilable	  [FE]  AssertionFailedError  	1	3	replace
10	[BUG]  [BUGGY]    [FE]  AssertionFailedError  [FE]                  AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]    [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	  	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	compilable	  [FE]  AssertionFailedError  	1	3	replace
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	compilable	  [FE]  AssertionFailedError  	1	2	replace
12	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	compilable	  [FE]  AssertionFailedError  	1	2	replace
13	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
14	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  objectType.toString()));  [CE]  cannot  find  symbol  PRIVATE_GLOBAL_ACCESS  [FE]    AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol  PRIVATE_GLOBAL_ACCESS	1	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	compilable	  [FE]  AssertionFailedError  	1	2	replace
16	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	compilable	  [FE]  AssertionFailedError  	1	2	replace
17	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  propertyName,  objectType.toString()));  [CE]  cannot  find  symbol  PRIVATE_GLOBAL_ACCESS  [FE]        AssertionFailedError  [CONTEXT]    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  propertyName,  objectType.toString()));	compiler.report(  t.makeError(getprop,  PRIVATE_OVERRIDE,      objectType.toString()));  	non-compiled	[CE]  cannot  find  symbol  PRIVATE_GLOBAL_ACCESS	1	None	replace
