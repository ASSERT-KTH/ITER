bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	  	non-compiled	[CE]  ';'  expected	11	None	add
2	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSError.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSError.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSError.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	  	non-compiled	[CE]  ';'  expected	11	None	add
3	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  objectType  =  getprop.getJSDocInfo();  [CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  objectType  =  getprop.getJSDocInfo();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  objectType  =  getprop.getJSDocInfo();	  	non-compiled	[CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
4	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSError.make(t,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSError.make(t,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSError.make(t,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	  	non-compiled	[CE]  ';'  expected	11	None	add
5	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
6	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  objectType  =  parent.getJSDocInfo();  [CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  objectType  =  parent.getJSDocInfo();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  objectType  =  parent.getJSDocInfo();	  	non-compiled	[CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
7	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo!=  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo!=  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo!=  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
8	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
9	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  VISIBILITY_MISMATCH,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  VISIBILITY_MISMATCH,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_VIDE,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	8	3	replace
10	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  VISIBILITY_MISMATCH,  objectType.toString()));  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  VISIBILITY_MISMATCH,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  VISIBILITY_MISMATCH,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_VIDE,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	8	3	replace
11	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_VIDE,  objectType.name()));  [CE]  cannot  find  symbol  PRIVATE_VIDE  [FE]                      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_VIDE,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_VIDE,  objectType.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_VIDE,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  PRIVATE_VIDE	8	None	replace
12	[BUG]  [BUGGY]  JSDocInfo  objectType  =  getprop.getJSDocInfo();  [CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  JSDocInfo  objectType  =  getprop.getJSDocInfo();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	JSDocInfo  objectType  =  getprop.getJSDocInfo();	      	non-compiled	[CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	10	None	replace
13	[BUG]  [BUGGY]  Visibility  visibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  visibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  Visibility  visibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	Visibility  visibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	      	non-compiled	[CE]  variable  visibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	10	None	replace
14	[BUG]  [BUGGY]  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	      	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	10	None	replace
15	[BUG]  [BUGGY]  Visibility  visibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  visibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  Visibility  visibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	Visibility  visibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	      	non-compiled	[CE]  variable  visibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	10	None	replace
16	[BUG]  [BUGGY]  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	      	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	10	None	replace
17	[BUG]  [BUGGY]  JSDocInfo  objectType  =  parent.getJSDocInfo();  [CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  JSDocInfo  objectType  =  parent.getJSDocInfo();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	JSDocInfo  objectType  =  parent.getJSDocInfo();	      	non-compiled	[CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	10	None	replace
18	[BUG]  [BUGGY]  Visibility  visibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  parent.getJSDocInfo().getVisibility();  [CE]  variable  visibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  Visibility  visibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  parent.getJSDocInfo().getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	Visibility  visibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  parent.getJSDocInfo().getVisibility();	      	non-compiled	[CE]  variable  visibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	10	None	replace
19	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.name()));  [CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  objectType.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE	4	None	replace
20	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  propertyName.toString()));  [CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  propertyName.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  propertyName.toString()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE	4	None	replace
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  CONST_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  CONST_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	4	3	replace
22	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  CONST_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  CONST_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  CONST_PROPERTY_REASSIGNED_VALUE,  objectType.toString()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	4	3	replace
23	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  overridingVisibility.toString()));  [CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  overridingVisibility.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  overridingVisibility.toString()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE	4	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  if(sameInput)  {  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	if(sameInput)  {  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  }	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	3	replace
25	[BUG]  [BUGGY]  if(sameInput)  {  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  if(sameInput)  {  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	if(sameInput)  {  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  }	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	3	replace
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	2	replace
27	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	2	replace
28	[BUG]  [BUGGY]  t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	non-compiled	[CE]  ';'  expected	12	None	replace
29	[BUG]  [BUGGY]  parser.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [CE]  cannot  find  symbol  parser  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  parser.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	parser.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  parser	12	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	2	replace
31	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString(),  overridingVisibility.name()));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	2	replace
32	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  propertyName,  objectType.toString()));  [CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  BAD_PRIVATE_PROPERTY_REASSIGNED_VALUE	3	None	replace
33	[BUG]  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    	non-compiled	[CE]  ';'  expected	3	None	replace
34	[BUG]  [BUGGY]  parser.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [CE]  cannot  find  symbol  parser  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  parser.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	parser.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  parser	3	None	replace
35	[BUG]  [BUGGY]  Context.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [CE]  cannot  find  symbol  Context  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  Context.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	Context.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  Context	3	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	3	2	replace
37	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString(),  overridingVisibility.name()));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	3	2	replace
38	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.name()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	6	3	replace
40	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  objectType.toString()));  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	6	3	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	14	3	replace
42	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  objectType.toString()));  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	14	3	replace
43	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [CE]  cannot  find  symbol  PRIVATE_PROPERTY_ACCESS  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  PRIVATE_PROPERTY_ACCESS	14	None	replace
44	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  objectType.name()));  [CE]  cannot  find  symbol  PRIVATE_GLOBAL_ACCESS  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_GLOBAL_ACCESS,  objectType.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  PRIVATE_GLOBAL_ACCESS	14	None	replace
45	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString(),  overridingVisibility.name()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	compilable	  [FE]  AssertionFailedError  	7	2	replace
47	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  [FE]  AssertionFailedError  [FE]                    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	compilable	  [FE]  AssertionFailedError  	7	2	replace
48	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.name(),  overridingVisibility.name()));  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.name(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.name(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
49	[BUG]  [BUGGY]  compiler.report(t,  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString(),  overridingVisibility.name()));  [CE]  cannot  find  symbol  [FE]                        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t,  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t,  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
50	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  name(),  objectType.toString(),  overridingVisibility.name()));  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  name(),  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  name(),  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
51	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString()));  [CE]  cannot  find  symbol  [FE]                            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
52	[BUG]  [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  t.makeError(getprop,  PRIVATE_OVERRIDE,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	t.makeError(getprop,  PRIVATE_OVERRIDE,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    	non-compiled	[CE]  ';'  expected	16	None	replace
53	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    	compilable	  [FE]  AssertionFailedError  	16	2	replace
54	[BUG]  [BUGGY]  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    	compilable	  [FE]  AssertionFailedError  	16	2	replace
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  if(sameInput)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	if(sameInput)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    	compilable	  [FE]  AssertionFailedError  	16	3	replace
56	[BUG]  [BUGGY]  if(sameInput)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  if(sameInput)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	if(sameInput)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    	compilable	  [FE]  AssertionFailedError  	16	3	replace
57	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName(),  objectType.toString(),  overridingVisibility.name()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName(),  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName(),  objectType.toString(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
58	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  visibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  visibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    	compilable	  [FE]  AssertionFailedError  	16	2	replace
59	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  visibility.name()));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  visibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  visibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    	compilable	  [FE]  AssertionFailedError  	16	2	replace
60	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));	  	non-compiled	[CE]  ';'  expected	2	None	add
61	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  propertyName  =  getprop.getJSDocInfo();  [CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  propertyName  =  getprop.getJSDocInfo();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSDocInfo  propertyName  =  getprop.getJSDocInfo();	  	non-compiled	[CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
62	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSError.make(t,  getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSError.make(t,  getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSError.make(t,  getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));	  	non-compiled	[CE]  ';'  expected	2	None	add
63	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
64	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  propertyName  =  getprop.getPropertyName();  [CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  propertyName  =  getprop.getPropertyName();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSDocInfo  propertyName  =  getprop.getPropertyName();	  	non-compiled	[CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
65	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  propertyName  =  parent.getJSDocInfo();  [CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  propertyName  =  parent.getJSDocInfo();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSDocInfo  propertyName  =  parent.getJSDocInfo();	  	non-compiled	[CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
66	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo!=  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo!=  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo!=  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
67	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  [CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSDocInfo  overridingInfo  =  getprop.getJSDocInfo();	  	non-compiled	[CE]  variable  overridingInfo  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
68	[BUG]  [BUGGY]      Node  objectType  =  getprop.getFirstChild();  [CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]      Node  objectType  =  getprop.getFirstChild();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	        Node  objectType  =  getprop.getFirstChild();	  	non-compiled	[CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	9	None	add
69	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()),  overridingVisibility.name()));  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name()));    	non-compiled	[CE]  ';'  expected	1	None	replace
70	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.toString()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name()));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
71	[BUG]  [BUGGY]  compiler.report(t,  _makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t,  _makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t,  _makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name()));    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    propertyName,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	17	3	replace
73	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  propertyName,  objectType.toString()));  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_GLOBAL_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    propertyName,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	17	3	replace
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    propertyName,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	17	3	replace
75	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PROTECTED_PROPERTY_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    propertyName,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	17	3	replace
76	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [CE]  cannot  find  symbol  PRIVATE_PROPERTY_ACCESS  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    propertyName,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  PRIVATE_PROPERTY_ACCESS	17	None	replace
77	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROTECTED_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [CE]  cannot  find  symbol  BAD_PRIVATE_PROTECTED_PROPERTY_ACCESS  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROTECTED_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROTECTED_PROPERTY_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    propertyName,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  BAD_PRIVATE_PROTECTED_PROPERTY_ACCESS	17	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  DEPRECATED_CLASS_REASON,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  DEPRECATED_CLASS_REASON,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	5	3	replace
79	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  DEPRECATED_CLASS_REASON,  objectType.toString()));  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  DEPRECATED_CLASS_REASON,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  DEPRECATED_CLASS_REASON,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PROPERTY_REASSIGNED_VALUE,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	5	3	replace
80	[BUG]  [BUGGY]  compiler.report(bAD_PRIVATE_PROPERTY_ACCESS.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(bAD_PRIVATE_PROPERTY_ACCESS.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(bAD_PRIVATE_PROPERTY_ACCESS.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.name()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
81	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name(),  overridingVisibility.name()));  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.name()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
82	[BUG]  [BUGGY]  compiler.report(bAD_PRIVATE_PROPERTY_ACCESS.makeError(t,  getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [CE]  cannot  find  symbol  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(bAD_PRIVATE_PROPERTY_ACCESS.makeError(t,  getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(bAD_PRIVATE_PROPERTY_ACCESS.makeError(t,  getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.name()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
83	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.name()));  [CE]  cannot  find  symbol  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.name()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
84	[BUG]  [BUGGY]  compiler.report(t,  t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t,  t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t,  t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.name()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
85	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));	  	non-compiled	[CE]  ';'  expected	15	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
87	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
88	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
89	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
90	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED  &&  overridingVisibility!=  visibility)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.INHERITED  &&  overridingVisibility!=  visibility)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
91	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED  &&  overridingVisibility!=  visibility)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED  &&  overridingVisibility!=  visibility)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.INHERITED  &&  overridingVisibility!=  visibility)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
92	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  JSDocInfo  objectType  =  getprop.getJSDocInfo();  [CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  JSDocInfo  objectType  =  getprop.getJSDocInfo();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    JSDocInfo  objectType  =  getprop.getJSDocInfo();	  	non-compiled	[CE]  variable  objectType  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	15	None	add
93	[BUG]  [BUGGY]  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  RuntimeException  	15	2	add
94	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  RuntimeException  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  RuntimeException  	15	2	add
95	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
96	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]                AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.PRIVATE)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
97	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  return;  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
98	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  return;  }  [FE]  AssertionFailedError  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  return;  }  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.toString(),    overridingVisibility.name()));    if(overridingVisibility!=  Visibility.INHERITED)  {  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString(),  overridingVisibility.name()));  }  else  {  return;  }	  	compilable	  [FE]  AssertionFailedError  	15	2	add
99	[BUG]  [BUGGY]      JSDocInfo  overridingVisibility  =  super.overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]      JSDocInfo  overridingVisibility  =  super.overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	        JSDocInfo  overridingVisibility  =  super.overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	9	None	add
100	[BUG]  [BUGGY]      JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]      JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	        JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	9	None	add
101	[BUG]  [BUGGY]      JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]      JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	        JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	9	None	add
102	[BUG]  [BUGGY]      JSDocInfo  overridingVisibility  =  super.overridingInfo!=  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]      JSDocInfo  overridingVisibility  =  super.overridingInfo!=  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	        JSDocInfo  overridingVisibility  =  super.overridingInfo!=  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	9	None	add
103	[BUG]  [BUGGY]      JSDocInfo  overridingVisibility  =  objectType!=  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]      JSDocInfo  overridingVisibility  =  objectType!=  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	        JSDocInfo  overridingVisibility  =  objectType!=  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	9	None	add
104	[BUG]  [BUGGY]      JSDocInfo  overridingVisibility  =  super.overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]      JSDocInfo  overridingVisibility  =  super.overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	        JSDocInfo  overridingVisibility  =  super.overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	9	None	add
105	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  t.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [CE]  method  report  in  class  NodeTraversal  cannot  be  applied  to  given  types;  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  t.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    t.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));	  	non-compiled	[CE]  method  report  in  class  NodeTraversal  cannot  be  applied  to  given  types;	11	None	add
106	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
107	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
108	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.INHERITED  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
109	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  overridingVisibility  =  objectType  ==  null?  Visibility.PRIVATE  :  overridingInfo.getVisibility();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
110	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.toString();  [CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]              AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.toString()));  JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.toString();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    JSDocInfo  overridingVisibility  =  overridingInfo  ==  null?  Visibility.PRIVATE  :  overridingInfo.toString();	  	non-compiled	[CE]  variable  overridingVisibility  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	11	None	add
111	[BUG]  [BUGGY]  compiler.report(sameInput.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.name()));  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(sameInput.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(sameInput.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
112	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  visibility.name()));  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  visibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.name(),  visibility.name()));	  compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    objectType.name(),    overridingVisibility.name()));    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
113	[BUG]  [BUGGY]  compiler.report(sameInput.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(sameInput.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(sameInput.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  objectType.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.name()));    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
114	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [CE]  cannot  find  symbol  PRIVATE_PRIVATE_PROPERTY_ACCESS  [FE]            AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  PRIVATE_PRIVATE_PROPERTY_ACCESS,  propertyName,  objectType.toString()));	  compiler.report(t.makeError(getprop,    PRIVATE_GLOBAL_ACCESS,    propertyName,    objectType.toString()));    	non-compiled	[CE]  cannot  find  symbol  PRIVATE_PRIVATE_PROPERTY_ACCESS	17	None	replace
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  visibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  visibility.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	2	replace
116	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  visibility.name()));  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  visibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  visibility.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	2	replace
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	add	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	2	replace
118	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  overridingVisibility.name()));  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  overridingVisibility.name()));  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,  BAD_PRIVATE_PROPERTY_ACCESS,  overridingVisibility.name()));	  compiler.report(t.makeError(getprop,    BAD_PRIVATE_PROPERTY_ACCESS,    objectType.toString()));    	compilable	  [FE]  AssertionFailedError  	12	2	replace
119	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSType  propertyName  =  getprop.getPropertyName();  [CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]    AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSType  propertyName  =  getprop.getPropertyName();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSType  propertyName  =  getprop.getPropertyName();	  	non-compiled	[CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
120	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSType  propertyName  =  objectType.toString();  [CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]      AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSType  propertyName  =  objectType.toString();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSType  propertyName  =  objectType.toString();	  	non-compiled	[CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
121	[BUG]  [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  propertyName  =  overridingInfo.getPropertyName();  [CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)  [FE]        AssertionFailedError    [CONTEXT]      JSDocInfo  overridingInfo  =  parent.getJSDocInfo();  Visibility  overridingVisibility  =  overridingInfo  ==  null  ?  Visibility.INHERITED  :  overridingInfo.getVisibility();    if  (visibility  ==  Visibility.PRIVATE  &&  !sameInput)  {    [BUGGY]  compiler.report(t.makeError(getprop,  PRIVATE_OVERRIDE,  propertyName,  objectType.toString()));  JSDocInfo  propertyName  =  overridingInfo.getPropertyName();  [BUGGY]    t.makeError(getprop,  PRIVATE_OVERRIDE,  objectType.toString()));  }  else  if  (overridingVisibility  !=  Visibility.INHERITED  &&  overridingVisibility  !=  visibility)  {  compiler.report(  t.makeError(getprop,  VISIBILITY_MISMATCH,  visibility.name(),  objectType.toString(),  overridingVisibility.name()));  }  }  else  {  [CLASS]  CheckAccessControls  [METHOD]  checkPropertyVisibility  [RETURN_TYPE]  void  NodeTraversal  t  Node  getprop  Node  parent  [VARIABLES]  JSType  currentClass  lValueType  ownerType  type  NodeTraversal  t  Node  getprop  parent  String  propertyName  JSDocInfo  docInfo  overridingInfo  int  deprecatedDepth  methodDepth  TypeValidator  validator  Multimap  initializedConstantProperties  ObjectType  objectType  AbstractCompiler  compiler  boolean  isOverride  sameInput  DiagnosticType  BAD_PRIVATE_GLOBAL_ACCESS  BAD_PRIVATE_PROPERTY_ACCESS  BAD_PROTECTED_PROPERTY_ACCESS  CONST_PROPERTY_REASSIGNED_VALUE  DEPRECATED_CLASS  DEPRECATED_CLASS_REASON  DEPRECATED_NAME  DEPRECATED_NAME_REASON  DEPRECATED_PROP  DEPRECATED_PROP_REASON  PRIVATE_OVERRIDE  VISIBILITY_MISMATCH  Visibility  overridingVisibility  visibility  	projects/Closure71/src/com/google/javascript/jscomp/CheckAccessControls.java	0.5	455	457	2	replace	compiler.report(t.makeError(getprop,    PRIVATE_OVERRIDE,    propertyName,    objectType.toString()));    JSDocInfo  propertyName  =  overridingInfo.getPropertyName();	  	non-compiled	[CE]  variable  propertyName  is  already  defined  in  method  checkPropertyVisibility(NodeTraversal,Node,Node)	2	None	add
