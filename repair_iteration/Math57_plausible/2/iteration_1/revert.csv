projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}else{random=random.nextDouble();}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70parent!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.NONE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random==null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&(random!=null||random.equals(""))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&(random!=null||random.equals(Random.class))){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=Random.createInstance(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer());
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=random;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add(newKMeansPlusPlusClusterer(random));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlus();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,false);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,0);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this(random,EmptyClusterStrategy.LARGEST_SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEEST_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.random=random.nextDouble();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutator==null&&RandomUtils.isEmpty(random)){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansplusPlus();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NONE,Random.class);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlusClusterer(random,EmptyClusterStrategy.VALUE_SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}else{random=random.nextDouble();}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}else{random=random.nextDouble();}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(null);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeGet(random){thrownewIllegalArgumentException("MeansPlusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70this.clusters=newKMeansPlusPlus(random,EmptyClusterStrategy.VALUE_SYNTHETIC);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.NUMBER_VARIANCE,NUMBER_VARIANCE);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.GREGOR);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer(){thrownewIllegalArgumentException("MeansPlusPlusClusterer()mustbeinitializedwithrandom.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add("MeansPlusPlusClusterer()mustbeinitializedtoperfomthismethod.");
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70KMeansPlusPlusClusterer(random,EmptyClusterStrategy.LARGEST_VARIANCE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70[Delete]
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators.add("MeansPlusPlusClusterer()isnotanexception.");
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators=newLinkedHashMap<String,Object>();
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.getValue()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70super(random,EmptyClusterStrategy.NONE,Random.valueOf(random.nextDouble()));
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception.");}if(random!=null){thrownewIllegalArgumentException("MeansPlusPlusClusterer:randomisnotanexception..");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansplusPlusClusterer()isnotsupported.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70safeMultiply(random){thrownewIllegalArgumentException("MeansplusPlusClusterer()mustbeinitialized.");}
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableMeansPlusPlusClusterer.this.random=random;
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70MutableClusterStrategy.notNull(random);
projects/Math57/src/main/java/org/apache/commons/math/stat/clustering/KMeansPlusPlusClusterer.java70mutators=newArrayList<String>();
