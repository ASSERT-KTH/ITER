bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  node.cloneTree(),  newBlock);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.cloneTree(),  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.cloneTree(),  newBlock);	  return    node.cloneTree();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
2	[BUG]  [BUGGY]  return  node.cloneTree(),  newBlock;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.cloneTree(),  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.cloneTree(),  newBlock;	  return    node.cloneTree();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
3	[BUG]  [BUGGY]  return  node.getTree();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getTree();	  return    node.cloneTree();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
4	[BUG]  [BUGGY]  return  node.cloneTree(newBlock);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.cloneTree(newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.cloneTree(newBlock);	  return    node.cloneTree();    	non-compiled	[CE]  <identifier>  expected	15	None	replace
5	[BUG]  [BUGGY]  return  irNode  ==  null?  this  :  newBlock;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode  ==  null?  this  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode  ==  null?  this  :  newBlock;	  return    newBlock    ==    null?    this    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
6	[BUG]  [BUGGY]  return  newBlock  ==  null?  null  :  newBlock;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  null?  null  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  null?  null  :  newBlock;	  return    newBlock    ==    null?    this    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
7	[BUG]  [BUGGY]  return  newBlock  ==  null?  this  :  newBlock.cloneTree();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  null?  this  :  newBlock.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  null?  this  :  newBlock.cloneTree();	  return    newBlock    ==    null?    this    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
8	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
9	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.VAR;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
10	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
11	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
12	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.VAR;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
13	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
14	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
15	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()!=  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()!=  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()!=  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
16	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  newBlock.getFirstChild()!=  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  newBlock.getFirstChild()!=  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  newBlock.getFirstChild()!=  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
17	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
18	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	69	None	replace
19	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  &&  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
20	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
21	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
22	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.FUNCTION  &&  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
23	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getLastChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getLastChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getLastChild()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
24	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  newBlock);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  newBlock);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
25	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  node.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  node.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  node.getFirstChild()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
26	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  newBlock.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  newBlock.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  newBlock.getFirstChild()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
27	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
28	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getNext()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getNext()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getNext()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
29	[BUG]  [BUGGY]  irNode.setWasEmptyNode(false);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setWasEmptyNode(false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setWasEmptyNode(false);	  irNode.setLineno(irNode.getLineno());    else    irNode.setWasEmptyNode(false);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
30	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(true);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(true);	  irNode.setLineno(irNode.getLineno());    else    irNode.setWasEmptyNode(false);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
31	[BUG]  [BUGGY]  irNode.setWasEmptyNode(true);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setWasEmptyNode(true);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setWasEmptyNode(true);	  irNode.setLineno(irNode.getLineno());    else    irNode.setWasEmptyNode(false);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
32	[BUG]  [BUGGY]  newBlock.setLineno(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  newBlock.setLineno(irNode.getLineno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	newBlock.setLineno(irNode.getLineno());	  irNode.setLineno(irNode.getLineno());    newBlock.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
33	[BUG]  [BUGGY]  newBlock.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  newBlock.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	newBlock.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    newBlock.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
34	[BUG]  [BUGGY]  node.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  node.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	node.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    newBlock.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
35	[BUG]  [BUGGY]  Node.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  Node.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	Node.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    newBlock.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
36	[BUG]  [BUGGY]  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    newBlock.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
37	[BUG]  [BUGGY]  Node  newBlock  =  irNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  Node  newBlock  =  irNode.getFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	Node  newBlock  =  irNode.getFirstChild();	  if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
38	[BUG]  [BUGGY]  Node  newBlock  =  irNode.getNext();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  Node  newBlock  =  irNode.getNext();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	Node  newBlock  =  irNode.getNext();	  if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
39	[BUG]  [BUGGY]  Node  newBlock  =  irNode.getType();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  Node  newBlock  =  irNode.getType();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	Node  newBlock  =  irNode.getType();	  if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
40	[BUG]  [BUGGY]  node.setType(Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  node.setType(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	node.setType(Token.NAME);	  if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
41	[BUG]  [BUGGY]  irNode.setType(Token.VAR,  newBlock);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.VAR,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.VAR,  newBlock);	  irNode.setType(Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
42	[BUG]  [BUGGY]  irNode.setType(Token.VAR,  node);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.VAR,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.VAR,  node);	  irNode.setType(Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
43	[BUG]  [BUGGY]  irNode.setType(Token.VAR,  nameNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.VAR,  nameNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.VAR,  nameNode);	  irNode.setType(Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
44	[BUG]  [BUGGY]  irNode.setType(Token.VAR,  token);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.VAR,  token);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.VAR,  token);	  irNode.setType(Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
45	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getString()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getString()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getString()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
46	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
47	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME,  newBlock);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME,  newBlock);	  return    irNode.getType()    ==    Token.NAME?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
48	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  node.getParent()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  node.getParent()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  node.getParent()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
49	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT,  newBlock);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.OBJECTLIT,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.OBJECTLIT,  newBlock);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
50	[BUG]  [BUGGY]  return  node.getLastChild();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getLastChild();	  return    node.getParent();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
51	[BUG]  [BUGGY]  return  node.getNext();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getNext();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getNext();	  return    node.getParent();    	non-compiled	[CE]  <identifier>  expected	85	None	replace
52	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
53	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
54	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
55	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
56	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
57	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.WARNING;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
58	[BUG]  [BUGGY]  return  node.clone();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.clone();	  return    irNode.clone();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  return  newBlock.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()!=  Token.EXPR_RESULT;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
60	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EXPR_RESULT;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
61	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  null  :  newBlock.getType();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  null  :  newBlock.getType();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT?  null  :  newBlock.getType();	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
62	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESULT;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
63	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()!=  Token.EXPR_RESULT;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
64	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
65	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
66	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
67	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
68	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
69	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
70	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
71	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
72	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
73	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();	  return    irNode.getType()    ==    Token.NAME?    irNode.getLastChild()    :    node.getLastChild();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
74	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  node.getFirstChild()  :  node.getLastChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  node.getFirstChild()  :  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  node.getFirstChild()  :  node.getLastChild();	  return    irNode.getType()    ==    Token.NAME?    irNode.getLastChild()    :    node.getLastChild();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
75	[BUG]  [BUGGY]  return  node.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();	  return    irNode.getType()    ==    Token.NAME?    irNode.getLastChild()    :    node.getLastChild();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
76	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()  :  node.getLastChild();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()  :  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()  :  node.getLastChild();	  return    irNode.getType()    ==    Token.NAME?    irNode.getLastChild()    :    node.getLastChild();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
77	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  node.getLastChild()  :  node.getLastChild();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  node.getLastChild()  :  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  node.getLastChild()  :  node.getLastChild();	  return    irNode.getType()    ==    Token.NAME?    irNode.getLastChild()    :    node.getLastChild();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
78	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  node.getFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  node.getFirstChild();	  return    irNode.getType()    ==    Token.NAME?    irNode.getLastChild()    :    node.getLastChild();    	non-compiled	[CE]  <identifier>  expected	27	None	replace
79	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
80	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
81	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
82	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
83	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
84	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()    ==    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
85	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  newBlock.getFirstChild()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  newBlock.getFirstChild()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  newBlock.getFirstChild()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()    ==    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
86	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()    ==    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
87	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()    ==    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
88	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()    ==    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
89	[BUG]  [BUGGY]  return  node.getType()  ==  Token.NAME?  node.getLastChild()  :  node.getLastChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.NAME?  node.getLastChild()  :  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.NAME?  node.getLastChild()  :  node.getLastChild();	  return    node.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	93	None	replace
90	[BUG]  [BUGGY]  return  newBlock.getLastChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getLastChild();	  return    node.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	93	None	replace
91	[BUG]  [BUGGY]  return  node.getType()  ==  Token.VAR?  node.getLastChild()  :  node.getLastChild();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.VAR?  node.getLastChild()  :  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.VAR?  node.getLastChild()  :  node.getLastChild();	  return    node.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	93	None	replace
92	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  newBlock);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  newBlock);	  return    irNode.getType()    ==    Token.NAME?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
93	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
94	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  node.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  node.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  node.getFirstChild()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
95	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  newBlock.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  newBlock.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  newBlock.getFirstChild()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
96	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
97	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
98	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
99	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
100	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
101	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
102	[BUG]  [BUGGY]  return  newBlock.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()!=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()!=  Token.EXPR_RESERVED;	  return    newBlock.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
103	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;	  return    newBlock.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
104	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()!=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()!=  Token.EXPR_RESERVED;	  return    newBlock.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
105	[BUG]  [BUGGY]  irNode.setType(Token.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.EXPR_RESULT);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.EXPR_RESULT);	  irNode.setType(Token.EMPTY);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
106	[BUG]  [BUGGY]  irNode.setType(Token.EMPTY,  newBlock);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.EMPTY,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.EMPTY,  newBlock);	  irNode.setType(Token.EMPTY);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
107	[BUG]  [BUGGY]  irNode.setType(Token.GETPROP);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.GETPROP);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.GETPROP);	  irNode.setType(Token.EMPTY);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
108	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
109	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
110	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
111	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
112	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
113	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
114	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isFunction(irNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isFunction(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isFunction(irNode);	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isFunction(irNode);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
115	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(newBlock);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(newBlock);	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isFunction(irNode);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
116	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  NodeUtil.isFunction(irNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  NodeUtil.isFunction(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  &&  NodeUtil.isFunction(irNode);	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isFunction(irNode);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
117	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isAssignmentOp(irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isAssignmentOp(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isAssignmentOp(irNode);	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isFunction(irNode);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
118	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isExpressionNode(irNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isExpressionNode(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isExpressionNode(irNode);	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isFunction(irNode);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
119	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(irNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isName(irNode);	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isFunction(irNode);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
120	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getChildCount()  >  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getChildCount()  >  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getChildCount()  >  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
121	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getChildCount()  >  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getChildCount()  >  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getChildCount()  >  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
122	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >=  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >=  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >=  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
123	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  <  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  <  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  <  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
124	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getChildCount()  >  1  :  irNode.getChildCount();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getChildCount()  >  1  :  irNode.getChildCount();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getChildCount()  >  1  :  irNode.getChildCount();	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
125	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()!=  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()!=  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()!=  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
126	[BUG]  [BUGGY]  irNode.setType(Token.BLOCK,  newBlock);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.BLOCK,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.BLOCK,  newBlock);	  irNode.setType(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
127	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
128	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
129	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
130	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
131	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
132	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
133	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
134	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
135	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETELEM)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETELEM)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETELEM)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
136	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
137	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
138	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
139	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(irNode))  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(irNode))  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(irNode))  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
140	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isExpressionNode(irNode))  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isExpressionNode(irNode))  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isExpressionNode(irNode))  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
141	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(node))  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(node))  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(node))  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
142	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock.getString().equals( "prototype "))  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock.getString().equals( "prototype "))  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock.getString().equals( "prototype "))  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
143	[BUG]  [BUGGY]  return  irNode  ==  node?  null  :  newBlock;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode  ==  node?  null  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode  ==  node?  null  :  newBlock;	  return    newBlock    ==    node?    null    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
144	[BUG]  [BUGGY]  return  newBlock  ==  node?  null  :  newBlock.cloneTree();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  node?  null  :  newBlock.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  node?  null  :  newBlock.cloneTree();	  return    newBlock    ==    node?    null    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
145	[BUG]  [BUGGY]  return  newBlock!=  node?  null  :  newBlock;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock!=  node?  null  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  node?  null  :  newBlock;	  return    newBlock    ==    node?    null    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
146	[BUG]  [BUGGY]  return  irNode.getType()  >=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  >=  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  >=  Token.BLOCK;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
147	[BUG]  [BUGGY]  return  irNode.getType()  >>  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  >>  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  >>  Token.BLOCK;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
148	[BUG]  [BUGGY]  return  irNode.getType()  [Delete]  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  [Delete]  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  [Delete]  Token.BLOCK;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
149	[BUG]  [BUGGY]  return  newBlock.getType()!=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()!=  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()!=  Token.BLOCK;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
150	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESULT;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
151	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getParent()!=  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getParent()!=  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getParent()!=  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getParent()!=    null;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
152	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getParent()!=  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getParent()!=  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getParent()!=  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getParent()!=    null;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
153	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getNext()!=  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getNext()!=  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getNext()!=  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getParent()!=    null;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
154	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getNext()!=  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getNext()!=  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getNext()!=  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getParent()!=    null;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
155	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getParent()!=    null;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
156	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()!=  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()!=  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()!=  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getParent()!=    null;    	non-compiled	[CE]  <identifier>  expected	107	None	replace
157	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
158	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.NAME;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
159	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
160	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
161	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.NAME;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
162	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
163	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  irNode);  irNode.setLineno(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(newBlock,  irNode);  irNode.setLineno(irNode.getLineno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  irNode);  irNode.setLineno(irNode.getLineno());	  maybeSetLengthFrom(newBlock,    node);    irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
164	[BUG]  [BUGGY]  node.setLineno(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  node.setLineno(irNode.getLineno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	node.setLineno(irNode.getLineno());	  maybeSetLengthFrom(newBlock,    node);    irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
165	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setString(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setString(irNode.getLineno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  node);  irNode.setString(irNode.getLineno());	  maybeSetLengthFrom(newBlock,    node);    irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
166	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setStroke(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setStroke(irNode.getLineno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  node);  irNode.setStroke(irNode.getLineno());	  maybeSetLengthFrom(newBlock,    node);    irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
167	[BUG]  [BUGGY]  return  irNode.cloneTree(newBlock,  node);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.cloneTree(newBlock,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.cloneTree(newBlock,  node);	  return    irNode.cloneTree(newBlock);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
168	[BUG]  [BUGGY]  return  irNode.cloneTree(newBlock,  newBlock);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.cloneTree(newBlock,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.cloneTree(newBlock,  newBlock);	  return    irNode.cloneTree(newBlock);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
169	[BUG]  [BUGGY]  return  newBlock.cloneTree(irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.cloneTree(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.cloneTree(irNode);	  return    irNode.cloneTree(newBlock);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
170	[BUG]  [BUGGY]  return  irNode.cloneTree(newBlock,  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.cloneTree(newBlock,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.cloneTree(newBlock,  null);	  return    irNode.cloneTree(newBlock);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
171	[BUG]  [BUGGY]  return  irNode.cloneTree(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.cloneTree(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.cloneTree(newBlock,  irNode);	  return    irNode.cloneTree(newBlock);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
172	[BUG]  [BUGGY]  return  irNode.cloneTree(newBlock,  false);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.cloneTree(newBlock,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.cloneTree(newBlock,  false);	  return    irNode.cloneTree(newBlock);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
173	[BUG]  [BUGGY]  irNode.setType(Token.FUNCTION);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.FUNCTION);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.FUNCTION);	  if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
174	[BUG]  [BUGGY]  return  irNode.getType()  >=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  >=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  >=  Token.EXPR_RESULT;	  return    irNode.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
175	[BUG]  [BUGGY]  return  irNode.getType()  >>  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  >>  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  >>  Token.EXPR_RESULT;	  return    irNode.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
176	[BUG]  [BUGGY]  return  irNode.getType()  [Delete]  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  [Delete]  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  [Delete]  Token.EXPR_RESULT;	  return    irNode.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
177	[BUG]  [BUGGY]  return  node.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()!=  Token.EXPR_RESULT;	  return    irNode.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
178	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
179	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
180	[BUG]  [BUGGY]  return  irNode!=  null?  this  :  newBlock;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode!=  null?  this  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode!=  null?  this  :  newBlock;	  return    newBlock!=    null?    this    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
181	[BUG]  [BUGGY]  return  newBlock!=  null?  null  :  newBlock;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock!=  null?  null  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  null?  null  :  newBlock;	  return    newBlock!=    null?    this    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	105	None	replace
182	[BUG]  [BUGGY]  return(newBlock!=  null)?  irNode  :  node;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(newBlock!=  null)?  irNode  :  node;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(newBlock!=  null)?  irNode  :  node;	  return(irNode!=    null)?    newBlock    :    node;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
183	[BUG]  [BUGGY]  return(newBlock  ==  null)?  irNode  :  node;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(newBlock  ==  null)?  irNode  :  node;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(newBlock  ==  null)?  irNode  :  node;	  return(irNode!=    null)?    newBlock    :    node;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
184	[BUG]  [BUGGY]  return(newBlock!=  null)?  irNode  :  newBlock;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(newBlock!=  null)?  irNode  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(newBlock!=  null)?  irNode  :  newBlock;	  return(irNode!=    null)?    newBlock    :    node;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
185	[BUG]  [BUGGY]  return(newBlock  ==  null)?  irNode  :  newBlock;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(newBlock  ==  null)?  irNode  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(newBlock  ==  null)?  irNode  :  newBlock;	  return(irNode!=    null)?    newBlock    :    node;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
186	[BUG]  [BUGGY]  return(node  ==  null)?  newBlock  :  irNode;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(node  ==  null)?  newBlock  :  irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(node  ==  null)?  newBlock  :  irNode;	  return(irNode!=    null)?    newBlock    :    node;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
187	[BUG]  [BUGGY]  return(node!=  null)?  newBlock  :  irNode;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(node!=  null)?  newBlock  :  irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(node!=  null)?  newBlock  :  irNode;	  return(irNode!=    null)?    newBlock    :    node;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
188	[BUG]  [BUGGY]  return(irNode!=  null)?  newBlock  :  node.getParent();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  newBlock  :  node.getParent();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  newBlock  :  node.getParent();	  return(irNode!=    null)?    newBlock    :    node;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
189	[BUG]  [BUGGY]  return  newBlock.removeLastChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.removeLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.removeLastChild();	  return    irNode.removeLastChild();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
190	[BUG]  [BUGGY]  return  node.removeLastChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.removeLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.removeLastChild();	  return    irNode.removeLastChild();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
191	[BUG]  [BUGGY]  return  newBlock!=  null?  null  :  newBlock.cloneTree();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock!=  null?  null  :  newBlock.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  null?  null  :  newBlock.cloneTree();	  return    newBlock.cloneTree();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
192	[BUG]  [BUGGY]  return  newBlock.cloneTree(),  node);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.cloneTree(),  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.cloneTree(),  node);	  return    newBlock.cloneTree();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
193	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
194	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
195	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
196	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
197	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
198	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
199	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
200	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
201	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
202	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
203	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
204	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
205	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
206	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
207	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
208	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
209	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EXPR_RESULT  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EXPR_RESULT  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EXPR_RESULT  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
210	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
211	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.NAME,  newBlock);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  new  Node(Token.NAME,  newBlock);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
212	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.NAME,  newBlock);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  new  Node(Token.NAME,  newBlock);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
213	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.NAME,  irNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  new  Node(Token.NAME,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
214	[BUG]  [BUGGY]  return(irNode!=  null)?  new  Node(Token.NAME,  irNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  new  Node(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  new  Node(Token.NAME,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
215	[BUG]  [BUGGY]  return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  newBlock);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  newBlock);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
216	[BUG]  [BUGGY]  return(irNode  ==  null)?  new  Node(Token.NAME,  irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  new  Node(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  new  Node(Token.NAME,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
217	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  null;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  null;	  return    irNode.getNext();    	non-compiled	[CE]  <identifier>  expected	35	None	replace
218	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL  &&  irNode.getParent()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL  &&  irNode.getParent()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL  &&  irNode.getParent()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
219	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getString()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getString()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getString()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
220	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  node.getParent()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  node.getParent()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  node.getParent()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
221	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
222	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	17	None	replace
223	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
224	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getLastChild().getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
225	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
226	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
227	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getFirstChild().getType()!=  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
228	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
229	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
230	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
231	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
232	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.GETPROP;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
233	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
234	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	41	None	replace
235	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
236	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
237	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
238	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
239	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  irNode;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  irNode;	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
240	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  newBlock;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  newBlock;	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
241	[BUG]  [BUGGY]  return(irNode!=  null)?  newBlock  :  irNode;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  newBlock  :  irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  newBlock  :  irNode;	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
242	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  newBlock;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  newBlock;	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
243	[BUG]  [BUGGY]  return(irNode  ==  null)?  newBlock  :  irNode;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  newBlock  :  irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  newBlock  :  irNode;	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
244	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
245	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
246	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
247	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
248	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  irNode.getLastChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  irNode.getLastChild()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK?  irNode.getLastChild()  :  Node.newString(Token.NAME);	  return    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
249	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getLastChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getLastChild();	  return    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
250	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
251	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.EXPR_RESERVED  +  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.EXPR_RESERVED  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.EXPR_RESERVED  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
252	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EXPR_RESERVED  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EXPR_RESERVED  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EXPR_RESERVED  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
253	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  Token.EXPR_RESERVED  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  Token.EXPR_RESERVED  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  Token.EXPR_RESERVED  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
254	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  Node.EXPR_RESERVED  +  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  Node.EXPR_RESERVED  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  Node.EXPR_RESERVED  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
255	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
256	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
257	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
258	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
259	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  null  :  newBlock.getNext();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  null  :  newBlock.getNext();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT?  null  :  newBlock.getNext();	  return    newBlock.getNext();    	non-compiled	[CE]  <identifier>  expected	5	None	replace
260	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
261	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
262	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
263	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
264	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
265	[BUG]  [BUGGY]  if(irNode!=  null)  {  irNode  =  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  irNode  =  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  irNode  =  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
266	[BUG]  [BUGGY]  Node  newBlock  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  Node  newBlock  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	Node  newBlock  =  node.getFirstChild();	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
267	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno()  +  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setLineno(irNode.getLineno()  +  1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno()  +  1);	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
268	[BUG]  [BUGGY]  irNode.setSourceName(irNode.getSourceName());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setSourceName(irNode.getSourceName());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setSourceName(irNode.getSourceName());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
269	[BUG]  [BUGGY]  irNode.setLineno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setLineno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
270	[BUG]  [BUGGY]  irNode.setSourceFile(irNode.getSourceFile());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setSourceFile(irNode.getSourceFile());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setSourceFile(irNode.getSourceFile());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
271	[BUG]  [BUGGY]  irNode.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
272	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  newBlock);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(newBlock,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  newBlock);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
273	[BUG]  [BUGGY]  maybeSetLengthFrom(irNode,  newBlock);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(irNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(irNode,  newBlock);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
274	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  node,  irNode);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(newBlock,  node,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  node,  irNode);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
275	[BUG]  [BUGGY]  maybeRemoveLengthFrom(newBlock,  node);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeRemoveLengthFrom(newBlock,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeRemoveLengthFrom(newBlock,  node);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
276	[BUG]  [BUGGY]  maybeSetLengthFrom(irNode,  node);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(irNode,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(irNode,  node);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
277	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK?  null  :  irNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK?  null  :  irNode.getFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK?  null  :  irNode.getFirstChild();	  return    irNode.getType()    ==    Token.BLOCK?    null    :    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
278	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getNext();  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getNext();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getNext();	  return    irNode.getType()    ==    Token.BLOCK?    null    :    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
279	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getChildCount();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getChildCount();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getChildCount();	  return    irNode.getType()    ==    Token.BLOCK?    null    :    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
280	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK?  null  :  irNode.getLastChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK?  null  :  irNode.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK?  null  :  irNode.getLastChild();	  return    irNode.getType()    ==    Token.BLOCK?    null    :    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
281	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getString();  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getString();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getString();	  return    irNode.getType()    ==    Token.BLOCK?    null    :    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
282	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
283	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
284	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
285	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
286	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
287	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
288	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getWasEmptyNode();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getWasEmptyNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getWasEmptyNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
289	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getWasEmptyNode();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getWasEmptyNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  &&  irNode.getWasEmptyNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
290	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getWasEmptyNode();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getWasEmptyNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getWasEmptyNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
291	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getWasEmptyNode();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getWasEmptyNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getWasEmptyNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
292	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getEmptyNode();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getEmptyNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getEmptyNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
293	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getHeaderSize();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getHeaderSize();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getHeaderSize();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
294	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
295	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
296	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
297	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
298	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
299	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
300	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  newBlock);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  newBlock);	  return    irNode.getType()    ==    Token.NAME?    irNode.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
301	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getSourceName()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getSourceName()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getSourceName()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
302	[BUG]  [BUGGY]  return  newBlock!=  null?  null  :  newBlock.clone();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock!=  null?  null  :  newBlock.clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  null?  null  :  newBlock.clone();	  return    newBlock.clone();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
303	[BUG]  [BUGGY]  return  newBlock  ==  null?  null  :  newBlock.clone();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  null?  null  :  newBlock.clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  null?  null  :  newBlock.clone();	  return    newBlock.clone();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
304	[BUG]  [BUGGY]  return  newBlock!=  null?  node  :  newBlock.clone();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock!=  null?  node  :  newBlock.clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  null?  node  :  newBlock.clone();	  return    newBlock.clone();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
305	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
306	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
307	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.STRING)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.STRING)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.STRING)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
308	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
309	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
310	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
311	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
312	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
313	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
314	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
315	[BUG]  [BUGGY]  maybeRemoveLengthFrom(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeRemoveLengthFrom(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeRemoveLengthFrom(newBlock,  irNode);	  maybeSetLengthFrom(newBlock,    irNode);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
316	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  irNode,  newBlock);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(newBlock,  irNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  irNode,  newBlock);	  maybeSetLengthFrom(newBlock,    irNode);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
317	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
318	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
319	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
320	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
321	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
322	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
323	[BUG]  [BUGGY]  return  irNode.getParentNode();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getParentNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getParentNode();	  return    newBlock.getParentNode();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
324	[BUG]  [BUGGY]  return  node.getParentNode();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getParentNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getParentNode();	  return    newBlock.getParentNode();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
325	[BUG]  [BUGGY]  return  irNode.getNextNode();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getNextNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getNextNode();	  return    newBlock.getParentNode();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
326	[BUG]  [BUGGY]  return  node.getNextNode();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getNextNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getNextNode();	  return    newBlock.getParentNode();    	non-compiled	[CE]  <identifier>  expected	91	None	replace
327	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.BLOCK)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
328	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.BLOCK)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
329	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.BLOCK)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
330	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.BLOCK)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
331	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);	  irNode.setLineno(irNode.getLineno());    maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
332	[BUG]  [BUGGY]  node.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  node.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	node.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);	  irNode.setLineno(irNode.getLineno());    maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
333	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  newBlock);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  newBlock);	  irNode.setLineno(irNode.getLineno());    maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
334	[BUG]  [BUGGY]  Node.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  Node.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	Node.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  irNode);	  irNode.setLineno(irNode.getLineno());    maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
335	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
336	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  &&  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
337	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
338	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
339	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
340	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
341	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
342	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
343	[BUG]  [BUGGY]  return  irNode.getType()  >=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  >=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  >=  Token.EXPR_RESERVED;	  return    irNode.getType()!=    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
344	[BUG]  [BUGGY]  return  irNode.getType()  >>  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  >>  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  >>  Token.EXPR_RESERVED;	  return    irNode.getType()!=    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
345	[BUG]  [BUGGY]  return  irNode.getType()  [Delete]  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  [Delete]  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  [Delete]  Token.EXPR_RESERVED;	  return    irNode.getType()!=    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
346	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.EXPR_RESERVED;	  return    irNode.getType()!=    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
347	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
348	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
349	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
350	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
351	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  newBlock.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
352	[BUG]  [BUGGY]  node.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  node.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	node.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    node.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	59	None	replace
353	[BUG]  [BUGGY]  Node.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  Node.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	Node.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    node.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	59	None	replace
354	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
355	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
356	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
357	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
358	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
359	[BUG]  [BUGGY]  if(irNode!=  null)  {  irNode  =  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  irNode  =  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  irNode  =  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
360	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
361	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
362	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
363	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()!=  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
364	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
365	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
366	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
367	[BUG]  [BUGGY]  return  newBlock.getTree();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getTree();	  return    irNode.getTree();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
368	[BUG]  [BUGGY]  return  irNode.getType();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType();	  return    irNode.getTree();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
369	[BUG]  [BUGGY]  return  irNode.removeChild(newBlock);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.removeChild(newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.removeChild(newBlock);	  return    irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
370	[BUG]  [BUGGY]  return  irNode.getChildCount();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getChildCount();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getChildCount();	  return    irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
371	[BUG]  [BUGGY]  return  newBlock.removeChild(irNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.removeChild(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.removeChild(irNode);	  return    irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
372	[BUG]  [BUGGY]  return  irNode.removeChild(node);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.removeChild(node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.removeChild(node);	  return    irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
373	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.CALL)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
374	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.CALL)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.CALL)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.CALL)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.CALL)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
375	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.CALL)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
376	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.CALL)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
377	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.CALL)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	94	None	replace
378	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
379	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
380	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
381	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
382	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
383	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
384	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.FUNCTION;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
385	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.EXPR_RESULT;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
386	[BUG]  [BUGGY]  return  newBlock.getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()!=  Token.FUNCTION;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
387	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()!=  Token.EXPR_RESULT;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
388	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.NAME;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
389	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.VAR;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
390	[BUG]  [BUGGY]  irNode.setType(Token.NAME,  newBlock);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.NAME,  newBlock);	  irNode.setType(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
391	[BUG]  [BUGGY]  irNode.setType(Token.NAME,  node);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.NAME,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.NAME,  node);	  irNode.setType(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
392	[BUG]  [BUGGY]  irNode.setType(Token.NAME,  null);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.NAME,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.NAME,  null);	  irNode.setType(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
393	[BUG]  [BUGGY]  irNode.setType(Token.NAME,  nameNode);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.NAME,  nameNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.NAME,  nameNode);	  irNode.setType(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
394	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
395	[BUG]  [BUGGY]  else  if(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
396	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
397	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  node.getType()  ==  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
398	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  &&  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  &&  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
399	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
400	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
401	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.BLOCK,  newBlock);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.BLOCK,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  new  Node(Token.BLOCK,  newBlock);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
402	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK,  newBlock);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK,  newBlock);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
403	[BUG]  [BUGGY]  return(irNode!=  null)?  irNode  :  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  irNode  :  new  Node(Token.BLOCK,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  irNode  :  new  Node(Token.BLOCK,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
404	[BUG]  [BUGGY]  return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
405	[BUG]  [BUGGY]  return(irNode  ==  null)?  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  new  Node(Token.BLOCK,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  new  Node(Token.BLOCK,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
406	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
407	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
408	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  &&  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
409	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
410	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
411	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getType()!=  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
412	[BUG]  [BUGGY]  return  newBlock!=  null?  null  :  newBlock.irNode;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock!=  null?  null  :  newBlock.irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  null?  null  :  newBlock.irNode;	  return    newBlock.irNode;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
413	[BUG]  [BUGGY]  return  newBlock.irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.irNode.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.irNode.cloneTree();	  return    newBlock.irNode;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
414	[BUG]  [BUGGY]  return  newBlock.irNode.getImmediateParentNode();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.irNode.getImmediateParentNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.irNode.getImmediateParentNode();	  return    newBlock.irNode;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
415	[BUG]  [BUGGY]  return  newBlock.irNode.irNode;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.irNode.irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.irNode.irNode;	  return    newBlock.irNode;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
416	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
417	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  &&  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
418	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.VAR;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
419	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
420	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.VAR;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
421	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
422	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);	  return    node.getType()    ==    Token.BLOCK?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
423	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.BLOCK?  node  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newNode.getType()  ==  Token.BLOCK?  node  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newNode.getType()  ==  Token.BLOCK?  node  :  Node.newString(Token.NAME);	  return    node.getType()    ==    Token.BLOCK?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
424	[BUG]  [BUGGY]  return  newNode.getType()  ==  Token.BLOCK?  Node.newString(Token.NAME):  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newNode.getType()  ==  Token.BLOCK?  Node.newString(Token.NAME):  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newNode.getType()  ==  Token.BLOCK?  Node.newString(Token.NAME):  Node.newString(Token.NAME);	  return    node.getType()    ==    Token.BLOCK?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
425	[BUG]  [BUGGY]  return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  name);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  name);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  name);	  return    node.getType()    ==    Token.BLOCK?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
426	[BUG]  [BUGGY]  return  node.getType()!=  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()!=  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()!=  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);	  return    node.getType()    ==    Token.BLOCK?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
427	[BUG]  [BUGGY]  return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  message);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  message);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  message);	  return    node.getType()    ==    Token.BLOCK?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
428	[BUG]  [BUGGY]  return  node.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()!=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()!=  Token.EXPR_RESERVED;	  return    node.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
429	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED;	  return    node.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
430	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EMPTY;	  return    node.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
431	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  irNode.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  irNode.cloneTree();	  return(irNode!=    null)?    node    :    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
432	[BUG]  [BUGGY]  return(irNode!=  null)?  irNode  :  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  irNode  :  irNode.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  irNode  :  irNode.cloneTree();	  return(irNode!=    null)?    node    :    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
433	[BUG]  [BUGGY]  return(irNode!=  null)?  newBlock  :  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  newBlock  :  irNode.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  newBlock  :  irNode.cloneTree();	  return(irNode!=    null)?    node    :    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
434	[BUG]  [BUGGY]  return(irNode  ==  null)?  irNode  :  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  irNode  :  irNode.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  irNode  :  irNode.cloneTree();	  return(irNode!=    null)?    node    :    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
435	[BUG]  [BUGGY]  return(irNode  ==  null)?  newBlock  :  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  newBlock  :  irNode.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  newBlock  :  irNode.cloneTree();	  return(irNode!=    null)?    node    :    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
436	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  irNode.clonePosition();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  irNode.clonePosition();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  irNode.clonePosition();	  return(irNode!=    null)?    node    :    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
437	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
438	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
439	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  &&  irNode.getType()!=  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
440	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
441	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  new  AstNode(irNode,  newBlock);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  new  AstNode(irNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  new  AstNode(irNode,  newBlock);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
442	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  new  AstNode(irNode,  newBlock);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  new  AstNode(irNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  new  AstNode(irNode,  newBlock);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
443	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  new  AstNode(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  new  AstNode(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  new  AstNode(newBlock,  irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
444	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  new  AstNode(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  new  AstNode(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  new  AstNode(newBlock,  irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
445	[BUG]  [BUGGY]  return(irNode!=  null)?  irNode  :  new  AstNode(irNode,  newBlock);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  irNode  :  new  AstNode(irNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  irNode  :  new  AstNode(irNode,  newBlock);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
446	[BUG]  [BUGGY]  return(irNode!=  null)?  new  AstNode(irNode,  irNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  new  AstNode(irNode,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  new  AstNode(irNode,  irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
447	[BUG]  [BUGGY]  return(irNode  ==  null)?  new  AstNode(irNode,  irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  new  AstNode(irNode,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  new  AstNode(irNode,  irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
448	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  2;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  2;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  2;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
449	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  4;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  4;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  4;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
450	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
451	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
452	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
453	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
454	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
455	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	88	None	replace
456	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()    ==    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
457	[BUG]  [BUGGY]  return  irNode.replaceChild(node,  newBlock);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.replaceChild(node,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.replaceChild(node,  newBlock);	  return    node.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	82	None	replace
458	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
459	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  node.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  node.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  node.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
460	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
461	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	19	None	replace
462	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock!=  null)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock!=  null)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock!=  null)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
463	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETELEM)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETELEM)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETELEM)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
464	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(irNode))  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(irNode))  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isGetProp(irNode))  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
465	[BUG]  [BUGGY]  irNode.setType(Token.EMPTY  |  Token.NAME);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.EMPTY  |  Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.EMPTY  |  Token.NAME);	  irNode.setType(Token.EMPTY);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
466	[BUG]  [BUGGY]  irNode.setType(Token.EXPR_RESERVED);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.EXPR_RESERVED);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.EXPR_RESERVED);	  irNode.setType(Token.EMPTY);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
467	[BUG]  [BUGGY]  return(irNode  ==  null)?  irNode  :  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  irNode  :  new  Node(Token.BLOCK,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  irNode  :  new  Node(Token.BLOCK,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
468	[BUG]  [BUGGY]  return(node  ==  null)?  node  :  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(node  ==  null)?  node  :  new  Node(Token.BLOCK,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(node  ==  null)?  node  :  new  Node(Token.BLOCK,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
469	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	47	None	replace
470	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.SCRIPT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	31	None	replace
471	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.FUNCTION  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.FUNCTION  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.FUNCTION  ||  irNode.getType()!=  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	34	None	replace
472	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
473	[BUG]  [BUGGY]  return  newBlock.cloneChildren();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.cloneChildren();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.cloneChildren();	  return    newBlock.clone();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
474	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  nameNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  nameNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  nameNode);	  return    irNode.getType()    ==    Token.NAME?    irNode.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
475	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  name);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  name);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME,  name);	  return    irNode.getType()    ==    Token.NAME?    irNode.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
476	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
477	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	64	None	replace
478	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  name);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  name);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  name);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
479	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  irNode);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
480	[BUG]  [BUGGY]  maybeReplaceChild(node,  newBlock);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeReplaceChild(node,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeReplaceChild(node,  newBlock);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
481	[BUG]  [BUGGY]  maybeReplaceChild(irNode,  node);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeReplaceChild(irNode,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeReplaceChild(irNode,  node);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
482	[BUG]  [BUGGY]  maybeReplaceChild(irNode,  newBlock);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeReplaceChild(irNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeReplaceChild(irNode,  newBlock);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
483	[BUG]  [BUGGY]  return(irNode  ==  null)?  newBlock  :  node;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  newBlock  :  node;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  newBlock  :  node;	  return(irNode!=    null)?    newBlock    :    node;    	non-compiled	[CE]  <identifier>  expected	78	None	replace
484	[BUG]  [BUGGY]  return  irNode.getfirstChild();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getfirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getfirstChild();	  return    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
485	[BUG]  [BUGGY]  return  irNode.getLastChild()  +  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getLastChild()  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getLastChild()  +  1;	  return    irNode.getLastChild();    	non-compiled	[CE]  <identifier>  expected	24	None	replace
486	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.BLOCK)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
487	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.BLOCK)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
488	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.BLOCK)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
489	[BUG]  [BUGGY]  maybeSetEmptyNode(irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetEmptyNode(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetEmptyNode(irNode);	  maybeSetLengthFrom(newBlock,    irNode);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
490	[BUG]  [BUGGY]  maybeSetEmptyNode(irNode,  newBlock);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetEmptyNode(irNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetEmptyNode(irNode,  newBlock);	  maybeSetLengthFrom(newBlock,    irNode);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
491	[BUG]  [BUGGY]  irNode.setLength(newBlock);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setLength(newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLength(newBlock);	  maybeSetLengthFrom(newBlock,    irNode);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
492	[BUG]  [BUGGY]  return  newBlock.replaceChild(irNode,  irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.replaceChild(irNode,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.replaceChild(irNode,  irNode);	  return    newBlock.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
493	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
494	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
495	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
496	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.WARNING;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
497	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.THIS;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.THIS;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.THIS;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
498	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
499	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  node.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  node.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  node.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
500	[BUG]  [BUGGY]  irNode  =  node.getFirstChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode  =  node.getFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode  =  node.getFirstChild();	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
501	[BUG]  [BUGGY]  irNode  =  node;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode  =  node;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode  =  node;	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
502	[BUG]  [BUGGY]  return  node.getType()!=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()!=  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()!=  Token.BLOCK;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
503	[BUG]  [BUGGY]  return  irNode.getType()  [BUGGY]  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  [BUGGY]  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  [BUGGY]  Token.BLOCK;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
504	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
505	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
506	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  irNode);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  irNode);	  return    irNode.getType()    ==    Token.NAME?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
507	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  nameNode);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  nameNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  nameNode);	  return    irNode.getType()    ==    Token.NAME?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
508	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  message);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  message);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  message);	  return    irNode.getType()    ==    Token.NAME?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
509	[BUG]  [BUGGY]  return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  irNode);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
510	[BUG]  [BUGGY]  return(irNode  ==  null)?  irNode  :  new  Node(Token.NAME,  irNode);  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  irNode  :  new  Node(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  irNode  :  new  Node(Token.NAME,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
511	[BUG]  [BUGGY]  return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  node);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  irNode  :  new  Node(Token.NAME,  node);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
512	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.NAME)  {  return  newBlock;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
513	[BUG]  [BUGGY]  return  irNode.cloneBlock();  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.cloneBlock();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.cloneBlock();	  return    irNode.clone();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
514	[BUG]  [BUGGY]  irNode.setType(Token.VAR,  irNode);  [CE]  illegal  start  of  type  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.VAR,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.VAR,  irNode);	  irNode.setType(Token.VAR);    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
515	[BUG]  [BUGGY]  irNode.setType(Token.NAME,  irNode);  [CE]  illegal  start  of  type  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.NAME,  irNode);	  irNode.setType(Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
516	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.BLOCK;  [CE]  unclosed  string  literal  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  unclosed  string  literal	65	None	replace
517	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.BLOCK;  [CE]  unclosed  string  literal  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  unclosed  string  literal	65	None	replace
518	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.EMPTY;  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESERVED?  irNode.getType()  :  Token.EMPTY;	  return    newBlock.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
519	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED?  null  :  newBlock.getType();  [CE]  unclosed  string  literal  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED?  null  :  newBlock.getType();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESERVED?  null  :  newBlock.getType();	  return    newBlock.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  unclosed  string  literal	11	None	replace
520	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME,  newBlock);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME,  newBlock);	  return    irNode.getType()    ==    Token.CALL?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  unclosed  string  literal	38	None	replace
521	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
522	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
523	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
524	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  node;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  node;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  node;  }	  else    if(irNode.getType()    ==    Token.FUNCTION    ||    irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	32	None	replace
525	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  new  AstNode(irNode,  irNode);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  new  AstNode(irNode,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  new  AstNode(irNode,  irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
526	[BUG]  [BUGGY]  return(irNode  ==  null)?  irNode  :  new  AstNode(irNode,  irNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  irNode  :  new  AstNode(irNode,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  irNode  :  new  AstNode(irNode,  irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
527	[BUG]  [BUGGY]  return(irNode!=  null)?  irNode  :  new  AstNode(irNode,  irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  irNode  :  new  AstNode(irNode,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  irNode  :  new  AstNode(irNode,  irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
528	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
529	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
530	[BUG]  [BUGGY]  return  irNode.replaceChild(irNode,  newBlock);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.replaceChild(irNode,  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.replaceChild(irNode,  newBlock);	  return    irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
531	[BUG]  [BUGGY]  return  node.removeChild(irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.removeChild(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.removeChild(irNode);	  return    irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
532	[BUG]  [BUGGY]  return  node.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.FUNCTION;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
533	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
534	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
535	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.EXPR_RESERVED;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
536	[BUG]  [BUGGY]  return  irNode.removeLastChild()  +  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.removeLastChild()  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.removeLastChild()  +  1;	  return    irNode.removeLastChild();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
537	[BUG]  [BUGGY]  return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME,  irNode);	  return    node.getType()    ==    Token.BLOCK?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
538	[BUG]  [BUGGY]  return  node.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.BLOCK);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.BLOCK);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.NAME?  newNode  :  Node.newString(Token.BLOCK);	  return    node.getType()    ==    Token.BLOCK?    newNode    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	77	None	replace
539	[BUG]  [BUGGY]  newBlock.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  newBlock.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	newBlock.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);	  irNode.setLineno(irNode.getLineno());    maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
540	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
541	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
542	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
543	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
544	[BUG]  [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  node  :  new  Node(Token.BLOCK);	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
545	[BUG]  [BUGGY]  return(irNode  ==  null)?  irNode  :  node;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode  ==  null)?  irNode  :  node;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode  ==  null)?  irNode  :  node;	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
546	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.BLOCK);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.BLOCK);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  new  Node(Token.BLOCK);	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
547	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
548	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
549	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  node;  }  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  node;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  node;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
550	[BUG]  [BUGGY]  return  irNode.getLineno();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getLineno();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getLineno();	  return    irNode.getNext();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
551	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
552	[BUG]  [BUGGY]  return  node.cloneTree(irNode);  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.cloneTree(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.cloneTree(irNode);	  return    node.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
553	[BUG]  [BUGGY]  return  node.cloneNode();  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.cloneNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.cloneNode();	  return    node.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
554	[BUG]  [BUGGY]  return  newBlock!=  null?  null  :  newBlock.getParent();  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock!=  null?  null  :  newBlock.getParent();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  null?  null  :  newBlock.getParent();	  return    newBlock.getParent();    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
555	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
556	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED?  null  :  node.getType();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED?  null  :  node.getType();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESERVED?  null  :  node.getType();	  return    node.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
557	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.FUNCTION;	  return    node.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
558	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  +  2;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  +  2;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  +  2;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
559	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT  +  1;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.EXPR_RESULT  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
560	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  -  1;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  -  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  -  1;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
561	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.NAME);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.OBJECTLIT  |  Token.NAME);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
562	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT,  null);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.OBJECTLIT,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.OBJECTLIT,  null);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
563	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT,  node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.OBJECTLIT,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.OBJECTLIT,  node);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
564	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.BLOCK);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.BLOCK);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.OBJECTLIT  |  Token.BLOCK);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
565	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  irNode.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setLineno(irNode.getLineno());  irNode.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());  irNode.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    node.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	59	None	replace
566	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
567	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
568	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getChildCount()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getChildCount()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getChildCount()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
569	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  node.getWasEmptyNode();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  node.getWasEmptyNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  node.getWasEmptyNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
570	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getNameNode();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getNameNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getNameNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
571	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
572	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
573	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETELEM;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETELEM;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETELEM;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
574	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
575	[BUG]  [BUGGY]  return  newBlock.clonePath();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.clonePath();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.clonePath();	  return    newBlock.cloneTree();    	non-compiled	[CE]  <identifier>  expected	1	None	replace
576	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getFirstChild().getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
577	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EMPTY  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
578	[BUG]  [BUGGY]  return  irNode.irNode;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.irNode;	  return    newBlock.irNode;    	non-compiled	[CE]  <identifier>  expected	2	None	replace
579	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
580	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isExpressionNode(newBlock);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isExpressionNode(newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isExpressionNode(newBlock);	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	3	None	replace
581	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isFunctionDeclaration(irNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isFunctionDeclaration(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT  &&  NodeUtil.isFunctionDeclaration(irNode);	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
582	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getType()  :  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getType()  :  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getType()  :  Token.EMPTY;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
583	[BUG]  [BUGGY]  return(newBlock!=  null?  this  :  newBlock);  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(newBlock!=  null?  this  :  newBlock);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(newBlock!=  null?  this  :  newBlock);	  return    newBlock!=    null?    this    :    newBlock;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
584	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
585	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  +  2;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  +  2;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  +  2;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
586	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED  +  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.EXPR_RESERVED  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
587	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.BLOCK;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
588	[BUG]  [BUGGY]  return  irNode.getType()  >=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  >=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  >=  Token.EXPR_RESERVED  &&  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
589	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.NAME?  irNode.getFirstChild()  :  node.getLastChild();	  return    irNode.getType()    ==    Token.NAME?    irNode.getLastChild()    :    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
590	[BUG]  [BUGGY]  return  node.getType()  ==  Token.NAME?  irNode.getLastChild()  :  irNode.getLastChild();  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.NAME?  irNode.getLastChild()  :  irNode.getLastChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.NAME?  irNode.getLastChild()  :  irNode.getLastChild();	  return    irNode.getType()    ==    Token.NAME?    irNode.getLastChild()    :    node.getLastChild();    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
591	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.FUNCTION;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
592	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.FUNCTION;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  node.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
593	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETELEM;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETELEM;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETELEM;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
594	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setCharno(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setCharno(irNode.getLineno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  node);  irNode.setCharno(irNode.getLineno());	  maybeSetLengthFrom(newBlock,    node);    irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
595	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION  ||  newBlock.getType()  ==  Token.GETPROP;	  return    newBlock.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	92	None	replace
596	[BUG]  [BUGGY]  return(irNode!=  null)?  new  Node(Token.NAME,  irNode):  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  new  Node(Token.NAME,  irNode):  new  Node(Token.BLOCK,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  new  Node(Token.NAME,  irNode):  new  Node(Token.BLOCK,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
597	[BUG]  [BUGGY]  return(node  ==  null)?  node  :  new  Node(Token.NAME,  irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(node  ==  null)?  node  :  new  Node(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(node  ==  null)?  node  :  new  Node(Token.NAME,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
598	[BUG]  [BUGGY]  return(irNode!=  null)?  new  Node(Token.NAME,  irNode):  new  Node(Token.EXPR_RESERVED,  irNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  new  Node(Token.NAME,  irNode):  new  Node(Token.EXPR_RESERVED,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  new  Node(Token.NAME,  irNode):  new  Node(Token.EXPR_RESERVED,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.NAME,    irNode);    	non-compiled	[CE]  <identifier>  expected	96	None	replace
599	[BUG]  [BUGGY]  return  newBlock!=  null?  this  :  newBlock.clone();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock!=  null?  this  :  newBlock.clone();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  null?  this  :  newBlock.clone();	  return    newBlock.clone();    	non-compiled	[CE]  <identifier>  expected	6	None	replace
600	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  node;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  node;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  node;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	89	None	replace
601	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.VAR;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.VAR;	  return    irNode.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
602	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.BLOCK;	  return    irNode.getType()!=    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	61	None	replace
603	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.WARNING;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
604	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.WARNING;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.WARNING;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
605	[BUG]  [BUGGY]  return(node  ==  null)?  node  :  new  AstNode(irNode,  irNode);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(node  ==  null)?  node  :  new  AstNode(irNode,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(node  ==  null)?  node  :  new  AstNode(irNode,  irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
606	[BUG]  [BUGGY]  return(irNode!=  null)?  new  AstNode(irNode,  irNode):  new  AstNode(irNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  new  AstNode(irNode,  irNode):  new  AstNode(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  new  AstNode(irNode,  irNode):  new  AstNode(irNode);	  return(irNode!=    null)?    node    :    new    AstNode(irNode,    irNode);    	non-compiled	[CE]  <identifier>  expected	95	None	replace
607	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  1;	  return    irNode.getType()!=    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	7	None	replace
608	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT?  irNode.getString()  :  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT?  irNode.getString()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT?  irNode.getString()  :  null;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
609	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT?  1  :  0;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT?  1  :  0;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT?  1  :  0;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
610	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getString()  :  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getString()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getString()  :  null;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
611	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getFirstChild()!=  node;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getFirstChild()!=  node;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  &&  irNode.getFirstChild()!=  node;	  return    irNode.getType()    ==    Token.EXPR_RESULT    +    1;    	non-compiled	[CE]  <identifier>  expected	79	None	replace
612	[BUG]  [BUGGY]  return  irNode.getChildCount()  >  1?  irNode.getChildCount()  :  0;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getChildCount()  >  1?  irNode.getChildCount()  :  0;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getChildCount()  >  1?  irNode.getChildCount()  :  0;	  return    irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
613	[BUG]  [BUGGY]  return  irNode.getParent().removeChild(irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getParent().removeChild(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getParent().removeChild(irNode);	  return    irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	81	None	replace
614	[BUG]  [BUGGY]  return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode):  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode):  new  Node(Token.BLOCK,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode):  new  Node(Token.BLOCK,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
615	[BUG]  [BUGGY]  return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode):  new  Node(Token.WARNING,  irNode);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode):  new  Node(Token.WARNING,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  new  Node(Token.BLOCK,  irNode):  new  Node(Token.WARNING,  irNode);	  return(irNode!=    null)?    node    :    new    Node(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	76	None	replace
616	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  irNode.getTree();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  irNode.getTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  irNode.getTree();	  return(irNode!=    null)?    node    :    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	97	None	replace
617	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED?  irNode.getFirstChild().getNext()  :  null;  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED?  irNode.getFirstChild().getNext()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESERVED?  irNode.getFirstChild().getNext()  :  null;	  return    node.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
618	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED?  irNode.getFirstChild().getString()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED?  irNode.getFirstChild().getString()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESERVED?  irNode.getFirstChild().getString()  :  null;	  return    node.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	86	None	replace
619	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	90	None	replace
620	[BUG]  [BUGGY]  return  newBlock  ==  node?  irNode  :  newBlock;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  node?  irNode  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  node?  irNode  :  newBlock;	  return    newBlock    ==    node?    null    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	104	None	replace
621	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME,  irNode);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME,  irNode);	  return    irNode.getType()    ==    Token.NAME?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
622	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	36	None	replace
623	[BUG]  [BUGGY]  irNode.setType(Token.EMPTY  |  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.EMPTY  |  Token.VAR);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.EMPTY  |  Token.VAR);	  irNode.setType(Token.EMPTY);    	non-compiled	[CE]  <identifier>  expected	71	None	replace
624	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	40	None	replace
625	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.EXPR_RESULT;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
626	[BUG]  [BUGGY]  node.setCharno(irNode.getCharno());  [CE]  illegal  start  of  type  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  node.setCharno(irNode.getCharno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	node.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    node.setCharno(irNode.getCharno());    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
627	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
628	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FOR)  {  return  newBlock;  }  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FOR)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FOR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
629	[BUG]  [BUGGY]  return  newBlock  ==  null?  null  :  newBlock.cloneTree();  [CE]  illegal  start  of  type  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  null?  null  :  newBlock.cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  null?  null  :  newBlock.cloneTree();	  return    newBlock.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
630	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.FUNCTION;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
631	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  1;  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  1;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
632	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
633	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }	  if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
634	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }	  if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
635	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
636	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
637	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
638	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
639	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  <identifier>  expected	103	None	replace
640	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	84	None	replace
641	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.CATCH)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.CATCH)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.CATCH)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
642	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.SCRIPT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.SCRIPT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.SCRIPT)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
643	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR  ||  irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()!=    Token.VAR)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	101	None	replace
644	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.CALL?    irNode.getParent()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	38	None	replace
645	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT  ||  newBlock.getType()  ==  Token.VAR;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
646	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getNext()  :  null;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getNext()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getNext()  :  null;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
647	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getString()  :  null;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getString()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getFirstChild().getString()  :  null;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	3	None	replace
648	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getString()  :  null;  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getString()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT?  irNode.getString()  :  null;	  return    newBlock.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  	3	None	replace
649	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    	non-compiled	[CE]  	52	None	replace
650	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	52	None	replace
651	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
652	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock!=  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock!=  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  &&  newBlock!=  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
653	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.GETPROP)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	68	None	replace
654	[BUG]  [BUGGY]  maybeRemove(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeRemove(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeRemove(newBlock,  irNode);	  maybeSetLengthFrom(newBlock,    irNode);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
655	[BUG]  [BUGGY]  maybeUpdate(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeUpdate(newBlock,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeUpdate(newBlock,  irNode);	  maybeSetLengthFrom(newBlock,    irNode);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
656	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  newBlock.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  newBlock.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  newBlock.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EMPTY)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	22	None	replace
657	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getString()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getString()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getString()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	43	None	replace
658	[BUG]  [BUGGY]  return(irNode!=  null)?  irNode  :  node;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  irNode  :  node;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  irNode  :  node;	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
659	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  irNode.getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  irNode.getFirstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  irNode.getFirstChild();	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
660	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  irNode.getParent();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return(irNode!=  null)?  node  :  irNode.getParent();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  irNode.getParent();	  return(irNode!=    null)?    node    :    irNode;    	non-compiled	[CE]  <identifier>  expected	75	None	replace
661	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.FUNCTION;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
662	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  1;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
663	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getParent()!=  null;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getParent()!=  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getParent()!=  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getParent()!=    null;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
664	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  null;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getParent()!=    null;    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
665	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.GETPROP;  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
666	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.GETPROP;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getParent()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
667	[BUG]  [BUGGY]  return  newBlock  ==  null?  null  :  newBlock.irNode;  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  null?  null  :  newBlock.irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  null?  null  :  newBlock.irNode;	  return    newBlock.irNode;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
668	[BUG]  [BUGGY]  return  newBlock  ==  node?  null  :  newBlock.irNode;  [CE]  illegal  start  of  type  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  node?  null  :  newBlock.irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  node?  null  :  newBlock.irNode;	  return    newBlock.irNode;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
669	[BUG]  [BUGGY]  return  irNode.firstChild();  [CE]  illegal  start  of  type  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.firstChild();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.firstChild();	  return    irNode.removeLastChild();    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
670	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  message);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  message);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  message);	  return    irNode.getType()    ==    Token.CALL?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
671	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
672	[BUG]  [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(false);  }  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(false);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(false);  }	  irNode.setLineno(irNode.getLineno());    else    irNode.setWasEmptyNode(false);    	non-compiled	[CE]  <identifier>  expected	60	None	replace
673	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getFirstChild().getType()    ==    Token.FUNCTION;    	non-compiled	[CE]  <identifier>  expected	108	None	replace
674	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	20	None	replace
675	[BUG]  [BUGGY]  irNode.setLength(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setLength(irNode.getLineno());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLength(irNode.getLineno());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	54	None	replace
676	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()    ==    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
677	[BUG]  [BUGGY]  else  if(node.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(node.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(node.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()    ==    node)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	100	None	replace
678	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
679	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.NAME;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.NAME;    	non-compiled	[CE]  <identifier>  expected	66	None	replace
680	[BUG]  [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  newBlock);  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  newBlock);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  newBlock);  }	  irNode.setLineno(irNode.getLineno());    maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
681	[BUG]  [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);  }  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);  }	  irNode.setLineno(irNode.getLineno());    maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	56	None	replace
682	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  1;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  1;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getChildCount()    >    1;    	non-compiled	[CE]  <identifier>  expected	109	None	replace
683	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.CATCH)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	18	None	replace
684	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESERVED;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
685	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
686	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.EXPR_RESULT;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
687	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getWasEmptyNode()  ==  null;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.BLOCK  ||  irNode.getWasEmptyNode()  ==  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK  ||  irNode.getWasEmptyNode()  ==  null;	  return    irNode.getType()!=    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	39	None	replace
688	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  null;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
689	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  1  :  0;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED?  1  :  0;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED?  1  :  0;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    +    1;    	non-compiled	[CE]  <identifier>  expected	87	None	replace
690	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
691	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	12	None	replace
692	[BUG]  [BUGGY]  irNode.setType(Token.SCRIPT);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.SCRIPT);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.SCRIPT);	  irNode.setType(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	72	None	replace
693	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	63	None	replace
694	[BUG]  [BUGGY]  if(irNode  ==  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode  ==  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode  ==  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
695	[BUG]  [BUGGY]  if(irNode  ==  null)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode  ==  null)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode  ==  null)  {  return  newBlock;  }	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	49	None	replace
696	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.EXPR_RESERVED;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED    ||    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	8	None	replace
697	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getChildCount()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	98	None	replace
698	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setSourceName(irNode.getSourceName());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setSourceName(irNode.getSourceName());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  node);  irNode.setSourceName(irNode.getSourceName());	  maybeSetLengthFrom(newBlock,    node);    irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	57	None	replace
699	[BUG]  [BUGGY]  irNode.setType(Token.NAME,  Token.EXPR_RESERVED);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.NAME,  Token.EXPR_RESERVED);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.NAME,  Token.EXPR_RESERVED);	  irNode.setType(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
700	[BUG]  [BUGGY]  irNode.setType(Token.NAME,  Token.VAR);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.NAME,  Token.VAR);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.NAME,  Token.VAR);	  irNode.setType(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	74	None	replace
701	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  node;  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  node;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  node;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	23	None	replace
702	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
703	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
704	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.VAR;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.VAR;    	non-compiled	[CE]  <identifier>  expected	102	None	replace
705	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.VAR);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.VAR);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.OBJECTLIT  |  Token.VAR);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	70	None	replace
706	[BUG]  [BUGGY]  return  irNode.getTarget();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getTarget();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getTarget();	  return    irNode.getTree();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
707	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.FUNCTION;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.FUNCTION;	  return    newBlock.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
708	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  null;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  null;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESERVED?  irNode.getString()  :  null;	  return    newBlock.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
709	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESERVED  ||  newBlock.getType()  ==  Token.EMPTY;	  return    newBlock.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
710	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  newBlock.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  newBlock.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  newBlock.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	21	None	replace
711	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.EXPR_RESULT;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	62	None	replace
712	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode);	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isFunction(irNode);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
713	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isVar(irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isVar(irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isVar(irNode);	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    NodeUtil.isFunction(irNode);    	non-compiled	[CE]  <identifier>  expected	80	None	replace
714	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getWeaveEmptyNode();  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getWeaveEmptyNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getWeaveEmptyNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
715	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getImmediateParentNode();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getImmediateParentNode();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getImmediateParentNode();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
716	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getHeight();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getHeight();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getHeight();	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getWasEmptyNode();    	non-compiled	[CE]  <identifier>  expected	83	None	replace
717	[BUG]  [BUGGY]  return  newBlock  ==  null  ||  newBlock!=  irNode?  this  :  newBlock;  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  null  ||  newBlock!=  irNode?  this  :  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  null  ||  newBlock!=  irNode?  this  :  newBlock;	  return    newBlock    ==    null?    this    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
718	[BUG]  [BUGGY]  return  newBlock  ==  null?  this  :  newBlock.irNode;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  newBlock  ==  null?  this  :  newBlock.irNode;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  null?  this  :  newBlock.irNode;	  return    newBlock    ==    null?    this    :    newBlock;    	non-compiled	[CE]  <identifier>  expected	106	None	replace
719	[BUG]  [BUGGY]  maybeReplaceChild(irNode,  irNode);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  maybeReplaceChild(irNode,  irNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeReplaceChild(irNode,  irNode);	  maybeSetLengthFrom(newBlock,    node);    	non-compiled	[CE]  <identifier>  expected	58	None	replace
720	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getString()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getString()  ==  Token.EMPTY;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getString()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.EMPTY;    	non-compiled	[CE]  <identifier>  expected	44	None	replace
721	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()!=  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME);	  return    irNode.getType()    ==    Token.NAME?    irNode.getNext()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
722	[BUG]  [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  }  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  }	  irNode.setLineno(irNode.getLineno());    newBlock.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
723	[BUG]  [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  }  else  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  }  else  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getLineno()!=  null)  {  irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  }  else  {  return  newBlock;  }	  irNode.setLineno(irNode.getLineno());    newBlock.setCharno(irNode.getCharno());    	non-compiled	[CE]  <identifier>  expected	55	None	replace
724	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.BLOCK)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	99	None	replace
725	[BUG]  [BUGGY]  else  if(irNode.getType()  >=  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  >=  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  >=  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
726	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getChildCount()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
727	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.BLOCK;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getParent()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT    ||    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	65	None	replace
728	[BUG]  [BUGGY]  irNode.setType(Token.VAR,  Node.newString(Token.NAME));  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode.setType(Token.VAR,  Node.newString(Token.NAME));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.VAR,  Node.newString(Token.NAME));	  irNode.setType(Token.VAR);    	non-compiled	[CE]  <identifier>  expected	73	None	replace
729	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	50	None	replace
730	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  null;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  null;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  null;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
731	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  newBlock.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  newBlock.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  newBlock.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR    ||    irNode.getType()!=    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	48	None	replace
732	[BUG]  [BUGGY]  irNode  =  newBlock;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  irNode  =  newBlock;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode  =  newBlock;	  if(irNode!=    null)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	53	None	replace
733	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  name);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }      [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  name);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME,  name);	  return    irNode.getType()    ==    Token.NAME?    irNode.getFirstChild()    :    Node.newString(Token.NAME);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
