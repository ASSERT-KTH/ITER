bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  newBlock.cloneTree();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.cloneTree();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.cloneTree();	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
2	[BUG]  [BUGGY]  return  newBlock.irNode;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.irNode;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.irNode;	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
3	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESULT;	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
4	[BUG]  [BUGGY]  return  newBlock.getParent();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.getParent();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getParent();	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
5	[BUG]  [BUGGY]  return  newBlock.getNext();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.getNext();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getNext();	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
6	[BUG]  [BUGGY]  return  newBlock.clone();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.clone();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.clone();	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
7	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESERVED;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
8	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
9	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
10	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
11	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
12	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.BLOCK;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
13	[BUG]  [BUGGY]  return  irNode.getTree();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getTree();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getTree();	  return    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
14	[BUG]  [BUGGY]  return  irNode.clone();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.clone();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.clone();	  return    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
15	[BUG]  [BUGGY]  return  node.cloneTree();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  node.cloneTree();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.cloneTree();	  return    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
16	[BUG]  [BUGGY]  return  irNode.cloneTree(newBlock);  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.cloneTree(newBlock);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.cloneTree(newBlock);	  return    irNode.cloneTree();    	non-compiled	[CE]  <identifier>  expected	2	None	replace
17	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
18	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
19	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
20	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
21	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
22	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
23	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
24	[BUG]  [BUGGY]  return  irNode.getLastChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getLastChild();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getLastChild();	  return    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
25	[BUG]  [BUGGY]  return  newBlock.getFirstChild();  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.getFirstChild();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getFirstChild();	  return    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
26	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getFirstChild()  :  Node.newString(Token.NAME);	  return    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
27	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  node.getLastChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  node.getLastChild();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getLastChild()  :  node.getLastChild();	  return    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
28	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getFirstChild()  :  Node.newString(Token.NAME);	  return    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
29	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getFirstChild();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getFirstChild();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK?  null  :  irNode.getFirstChild();	  return    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
30	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
31	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
32	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
33	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  irNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  maybeSetLengthFrom(newBlock,  irNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  irNode);	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
34	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
35	[BUG]  [BUGGY]  return  irNode.getNext();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getNext();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getNext();	  return    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
36	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getParent()  :  Node.newString(Token.NAME);	  return    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
37	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.NAME?  irNode.getNext()  :  Node.newString(Token.NAME);	  return    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
38	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.CALL?  irNode.getParent()  :  Node.newString(Token.NAME);	  return    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
39	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.BLOCK;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()!=  Token.BLOCK;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.BLOCK;	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
40	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
41	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
42	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING;	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
43	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
44	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
45	[BUG]  [BUGGY]  return  irNode.removeLastChild();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.removeLastChild();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.removeLastChild();	  return    irNode.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
46	[BUG]  [BUGGY]  return  newBlock.removeFirstChild();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.removeFirstChild();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.removeFirstChild();	  return    irNode.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
47	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
48	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
49	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  return  newBlock;  }	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
50	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
51	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
52	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode.getType()  ==  Token.VAR)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.NAME)  {  return  newBlock;  }	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
53	[BUG]  [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	if(irNode!=  null)  {  return  newBlock;  }  else  if(irNode.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
54	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setLineno(irNode.getLineno());  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
55	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
56	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());  maybeSetLengthFrom(newBlock,  node);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
57	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setLineno(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  maybeSetLengthFrom(newBlock,  node);  irNode.setLineno(irNode.getLineno());  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  node);  irNode.setLineno(irNode.getLineno());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
58	[BUG]  [BUGGY]  maybeSetLengthFrom(newBlock,  node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  maybeSetLengthFrom(newBlock,  node);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	maybeSetLengthFrom(newBlock,  node);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
59	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());  node.setCharno(irNode.getCharno());	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
60	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(false);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(false);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setLineno(irNode.getLineno());  else  irNode.setWasEmptyNode(false);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
61	[BUG]  [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()!=  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()!=  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
62	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EXPR_RESULT;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
63	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
64	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
65	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK;  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
66	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME;  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
67	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
68	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
69	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
70	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setType(Token.OBJECTLIT);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.OBJECTLIT);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
71	[BUG]  [BUGGY]  irNode.setType(Token.EMPTY);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setType(Token.EMPTY);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.EMPTY);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
72	[BUG]  [BUGGY]  irNode.setType(Token.BLOCK);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setType(Token.BLOCK);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.BLOCK);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
73	[BUG]  [BUGGY]  irNode.setType(Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setType(Token.VAR);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.VAR);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
74	[BUG]  [BUGGY]  irNode.setType(Token.NAME);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  irNode.setType(Token.NAME);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	irNode.setType(Token.NAME);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
75	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  irNode;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return(irNode!=  null)?  node  :  irNode;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  irNode;	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
76	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.BLOCK,  irNode);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.BLOCK,  irNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  new  Node(Token.BLOCK,  irNode);	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
77	[BUG]  [BUGGY]  return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.BLOCK?  newNode  :  Node.newString(Token.NAME);	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
78	[BUG]  [BUGGY]  return(irNode!=  null)?  newBlock  :  node;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return(irNode!=  null)?  newBlock  :  node;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  newBlock  :  node;	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
79	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  +  1;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  +  1;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
80	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode);	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
81	[BUG]  [BUGGY]  return  irNode.removeChild(irNode);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.removeChild(irNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.removeChild(irNode);	  return    irNode.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
82	[BUG]  [BUGGY]  return  node.removeFirstChild();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  node.removeFirstChild();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.removeFirstChild();	  return    irNode.removeFirstChild();    	non-compiled	[CE]  <identifier>  expected	14	None	replace
83	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getWasEmptyNode();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getWasEmptyNode();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getWasEmptyNode();	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
84	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
85	[BUG]  [BUGGY]  return  node.getParent();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  node.getParent();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getParent();	  return    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	13	None	replace
86	[BUG]  [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  node.getType()  ==  Token.EXPR_RESERVED;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getType()  ==  Token.EXPR_RESERVED;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
87	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  +  1;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  +  1;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  +  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
88	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.EMPTY)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
89	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
90	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.FUNCTION)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.FUNCTION)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	7	None	replace
91	[BUG]  [BUGGY]  return  newBlock.getParentNode();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.getParentNode();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getParentNode();	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
92	[BUG]  [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock.getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock.getType()  ==  Token.FUNCTION;	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
93	[BUG]  [BUGGY]  return  node.getFirstChild();  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  node.getFirstChild();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  node.getFirstChild();	  return    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	12	None	replace
94	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.CALL)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
95	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  new  AstNode(irNode,  irNode);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return(irNode!=  null)?  node  :  new  AstNode(irNode,  irNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  new  AstNode(irNode,  irNode);	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
96	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.NAME,  irNode);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return(irNode!=  null)?  node  :  new  Node(Token.NAME,  irNode);  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  new  Node(Token.NAME,  irNode);	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
97	[BUG]  [BUGGY]  return(irNode!=  null)?  node  :  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return(irNode!=  null)?  node  :  irNode.cloneTree();  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return(irNode!=  null)?  node  :  irNode.cloneTree();	  return    node;    	non-compiled	[CE]  <identifier>  expected	9	None	replace
98	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.BLOCK;    	non-compiled	[CE]  <identifier>  expected	11	None	replace
99	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.BLOCK)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
100	[BUG]  [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.NAME)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	3	None	replace
101	[BUG]  [BUGGY]  else  if(irNode.getType()!=  Token.VAR)  {  return  newBlock;  }  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  else  if(irNode.getType()!=  Token.VAR)  {  return  newBlock;  }  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	else  if(irNode.getType()!=  Token.VAR)  {  return  newBlock;  }	  else    if(irNode.getType()    ==    Token.VAR)    {    return    newBlock;    }    else    if(irNode.getType()    ==    Token.EXPR_RESULT)    {    return    newBlock;    }    	non-compiled	[CE]  <identifier>  expected	4	None	replace
102	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR;  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
103	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP;  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP;	  return    irNode.getType()    ==    Token.EXPR_RESULT;    	non-compiled	[CE]  <identifier>  expected	5	None	replace
104	[BUG]  [BUGGY]  return  newBlock  ==  node?  null  :  newBlock;  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock  ==  node?  null  :  newBlock;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  node?  null  :  newBlock;	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
105	[BUG]  [BUGGY]  return  newBlock!=  null?  this  :  newBlock;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock!=  null?  this  :  newBlock;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock!=  null?  this  :  newBlock;	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
106	[BUG]  [BUGGY]  return  newBlock  ==  null?  this  :  newBlock;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  newBlock  ==  null?  this  :  newBlock;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  newBlock  ==  null?  this  :  newBlock;	  return    newBlock;    	non-compiled	[CE]  <identifier>  expected	1	None	replace
107	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()!=  null;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()!=  null;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getParent()!=  null;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
108	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
109	[BUG]  [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  1;  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  }    [BUGGY]  return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  1;  [BUGGY]    }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	224	224	1	replace	return  irNode.getType()  ==  Token.EXPR_RESERVED  ||  irNode.getChildCount()  >  1;	  return    irNode.getType()    ==    Token.EXPR_RESERVED;    	non-compiled	[CE]  <identifier>  expected	10	None	replace
