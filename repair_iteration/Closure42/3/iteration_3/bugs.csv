bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child3);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child3);	  return    new    Node(type,    child2,    child3).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	18	None	replace
2	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(child1);	  return    new    Node(type,    child2,    child3).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	18	None	replace
3	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(child1);	  return    new    Node(type,    child2,    child3).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	18	None	replace
4	[BUG]  [BUGGY]  newNode(type,  child1,  child2,  child3).clonePropsFrom(child1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(type,  child1,  child2,  child3).clonePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(type,  child1,  child2,  child3).clonePropsFrom(child1);	  return    new    Node(type,    child2,    child3).clonePropsFrom(child1);    	non-compiled	[CE]  ')'  expected	18	None	replace
5	[BUG]  [BUGGY]  return  Node.newNumber(type,  child1,  child2,  child3);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  Node.newNumber(type,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  Node.newNumber(type,  child1,  child2,  child3);	  return    Node.newString(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	12	None	replace
6	[BUG]  [BUGGY]  return  Node.newNode(type,  child1,  child2,  child3);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  Node.newNode(type,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  Node.newNode(type,  child1,  child2,  child3);	  return    Node.newString(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	12	None	replace
7	[BUG]  [BUGGY]  return  Node.newString(type,  child1,  child2,  child3,  0);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  Node.newString(type,  child1,  child2,  child3,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  Node.newString(type,  child1,  child2,  child3,  0);	  return    Node.newString(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	12	None	replace
8	[BUG]  [BUGGY]  return  Node.newBlock(type,  child1,  child2,  child3);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  Node.newBlock(type,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  Node.newBlock(type,  child1,  child2,  child3);	  return    Node.newString(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	12	None	replace
9	[BUG]  [BUGGY]  return  Node.newString(type,  child2,  child1);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  Node.newString(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  Node.newString(type,  child2,  child1);	  return    Node.newString(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	12	None	replace
10	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(child3);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(child3);	  return    new    Node(type,    child2,    child3).clonePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	33	None	replace
11	[BUG]  [BUGGY]  newNode(type,  child1,  child2,  child3).clonePropsFrom(child3);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(type,  child1,  child2,  child3).clonePropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(type,  child1,  child2,  child3).clonePropsFrom(child3);	  return    new    Node(type,    child2,    child3).clonePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	33	None	replace
12	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child3).clonePropsFrom(child1,  child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child2,  child3).clonePropsFrom(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child2,  child3).clonePropsFrom(child1,  child2);	  return    new    Node(type,    child2,    child3).clonePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	33	None	replace
13	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).addPropsFrom(child3);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).addPropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).addPropsFrom(child3);	  return    new    Node(type,    child1,    child2,    child3).removePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	32	None	replace
14	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).getPropsFrom(child3);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).getPropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).getPropsFrom(child3);	  return    new    Node(type,    child1,    child2,    child3).removePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	32	None	replace
15	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).removePropsFrom(child1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).removePropsFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).removePropsFrom(child1);	  return    new    Node(type,    child1,    child2,    child3).removePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	32	None	replace
16	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).removePropsFrom(child2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).removePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).removePropsFrom(child2);	  return    new    Node(type,    child1,    child2,    child3).removePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	32	None	replace
17	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).cloneTree();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).cloneTree();  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).cloneTree();	  return    new    Node(type,    child1,    child2,    child3).removePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	32	None	replace
18	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child3,  parent);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child3,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child3,  parent);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    child1);    	non-compiled	[CE]  ')'  expected	4	None	replace
19	[BUG]  [BUGGY]  return  new  Node(child2,  child3).clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child2,  child3).clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child2,  child3).clonePropsFrom(type,  child1);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    child1);    	non-compiled	[CE]  ')'  expected	4	None	replace
20	[BUG]  [BUGGY]  return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  child1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  child1);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    child1);    	non-compiled	[CE]  ')'  expected	4	None	replace
21	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child3,  false);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child3,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child3,  false);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    child1);    	non-compiled	[CE]  ')'  expected	4	None	replace
22	[BUG]  [BUGGY]  newNode(type,  child1,  child2,  child3).clonePropsFrom(newNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(type,  child1,  child2,  child3).clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(type,  child1,  child2,  child3).clonePropsFrom(newNode);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	27	None	replace
23	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(child3);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(child3);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(newNode);    	non-compiled	[CE]  ')'  expected	27	None	replace
24	[BUG]  [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2).clonePropsFrom(type);	  return    new    Node(child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	21	None	replace
25	[BUG]  [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2.clonePropsFrom(type));	  return    new    Node(child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	21	None	replace
26	[BUG]  [BUGGY]  return  new  Node(child1,  child3).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child3).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child3).clonePropsFrom(type);	  return    new    Node(child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	21	None	replace
27	[BUG]  [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2.clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2.clonePropsFrom(type);	  return    new    Node(child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	21	None	replace
28	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  child3,  parent);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(type,  child1,  child2,  child3,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(type,  child1,  child2,  child3,  parent);	  return    newNode(type,    child1,    child2,    child3,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
29	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  child3,  0);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(type,  child1,  child2,  child3,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(type,  child1,  child2,  child3,  0);	  return    newNode(type,    child1,    child2,    child3,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
30	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  child3,  node);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(type,  child1,  child2,  child3,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(type,  child1,  child2,  child3,  node);	  return    newNode(type,    child1,    child2,    child3,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
31	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  child3,  c);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(type,  child1,  child2,  child3,  c);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(type,  child1,  child2,  child3,  c);	  return    newNode(type,    child1,    child2,    child3,    null);    	non-compiled	[CE]  ')'  expected	13	None	replace
32	[BUG]  [BUGGY]  return  new  Node(child2,  child1).clonePropsFrom(type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child2,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child2,  child1).clonePropsFrom(type);	  return    new    Node(child3,    child1).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	31	None	replace
33	[BUG]  [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child1).clonePropsFrom(type);	  return    new    Node(child3,    child1).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	31	None	replace
34	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child3);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1).clonePropsFrom(child3);	  return    new    Node(child3,    child1).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	31	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1),  child2,  child3);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1),  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1),  child2,  child3);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    child2,    child3);    	non-compiled	[CE]  ')'  expected	23	None	replace
36	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2,  child3));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2,  child3));	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    child2,    child3);    	non-compiled	[CE]  ')'  expected	23	None	replace
37	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1),  child3,  child3);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1),  child3,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1),  child3,  child3);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    child2,    child3);    	non-compiled	[CE]  ')'  expected	23	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  errorReporter);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  errorReporter);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    child2,    child3);    	non-compiled	[CE]  ')'  expected	23	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  child3;  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  child3;  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  child3;	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    child2,    child3);    	non-compiled	[CE]  ')'  expected	23	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  child3);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  child3);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    child2,    child3);    	non-compiled	[CE]  ')'  expected	23	None	replace
41	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child3);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    child1);    	non-compiled	[CE]  ')'  expected	19	None	replace
42	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child2);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    child1);    	non-compiled	[CE]  ')'  expected	19	None	replace
43	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  child3);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    child1);    	non-compiled	[CE]  ')'  expected	19	None	replace
44	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child4);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child4);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  child4);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    child1);    	non-compiled	[CE]  ')'  expected	19	None	replace
45	[BUG]  [BUGGY]  NodeUtil.newNode(type,  child1,  child2,  child3);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeUtil.newNode(type,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeUtil.newNode(type,  child1,  child2,  child3);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	11	None	replace
46	[BUG]  [BUGGY]  Node  newNode  =  NodeUtil.newNode(type,  child1,  child2,  child3);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Node  newNode  =  NodeUtil.newNode(type,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Node  newNode  =  NodeUtil.newNode(type,  child1,  child2,  child3);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	11	None	replace
47	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child2,  child1);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  NodeUtil.newNode(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  NodeUtil.newNode(type,  child2,  child1);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	11	None	replace
48	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2,  child3,  null);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2,  child3,  null);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  NodeUtil.newNode(type,  child1,  child2,  child3,  null);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	11	None	replace
49	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2,  child3,  config);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  NodeUtil.newNode(type,  child1,  child2,  child3,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  NodeUtil.newNode(type,  child1,  child2,  child3,  config);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	11	None	replace
50	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(child3,  type);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(child3,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(child3,  type);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    parent);    	non-compiled	[CE]  ')'  expected	16	None	replace
51	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  parent);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    parent);    	non-compiled	[CE]  ')'  expected	16	None	replace
52	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent,  child3);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    parent);    	non-compiled	[CE]  ')'  expected	16	None	replace
53	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent,  child1);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent,  child1);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    parent);    	non-compiled	[CE]  ')'  expected	16	None	replace
54	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(child3,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(child3,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(child3,  parent);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    parent);    	non-compiled	[CE]  ')'  expected	16	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  newNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1,  child2),  newNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1,  child2),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1,  child2),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child3),  newNode);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child3),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child2,  child3),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  child3);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  child3);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  this);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  this);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  node);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  node);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
61	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  child3);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  child3);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  ')'  expected	22	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  errorReporter);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  errorReporter);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  errorReporter);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child3));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child3));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  false);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  false);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  config);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  config);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  this);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  this);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  this);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  node);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child1,  child2,  child3),  node);	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()!=  Token.NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()!=  Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()!=  Token.NAME);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	29	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(child2.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child2.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child2.getType()  ==  Token.NAME);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	29	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	29	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(child3.getType()  ==  Token.NAME);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child3.getType()  ==  Token.NAME);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child3.getType()  ==  Token.NAME);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	29	None	replace
72	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.GETPROP);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.GETPROP);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.GETPROP);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	29	None	replace
73	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2.getType()  ==  Token.FUNCTION);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2.getType()  ==  Token.FUNCTION);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ')'  expected	29	None	replace
74	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type,  child3);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type,  child3);	  return    new    Node(newNode,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	20	None	replace
75	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type,  type);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type,  type);	  return    new    Node(newNode,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
76	[BUG]  [BUGGY]  return  new  Node(node,  child1,  child2,  child3).clonePropsFrom(type);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(node,  child1,  child2,  child3).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(node,  child1,  child2,  child3).clonePropsFrom(type);	  return    new    Node(newNode,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
77	[BUG]  [BUGGY]  return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  child3);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  child3);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    child3);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
78	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child2);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  child2);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    child3);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
79	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child1);	  return    new    Node(type,    child1,    child2,    child3).clonePathFrom(child3);    	non-compiled	[CE]  ';'  expected	17	None	replace
80	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child2);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child2);	  return    new    Node(type,    child1,    child2,    child3).clonePathFrom(child3);    	non-compiled	[CE]  ';'  expected	17	None	replace
81	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePathFrom(child3);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePathFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePathFrom(child3);	  return    new    Node(type,    child1,    child2,    child3).clonePathFrom(child3);    	non-compiled	[CE]  ';'  expected	17	None	replace
82	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(type,  child3);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(type,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(type,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ';'  expected	30	None	replace
83	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child1,  child3);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child1,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child1,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
84	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  parent);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  parent);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
85	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child3).clonePropsFrom(parent,  child3);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child2,  child3).clonePropsFrom(parent,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child2,  child3).clonePropsFrom(parent,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
86	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  config);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  config);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
87	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  newNode);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child4,  newNode);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    newNode);    	non-compiled	[CE]  ';'  expected	14	None	replace
88	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(newNode,  child3);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(newNode,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(newNode,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    newNode);    	non-compiled	[CE]  ';'  expected	14	None	replace
89	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  newNode);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  newNode);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    newNode);    	non-compiled	[CE]  ';'  expected	14	None	replace
90	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2).clonePropsFrom(newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2).clonePropsFrom(newNode);	  return    new    Node(type,    child2,    child3).clonePropsFrom(newNode);    	non-compiled	[CE]  ';'  expected	26	None	replace
91	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  parent,  false);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  parent,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  parent,  false);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ';'  expected	5	None	replace
92	[BUG]  [BUGGY]  return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  parent);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  parent);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ';'  expected	5	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type),  child1,  child2,  child3);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type),  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child3,  newNode(type),  child1,  child2,  child3);	  NodeTraversal.traverse(compiler,    newNode(type),    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	24	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type),  child1,  child2,  child3);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type),  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child2,  newNode(type),  child1,  child2,  child3);	  NodeTraversal.traverse(compiler,    newNode(type),    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	24	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  child2,  child3);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type),  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type),  child2,  child3);	  NodeTraversal.traverse(compiler,    newNode(type),    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	24	None	replace
96	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child4,  newNode(type),  child1,  child2,  child3);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child4,  newNode(type),  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child4,  newNode(type),  child1,  child2,  child3);	  NodeTraversal.traverse(compiler,    newNode(type),    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	24	None	replace
97	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child));  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child));	  return    new    Node(type,    child1,    child2,    child3).clonePathFrom(child);    	non-compiled	[CE]  ';'  expected	1	None	replace
98	[BUG]  [BUGGY]  return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  type);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child3,  child1,  child2,  child3).clonePropsFrom(type,  type);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    type);    	non-compiled	[CE]  ')'  expected	3	None	replace
99	[BUG]  [BUGGY]  return  newNode(type,  child2,  child3);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(type,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(type,  child2,  child3);	  return    newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	7	None	replace
100	[BUG]  [BUGGY]  return  newNode(child1,  child2,  child3);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(child1,  child2,  child3);	  return    newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	7	None	replace
101	[BUG]  [BUGGY]  newNode(type,  child2,  child3);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(type,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(type,  child2,  child3);	  newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	8	None	replace
102	[BUG]  [BUGGY]  Node  newNode(type,  child1,  child2,  child3);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Node  newNode(type,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Node  newNode(type,  child1,  child2,  child3);	  newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	8	None	replace
103	[BUG]  [BUGGY]  newNode(child1,  child2,  child3);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(child1,  child2,  child3);	  newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	8	None	replace
104	[BUG]  [BUGGY]  newNode(type,  child1,  child2,  child3,  0);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(type,  child1,  child2,  child3,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(type,  child1,  child2,  child3,  0);	  newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	8	None	replace
105	[BUG]  [BUGGY]  newNode(type,  child1,  child2,  child3,  false);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(type,  child1,  child2,  child3,  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(type,  child1,  child2,  child3,  false);	  newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	8	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  config);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  config);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  config);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ';'  expected	10	None	replace
107	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1,  child2,  child3));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1,  child2,  child3));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ';'  expected	10	None	replace
108	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  false);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  false);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3),  false);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ';'  expected	10	None	replace
109	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child3,  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
110	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1));  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child2,  newNode(type,  child1));	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
111	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
112	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  child3,  newNode);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  child3,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  child3,  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
113	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2),  child3);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2),  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child2),  child3);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
114	[BUG]  [BUGGY]  return  new  Node(child3,  child2,  child3).clonePropsFrom(type);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child3,  child2,  child3).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child3,  child2,  child3).clonePropsFrom(type);	  return    new    Node(child3,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ';'  expected	6	None	replace
115	[BUG]  [BUGGY]  return  new  Node(child,  child1,  child2,  child3).clonePropsFrom(type);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child,  child1,  child2,  child3).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child,  child1,  child2,  child3).clonePropsFrom(type);	  return    new    Node(child3,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ';'  expected	6	None	replace
116	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child3).clonePathFrom(child1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child2,  child3).clonePathFrom(child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child2,  child3).clonePathFrom(child1);	  return    new    Node(type,    child1,    child2,    child3).clonePathFrom(child3);    	non-compiled	[CE]  ';'  expected	17	None	replace
117	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child4);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child4);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePathFrom(child4);	  return    new    Node(type,    child1,    child2,    child3).clonePathFrom(child3);    	non-compiled	[CE]  ';'  expected	17	None	replace
118	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(newNode,  type);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(newNode,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(newNode,  type);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(newNode);    	non-compiled	[CE]  ';'  expected	27	None	replace
119	[BUG]  [BUGGY]  return  newNode(type,  child1  +  child2,  child3);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(type,  child1  +  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(type,  child1  +  child2,  child3);	  return    newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	7	None	replace
120	[BUG]  [BUGGY]  return  newNode(type,  child2,  child1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(type,  child2,  child1);	  return    newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	7	None	replace
121	[BUG]  [BUGGY]  return  newNode(parent,  child1,  child2,  child3);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(parent,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(parent,  child1,  child2,  child3);	  return    newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	7	None	replace
122	[BUG]  [BUGGY]  return  new  Node(child3,  child1).clonePropsFrom(type,  child2);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child3,  child1).clonePropsFrom(type,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child3,  child1).clonePropsFrom(type,  child2);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    type);    	non-compiled	[CE]  ';'  expected	3	None	replace
123	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(parent,  child3);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(parent,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(parent,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
124	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(parent,  child3);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(parent,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(parent,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
125	[BUG]  [BUGGY]  return  new  Node(type,  child1  +  child2,  child3).clonePropsFrom(parent,  child3);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1  +  child2,  child3).clonePropsFrom(parent,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1  +  child2,  child3).clonePropsFrom(parent,  child3);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
126	[BUG]  [BUGGY]  return  NodeUtil.newNode(child1,  child2,  child3);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  NodeUtil.newNode(child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  NodeUtil.newNode(child1,  child2,  child3);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	11	None	replace
127	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child2,  child3);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  NodeUtil.newNode(type,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  NodeUtil.newNode(type,  child2,  child3);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	11	None	replace
128	[BUG]  [BUGGY]  return  NodeUtil.newNode(parent,  child1,  child2,  child3);  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  NodeUtil.newNode(parent,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  NodeUtil.newNode(parent,  child1,  child2,  child3);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	11	None	replace
129	[BUG]  [BUGGY]  return  NodeUtil.newNode(type,  child3,  child1);  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  NodeUtil.newNode(type,  child3,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  NodeUtil.newNode(type,  child3,  child1);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	11	None	replace
130	[BUG]  [BUGGY]  return  new  Node(newNode,  child1).clonePropsFrom(type);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(newNode,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(newNode,  child1).clonePropsFrom(type);	  return    new    Node(child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ';'  expected	21	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2),  newNode);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  child2),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child2,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child2,  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child2,  child3),  newNode);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child2,  child3),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(child2,  child3),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  type),  newNode);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  type),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  type),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ';'  expected	28	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2.getType());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2.getType());  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2.getType());	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	29	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME,  child2);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	29	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.VAR);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.VAR);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.VAR);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  ';'  expected	29	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3));  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ';'  expected	10	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child3));  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child2,  child3));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ';'  expected	10	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2,  child3));  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2,  child3));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ';'  expected	10	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1));  [CE]  ';'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child2,  child1));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ';'  expected	10	None	replace
142	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child3,  child1));  [CE]  ';'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child3,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child3,  child1));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ';'  expected	10	None	replace
143	[BUG]  [BUGGY]  newNode(type,  child1  +  child2,  child3);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(type,  child1  +  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(type,  child1  +  child2,  child3);	  newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	8	None	replace
144	[BUG]  [BUGGY]  newNode(type,  child2,  child1);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  newNode(type,  child2,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	newNode(type,  child2,  child1);	  newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	8	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3),  newNode);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  ';'  expected	22	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2),  newNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(parent,  child1,  child2),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
147	[BUG]  [BUGGY]  return  new  Node(child3,  child2).clonePropsFrom(type);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child3,  child2).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child3,  child2).clonePropsFrom(type);	  return    new    Node(child3,    child1).clonePropsFrom(type);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
148	[BUG]  [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1).clonePropsFrom(child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1).clonePropsFrom(child2);	  return    new    Node(child3,    child1).clonePropsFrom(type);    	non-compiled	[CE]  <identifier>  expected	31	None	replace
149	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type));  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(type));	  return    new    Node(newNode,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2,  child3);	  NodeTraversal.traverse(compiler,    newNode(type),    child1,    child2,    child3);    	non-compiled	[CE]  ';'  expected	24	None	replace
151	[BUG]  [BUGGY]  return  Node.newString(type,  child2,  child3);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  Node.newString(type,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  Node.newString(type,  child2,  child3);	  return    Node.newString(type,    child1,    child2,    child3);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
152	[BUG]  [BUGGY]  return  Node.newString(type,  child1,  child2);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  Node.newString(type,  child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  Node.newString(type,  child1,  child2);	  return    Node.newString(type,    child1,    child2,    child3);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
153	[BUG]  [BUGGY]  return  Node.newString(child1,  child2,  child3);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  Node.newString(child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  Node.newString(child1,  child2,  child3);	  return    Node.newString(type,    child1,    child2,    child3);    	non-compiled	[CE]  <identifier>  expected	12	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2,  child3));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(child1,  child2,  child3));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  child1,  child2,  child3));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  child1,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(parent,  child1,  child2,  child3));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
156	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child3,  child1,  child2,  child3));  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(child3,  child1,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(child3,  child1,  child2,  child3));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
157	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child1));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child2,  child1));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
158	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child3,  child1));  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child3,  child1));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformDispatcher(type,  child3,  child1));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
159	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(child3,  type);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(child3,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(newNode,  child1,  child2,  child3).clonePropsFrom(child3,  type);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    newNode);    	non-compiled	[CE]  	14	None	replace
160	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(child3,  newNode);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(child3,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(child3,  newNode);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    newNode);    	non-compiled	[CE]  	14	None	replace
161	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  newNode));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  newNode));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  newNode));	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    newNode);    	non-compiled	[CE]  	14	None	replace
162	[BUG]  [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  sourceFile);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  sourceFile);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child1,  child2,  child3).clonePropsFrom(type,  sourceFile);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    parent);    	non-compiled	[CE]  	5	None	replace
163	[BUG]  [BUGGY]  return  new  Node(child2,  child3).clonePropsFrom(type,  parent);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child2,  child3).clonePropsFrom(type,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child2,  child3).clonePropsFrom(type,  parent);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    parent);    	non-compiled	[CE]  	5	None	replace
164	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(type,  child3);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(type,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(type,  child3);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    parent);    	non-compiled	[CE]  	5	None	replace
165	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  0);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  0);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  0);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    child1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
166	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent));	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    parent);    	non-compiled	[CE]  ';'  expected	16	None	replace
167	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(child3,  parent);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(child3,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(child3,  parent);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    parent);    	non-compiled	[CE]  ';'  expected	16	None	replace
168	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3),  type);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3),  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(child1,  child2,  child3),  type);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    child2,    child3);    	non-compiled	[CE]  ';'  expected	23	None	replace
169	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  child3,  node);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  child3,  node);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type,  child2),  child3,  node);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    child2,    child3);    	non-compiled	[CE]  ';'  expected	23	None	replace
170	[BUG]  [BUGGY]  return  new  Node(child3,  child1).clonePropsFrom(type,  child3);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child3,  child1).clonePropsFrom(type,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child3,  child1).clonePropsFrom(type,  child3);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    child3);    	non-compiled	[CE]  ';'  expected	2	None	replace
171	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).addChildToBack(child3);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).addChildToBack(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).addChildToBack(child3);	  return    new    Node(type,    child1,    child2,    child3).removePropsFrom(child3);    	non-compiled	[CE]  <identifier>  expected	32	None	replace
172	[BUG]  [BUGGY]  return  new  Node(child2,  child3,  child1).clonePropsFrom(type);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child2,  child3,  child1).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child2,  child3,  child1).clonePropsFrom(type);	  return    new    Node(child3,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
173	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(newNode,  child3));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(newNode,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(newNode,  child3));	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    newNode);    	non-compiled	[CE]  ';'  expected	14	None	replace
174	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.TRY);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.TRY);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.TRY);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
175	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.CATCH);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.CATCH);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.CATCH);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
176	[BUG]  [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.SCRIPT);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.SCRIPT);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	Preconditions.checkState(child1.getType()  ==  Token.NAME  ||  child2.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(child1.getType()    ==    Token.NAME);    	non-compiled	[CE]  <identifier>  expected	29	None	replace
177	[BUG]  [BUGGY]  return  new  Node(child2,  child3).clonePropsFrom(type,  type);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child2,  child3).clonePropsFrom(type,  type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child2,  child3).clonePropsFrom(type,  type);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    type);    	non-compiled	[CE]  <identifier>  expected	3	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1),  newNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child3,  newNode(type,  child1),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  <identifier>  expected	28	None	replace
179	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  newNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode,  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1),    newNode);    	non-compiled	[CE]  ')'  expected	28	None	replace
180	[BUG]  [BUGGY]  return  new  Node(child2,  child1,  child2,  child3).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child2,  child1,  child2,  child3).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child2,  child1,  child2,  child3).clonePropsFrom(type);	  return    new    Node(child3,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	6	None	replace
181	[BUG]  [BUGGY]  return  new  Node(child2,  child3,  child3).clonePropsFrom(type);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(child2,  child3,  child3).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(child2,  child3,  child3).clonePropsFrom(type);	  return    new    Node(child3,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ')'  expected	6	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  child2,  child3));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1),  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1),  child2,  child3));	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	10	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  child3,  newNode);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  child3,  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child1,  child2),  child3,  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child3,  child2),  newNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  newNode(type,  child3,  child2),  newNode);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  newNode(type,  child3,  child2),  newNode);	  NodeTraversal.traverse(compiler,    newNode(type,    child1,    child2),    newNode);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
185	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child3).clonePropsFrom(child3,  child1);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child2,  child3).clonePropsFrom(child3,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child2,  child3).clonePropsFrom(child3,  child1);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    child1);    	non-compiled	[CE]  <identifier>  expected	19	None	replace
186	[BUG]  [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).removePropsFrom(type);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(newNode,  child1,  child2,  child3).removePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(newNode,  child1,  child2,  child3).removePropsFrom(type);	  return    new    Node(newNode,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  <identifier>  expected	20	None	replace
187	[BUG]  [BUGGY]  return  newNode(type,  child1,  child2,  child3,  child3);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  newNode(type,  child1,  child2,  child3,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  newNode(type,  child1,  child2,  child3,  child3);	  return    newNode(type,    child1,    child2,    child3,    null);    	non-compiled	[CE]  <identifier>  expected	13	None	replace
188	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child3,  parent1);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(child3,    parent);    	non-compiled	[CE]  ')'  expected	16	None	replace
189	[BUG]  [BUGGY]  return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(type,  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(type,  parent);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(parent,  child1,  child2,  child3).clonePropsFrom(type,  parent);	  return    new    Node(child1,    child2,    child3).clonePropsFrom(type,    parent);    	non-compiled	[CE]  ')'  expected	5	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  child1,  child2,  child3));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  child1,  child2,  child3));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  new  TransformerDispatcher(type,  child1,  child2,  child3));	  NodeTraversal.traverse(compiler,    new    TransformDispatcher(type,    child1,    child2,    child3));    	non-compiled	[CE]  ')'  expected	9	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  NodeTraversal.traverse(compiler,  child1,  newNode(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	NodeTraversal.traverse(compiler,  child1,  newNode(type));	  NodeTraversal.traverse(compiler,    newNode(type),    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	24	None	replace
192	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).addChildToFront(child3);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).addChildToFront(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).addChildToFront(child3);	  return    new    Node(type,    child1,    child2,    child3).removePropsFrom(child3);    	non-compiled	[CE]  ')'  expected	32	None	replace
193	[BUG]  [BUGGY]  return  NodeUtil.newNode(child3,  child1,  child2,  child3);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  NodeUtil.newNode(child3,  child1,  child2,  child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  NodeUtil.newNode(child3,  child1,  child2,  child3);	  return    NodeUtil.newNode(type,    child1,    child2,    child3);    	non-compiled	[CE]  ')'  expected	11	None	replace
194	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).removePathFrom(child3);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).removePathFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).removePathFrom(child3);	  return    new    Node(type,    child1,    child2,    child3).clonePathFrom(child3);    	non-compiled	[CE]  ';'  expected	17	None	replace
195	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child3).clonePathFrom(child3);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child2,  child3).clonePathFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child2,  child3).clonePathFrom(child3);	  return    new    Node(type,    child1,    child2,    child3).clonePathFrom(child3);    	non-compiled	[CE]  ';'  expected	17	None	replace
196	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  child1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  child1);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(parent,  child3,  child1);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
197	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child1,  child2);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child1,  child2);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(child1,  child2);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(parent,    child3);    	non-compiled	[CE]  ';'  expected	15	None	replace
198	[BUG]  [BUGGY]  return  new  Node(type,  child3,  child3).clonePropsFrom(child3);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child3,  child3).clonePropsFrom(child3);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child3,  child3).clonePropsFrom(child3);	  return    new    Node(type,    child2,    child3).clonePropsFrom(child3);    	non-compiled	[CE]  ';'  expected	33	None	replace
199	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).removePropsFrom(type);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).removePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).removePropsFrom(type);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  <identifier>  expected	30	None	replace
200	[BUG]  [BUGGY]  return  new  Node(type,  child2,  child3).clonePropsFrom(type);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child2,  child3).clonePropsFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child2,  child3).clonePropsFrom(type);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ';'  expected	30	None	replace
201	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(type));  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(type));  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePropsFrom(type));	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ';'  expected	30	None	replace
202	[BUG]  [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(type);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  newNode(int  type,  Node  child1,  Node  child2,  Node  child3)  {      [BUGGY]  return  new  Node(type,  child1,  child2,  child3).clonePathFrom(type);  [BUGGY]      }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  newNode  [RETURN_TYPE]  Node  int  type  Node  child1  Node  child2  Node  child3  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  directives  parsedComments  reservedKeywords  boolean  Config  config  Node  assign  block  bodyNode  c  child  child1  child2  child3  cur  flagsNode  fnNode  initalizer  irNode  key  labelName  leftChild  literalStringNode  lp  n  newBlock  newName  newNode  node  operand  prev  ret  rootNodeJsDocHolder  target  templateNode  value  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  comment  directive  flags  identifier  msg  sourceName  sourceString  value  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  jsDocInfo  rootNodeJsDoc  int  type  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5773502691896258	1297	1297	1	replace	return  new  Node(type,  child1,  child2,  child3).clonePathFrom(type);	  return    new    Node(type,    child1,    child2,    child3).clonePropsFrom(type);    	non-compiled	[CE]  ';'  expected	30	None	replace
