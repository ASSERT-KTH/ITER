bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImmediateParentNode();	  Node    irNode    =    node.getAstNode();    	non-compiled	[CE]  	6	None	replace
2	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK);  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.BLOCK);	  Node    irNode    =    node.getAstNode();    	non-compiled	[CE]  ';'  expected	6	None	replace
3	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.OBJECTLIT);	  Node    irNode    =    node.getAstNode();    	non-compiled	[CE]  ';'  expected	6	None	replace
4	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN);  [CE]  ';'  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.ASSIGN);	  Node    irNode    =    node.getAstNode();    	non-compiled	[CE]  ';'  expected	6	None	replace
5	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  null);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  null);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  null);	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	9	None	replace
6	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  true);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  true);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  true);	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	9	None	replace
7	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  false);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  false);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  false);	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	9	None	replace
8	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  node);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  node);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  node);	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	9	None	replace
9	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  1);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  1);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  1);	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	9	None	replace
10	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getLastChild());  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node.getLastChild());  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getLastChild());	  Node    irNode    =    transform(node.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
11	[BUG]  [BUGGY]  Node  irNode  =  node.getLastChild();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getLastChild();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getLastChild();	  Node    irNode    =    transform(node.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
12	[BUG]  [BUGGY]  Node  irNode  =  node.removeFirstChild();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.removeFirstChild();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.removeFirstChild();	  Node    irNode    =    transform(node.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
13	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getNext());  [CE]  ';'  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node.getNext());  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getNext());	  Node    irNode    =    transform(node.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
14	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  true);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  true);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  true);	  Node    irNode    =    transform(node,    false);    	non-compiled	[CE]  ';'  expected	8	None	replace
15	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  true);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transformer(node,  true);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  true);	  Node    irNode    =    transform(node,    false);    	non-compiled	[CE]  ';'  expected	8	None	replace
16	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  false);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  false);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  false);	  Node    irNode    =    transform(node,    false);    	non-compiled	[CE]  ';'  expected	8	None	replace
17	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  true);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  false,  true);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  true);	  Node    irNode    =    transform(node,    false);    	non-compiled	[CE]  ';'  expected	8	None	replace
18	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  null);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  false,  null);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  null);	  Node    irNode    =    transform(node,    false);    	non-compiled	[CE]  ';'  expected	8	None	replace
19	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(1);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getAncestor(1);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAncestor(1);	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  ';'  expected	1	None	replace
20	[BUG]  [BUGGY]  Node  irNode  =  node.getOwnerChild();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getOwnerChild();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getOwnerChild();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  ')'  expected	1	None	replace
21	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitPrototype();  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getImplicitPrototype();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitPrototype();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  ')'  expected	2	None	replace
22	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  null);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  null);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  null);	  Node    irNode    =    node.transform(Token.BLOCK);    	non-compiled	[CE]  ';'  expected	10	None	replace
23	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  true);  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  true);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  true);	  Node    irNode    =    node.transform(Token.BLOCK);    	non-compiled	[CE]  ';'  expected	10	None	replace
24	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  1);  [CE]  ';'  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  1);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  1);	  Node    irNode    =    node.transform(Token.BLOCK);    	non-compiled	[CE]  ';'  expected	10	None	replace
25	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  this);  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  this);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  this);	  Node    irNode    =    node.transform(Token.BLOCK);    	non-compiled	[CE]  ';'  expected	10	None	replace
26	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformToken(Token.BLOCK);	  Node    irNode    =    node.transform(Token.BLOCK);    	non-compiled	[CE]  ';'  expected	10	None	replace
27	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRootNode();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getAstRootNode();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstRootNode();	      	non-compiled	[CE]  ';'  expected	7	None	replace
28	[BUG]  [BUGGY]  Node  irNode  =  node.getJSDocInfo();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getJSDocInfo();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getJSDocInfo();	      	non-compiled	[CE]  	7	None	replace
29	[BUG]  [BUGGY]  Node  irNode  =  node.getTree();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getTree();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getTree();	  Node    irNode    =    node.cloneTree();    	non-compiled	[CE]  	4	None	replace
30	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParent();  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getImmediateParent();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImmediateParent();	  Node    irNode    =    node.getParent();    	non-compiled	[CE]  	3	None	replace
31	[BUG]  [BUGGY]  Node  irNode  =  node.getOwner();  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getOwner();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getOwner();	  Node    irNode    =    node.getParent();    	non-compiled	[CE]  	3	None	replace
32	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  true);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  convert(node,  true);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  true);	  Node    irNode    =    transform(node,    false);    	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  irNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  irNode);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  irNode);	  Node    irNode    =    node.transform(Token.BLOCK);    	non-compiled	[CE]  	10	None	replace
34	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitReturn();  [CE]  ';'  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getImplicitReturn();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitReturn();	      	non-compiled	[CE]  ';'  expected	7	None	replace
35	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY);  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.EMPTY);	  Node    irNode    =    node.getAstNode();    	non-compiled	[CE]  ';'  expected	6	None	replace
36	[BUG]  [BUGGY]  Node  irNode  =  node.getOwnerDocument();  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getOwnerDocument();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getOwnerDocument();	  Node    irNode    =    node.getParent();    	non-compiled	[CE]  ';'  expected	3	None	replace
37	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK);  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.BLOCK);	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	9	None	replace
38	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  0);  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  0);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  0);	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	9	None	replace
39	[BUG]  [BUGGY]  Node  irNode  =  node.transform(node.getFirstChild());  [CE]  ';'  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transform(node.getFirstChild());  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(node.getFirstChild());	  Node    irNode    =    transform(node.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
40	[BUG]  [BUGGY]  Node  irNode  =  transform(node.cloneTree());  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node.cloneTree());  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.cloneTree());	  Node    irNode    =    transform(node.getFirstChild());    	non-compiled	[CE]  ';'  expected	5	None	replace
41	[BUG]  [BUGGY]  Node  irNode  =  node.getParentNode();  [CE]  ';'  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getParentNode();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getParentNode();	  Node    irNode    =    node.getAstNode();    	non-compiled	[CE]  ';'  expected	6	None	replace
42	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  1;  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  1;  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK)+  1;	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	9	None	replace
43	[BUG]  [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK);  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  lookup(node,  Token.BLOCK);	  Node    irNode    =    transform(node,    Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
44	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  Token.BLOCK);  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node,  false,  Token.BLOCK);  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  Token.BLOCK);	  Node    irNode    =    transform(node,    false);    	non-compiled	[CE]  <identifier>  expected	8	None	replace
45	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  1;  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  1;  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK)+  1;	  Node    irNode    =    node.transform(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	10	None	replace
46	[BUG]  [BUGGY]  Node  irNode  =  node.getInitializingChild();  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  node.getInitializingChild();  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getInitializingChild();	      	non-compiled	[CE]  <identifier>  expected	7	None	replace
47	[BUG]  [BUGGY]  Node  irNode  =  transform(node.removeFirstChild());  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {    [BUGGY]  Node  irNode  =  transform(node.removeFirstChild());  [BUGGY]    if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.removeFirstChild());	  Node    irNode    =    transform(node.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	5	None	replace
