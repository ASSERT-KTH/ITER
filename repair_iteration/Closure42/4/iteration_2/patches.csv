bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  1);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.BLOCK,  1);	  Node    irNode    =    node.getAstNode(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
2	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  null);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.BLOCK,  null);	  Node    irNode    =    node.getAstNode(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
3	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  true);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.BLOCK,  true);	  Node    irNode    =    node.getAstNode(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	2	None	replace
4	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.BLOCK,  false);	  Node    irNode    =    node.getAstNode(Token.BLOCK);    	non-compiled	[CE]  	2	None	replace
5	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK)+  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK)+  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.BLOCK)+  1;	  Node    irNode    =    node.getAstNode(Token.BLOCK);    	non-compiled	[CE]  	2	None	replace
6	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  this);  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  this);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.BLOCK,  this);	  Node    irNode    =    node.getAstNode(Token.BLOCK);    	non-compiled	[CE]  	2	None	replace
7	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRoot();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstRoot();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstRoot();	  Node    irNode    =    node.getOwner();    	non-compiled	[CE]  	31	None	replace
8	[BUG]  [BUGGY]  Node  irNode  =  node.getCurrentNode();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getCurrentNode();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getCurrentNode();	  Node    irNode    =    node.getTree();    	non-compiled	[CE]  ')'  expected	29	None	replace
9	[BUG]  [BUGGY]  Node  irNode  =  node.getIgnoreWhitespace();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getIgnoreWhitespace();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getIgnoreWhitespace();	  Node    irNode    =    node.getOwnerDocument();    	non-compiled	[CE]  ';'  expected	36	None	replace
10	[BUG]  [BUGGY]  Node  irNode  =  node.getOwnerDoc();  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getOwnerDoc();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getOwnerDoc();	  Node    irNode    =    node.getOwnerDocument();    	non-compiled	[CE]  ';'  expected	36	None	replace
11	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  IRFactory());  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  IRFactory());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  new  IRFactory());	  Node    irNode    =    node.transform(Token.BLOCK,    null);    	non-compiled	[CE]  ';'  expected	22	None	replace
12	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  message);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  message);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  message);	  Node    irNode    =    node.transform(Token.BLOCK,    null);    	non-compiled	[CE]  ';'  expected	22	None	replace
13	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  parent);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  parent);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  parent);	  Node    irNode    =    node.transform(Token.BLOCK,    null);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
14	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  null,  false);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  null,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  null,  false);	  Node    irNode    =    node.transform(Token.BLOCK,    null);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
15	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  null,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  null,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  null,  true);	  Node    irNode    =    node.transform(Token.BLOCK,    null);    	non-compiled	[CE]  <identifier>  expected	22	None	replace
16	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitInstantiation();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitInstantiation();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitInstantiation();	  Node    irNode    =    node.getImplicitReturn();    	non-compiled	[CE]  ')'  expected	34	None	replace
17	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitReturn()  +  1;  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitReturn()  +  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitReturn()  +  1;	  Node    irNode    =    node.getImplicitReturn();    	non-compiled	[CE]  ';'  expected	34	None	replace
18	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitRaw();  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitRaw();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitRaw();	  Node    irNode    =    node.getImplicitReturn();    	non-compiled	[CE]  ';'  expected	34	None	replace
19	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitInput();  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitInput();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitInput();	  Node    irNode    =    node.getImplicitReturn();    	non-compiled	[CE]  ';'  expected	34	None	replace
20	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  2);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  2);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  2);	  Node    irNode    =    transform(node,    Token.BLOCK,    0);    	non-compiled	[CE]  ';'  expected	38	None	replace
21	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  3);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  3);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  3);	  Node    irNode    =    transform(node,    Token.BLOCK,    0);    	non-compiled	[CE]  ';'  expected	38	None	replace
22	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  4);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  4);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  4);	  Node    irNode    =    transform(node,    Token.BLOCK,    0);    	non-compiled	[CE]  ';'  expected	38	None	replace
23	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  Token.BLOCK,  1);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node,  Token.BLOCK,  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  Token.BLOCK,  1);	  Node    irNode    =    transform(node,    Token.BLOCK,    0);    	non-compiled	[CE]  ';'  expected	38	None	replace
24	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.BLOCK,  1);	  Node    irNode    =    transform(node,    Token.BLOCK,    0);    	non-compiled	[CE]  ')'  expected	38	None	replace
25	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  0);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  0);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  0);	  Node    irNode    =    transform(node,    Token.BLOCK,    0);    	non-compiled	[CE]  ')'  expected	38	None	replace
26	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  true);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.BLOCK,  true);	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	37	None	replace
27	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  null);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.BLOCK,  null);	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	37	None	replace
28	[BUG]  [BUGGY]  Node  irNode  =  convertToken(node,  Token.BLOCK);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convertToken(node,  Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convertToken(node,  Token.BLOCK);	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	37	None	replace
29	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  false);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.BLOCK,  false);	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	37	None	replace
30	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK)+  1;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK)+  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.BLOCK)+  1;	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	37	None	replace
31	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  true,  Token.BLOCK);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  true,  Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  true,  Token.BLOCK);	  Node    irNode    =    transform(node,    false,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	44	None	replace
32	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  Token.BLOCK,  true);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  false,  Token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  Token.BLOCK,  true);	  Node    irNode    =    transform(node,    false,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	44	None	replace
33	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  true,  Token.BLOCK);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node,  true,  Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  true,  Token.BLOCK);	  Node    irNode    =    transform(node,    false,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	44	None	replace
34	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  Token.BLOCK,  null);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  false,  Token.BLOCK,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  Token.BLOCK,  null);	  Node    irNode    =    transform(node,    false,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	44	None	replace
35	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  null,  Token.BLOCK);  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  null,  Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  null,  Token.BLOCK);	  Node    irNode    =    transform(node,    false,    Token.BLOCK);    	non-compiled	[CE]  ';'  expected	44	None	replace
36	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN)+  1;  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN)+  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.ASSIGN)+  1;	  Node    irNode    =    node.getAstNode(Token.ASSIGN);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
37	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN,  true);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.ASSIGN,  true);	  Node    irNode    =    node.getAstNode(Token.ASSIGN);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
38	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN,  null);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.ASSIGN,  null);	  Node    irNode    =    node.getAstNode(Token.ASSIGN);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
39	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.EXPR_RESULT);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.EXPR_RESULT);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.EXPR_RESULT);	  Node    irNode    =    node.getAstNode(Token.ASSIGN);    	non-compiled	[CE]  <identifier>  expected	4	None	replace
40	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  false);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformToken(Token.BLOCK,  false);	  Node    irNode    =    node.transform(Token.BLOCK,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
41	[BUG]  [BUGGY]  Node  irNode  =  node.transformTokenBLOCK(Token.BLOCK,  false);  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformTokenBLOCK(Token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformTokenBLOCK(Token.BLOCK,  false);	  Node    irNode    =    node.transform(Token.BLOCK,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
42	[BUG]  [BUGGY]  Node  irNode  =  node.transform(token.BLOCK,  false);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(token.BLOCK,  false);	  Node    irNode    =    node.transform(Token.BLOCK,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
43	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  true,  false);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  true,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  true,  false);	  Node    irNode    =    node.transform(Token.BLOCK,    true);    	non-compiled	[CE]  not  a  statement	23	None	replace
44	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  true);  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  true);	  Node    irNode    =    node.getAstNode(Token.OBJECTLIT);    	non-compiled	[CE]  not  a  statement	3	None	replace
45	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  null);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  null);	  Node    irNode    =    node.getAstNode(Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	3	None	replace
46	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  1);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  1);	  Node    irNode    =    node.getAstNode(Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	3	None	replace
47	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  this);  [CE]  ';'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  this);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  this);	  Node    irNode    =    node.getAstNode(Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	3	None	replace
48	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  false);  [CE]  ';'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  false);	  Node    irNode    =    node.getAstNode(Token.OBJECTLIT);    	non-compiled	[CE]  ';'  expected	3	None	replace
49	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode());	  Node    irNode    =    node.transform(Token.BLOCK,    this);    	non-compiled	[CE]  ';'  expected	25	None	replace
50	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.WARNING));  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.WARNING));  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.WARNING));	  Node    irNode    =    node.transform(Token.BLOCK,    this);    	non-compiled	[CE]  ';'  expected	25	None	replace
51	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.EMPTY));  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.EMPTY));  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.EMPTY));	  Node    irNode    =    node.transform(Token.BLOCK,    this);    	non-compiled	[CE]  ';'  expected	25	None	replace
52	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.BLOCK);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstRootNode(Token.BLOCK);	  Node    irNode    =    node.getAstRootNode();    	non-compiled	[CE]  ';'  expected	27	None	replace
53	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.ASSIGN);  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.ASSIGN);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstRootNode(Token.ASSIGN);	  Node    irNode    =    node.getAstRootNode();    	non-compiled	[CE]  ';'  expected	27	None	replace
54	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.OBJECTLIT);  [CE]  ';'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.OBJECTLIT);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstRootNode(Token.OBJECTLIT);	  Node    irNode    =    node.getAstRootNode();    	non-compiled	[CE]  ';'  expected	27	None	replace
55	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.EMPTY);  [CE]  ';'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.EMPTY);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstRootNode(Token.EMPTY);	  Node    irNode    =    node.getAstRootNode();    	non-compiled	[CE]  ';'  expected	27	None	replace
56	[BUG]  [BUGGY]  Node  irNode  =  node.transform(node.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(node.getLastChild());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(node.getLastChild());	  Node    irNode    =    transform(node.getLastChild());    	non-compiled	[CE]  ';'  expected	10	None	replace
57	[BUG]  [BUGGY]  Node  irNode  =  transformer(node.getFirstChild());  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node.getFirstChild());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node.getFirstChild());	  Node    irNode    =    transform(node.getLastChild());    	non-compiled	[CE]  ';'  expected	10	None	replace
58	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(2);  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAncestor(2);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAncestor(2);	  Node    irNode    =    node.getAncestor(1);    	non-compiled	[CE]  ';'  expected	19	None	replace
59	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(3);  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAncestor(3);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAncestor(3);	  Node    irNode    =    node.getAncestor(1);    	non-compiled	[CE]  ';'  expected	19	None	replace
60	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(4);  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAncestor(4);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAncestor(4);	  Node    irNode    =    node.getAncestor(1);    	non-compiled	[CE]  ';'  expected	19	None	replace
61	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(0);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAncestor(0);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAncestor(0);	  Node    irNode    =    node.getAncestor(1);    	non-compiled	[CE]  ')'  expected	19	None	replace
62	[BUG]  [BUGGY]  Node  irNode  =  node.next();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.next();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.next();	  Node    irNode    =    node.removeFirstChild();    	non-compiled	[CE]  ')'  expected	12	None	replace
63	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  newAstNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  newAstNode);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  newAstNode);	  Node    irNode    =    node.transform(Token.BLOCK,    irNode);    	non-compiled	[CE]  ')'  expected	33	None	replace
64	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  nameNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  nameNode);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  nameNode);	  Node    irNode    =    node.transform(Token.BLOCK,    irNode);    	non-compiled	[CE]  ')'  expected	33	None	replace
65	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  Token.WARNING);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  Token.WARNING);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  Token.WARNING);	  Node    irNode    =    node.transform(Token.BLOCK,    irNode);    	non-compiled	[CE]  ')'  expected	33	None	replace
66	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  token);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  token);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  token);	  Node    irNode    =    node.transform(Token.BLOCK,    irNode);    	non-compiled	[CE]  ')'  expected	33	None	replace
67	[BUG]  [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  true);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  lookup(node,  Token.BLOCK,  true);	  Node    irNode    =    lookup(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	43	None	replace
68	[BUG]  [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  null);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  lookup(node,  Token.BLOCK,  null);	  Node    irNode    =    lookup(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	43	None	replace
69	[BUG]  [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  lookup(node,  Token.BLOCK,  false);	  Node    irNode    =    lookup(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	43	None	replace
70	[BUG]  [BUGGY]  Node  irNode  =  lookupAstNode(node,  Token.BLOCK);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  lookupAstNode(node,  Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  lookupAstNode(node,  Token.BLOCK);	  Node    irNode    =    lookup(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	43	None	replace
71	[BUG]  [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  this);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  this);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  lookup(node,  Token.BLOCK,  this);	  Node    irNode    =    lookup(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	43	None	replace
72	[BUG]  [BUGGY]  Node  irNode  =  transform(node.cloneTree(),  node);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.cloneTree(),  node);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.cloneTree(),  node);	  Node    irNode    =    transform(node.cloneTree());    	non-compiled	[CE]  ')'  expected	40	None	replace
73	[BUG]  [BUGGY]  Node  irNode  =  transform(node.cloneTree(),  node.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.cloneTree(),  node.cloneTree());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.cloneTree(),  node.cloneTree());	  Node    irNode    =    transform(node.cloneTree());    	non-compiled	[CE]  ')'  expected	40	None	replace
74	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getTree());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getTree());	  Node    irNode    =    transform(node.cloneTree());    	non-compiled	[CE]  ')'  expected	40	None	replace
75	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getType());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getType());	  Node    irNode    =    transform(node.cloneTree());    	non-compiled	[CE]  ')'  expected	40	None	replace
76	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParentNode(Token.EMPTY);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImmediateParentNode(Token.EMPTY);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImmediateParentNode(Token.EMPTY);	  Node    irNode    =    node.getImmediateParentNode();    	non-compiled	[CE]  ')'  expected	1	None	replace
77	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediatePosition();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImmediatePosition();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImmediatePosition();	  Node    irNode    =    node.getImmediateParentNode();    	non-compiled	[CE]  ')'  expected	1	None	replace
78	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  false);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  false);	  Node    irNode    =    transformer(node,    true);    	non-compiled	[CE]  ')'  expected	15	None	replace
79	[BUG]  [BUGGY]  Node  irNode  =  transformer(node);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node);	  Node    irNode    =    transformer(node,    true);    	non-compiled	[CE]  ')'  expected	15	None	replace
80	[BUG]  [BUGGY]  Node  irNode  =  transformer(node.getType(),  true);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node.getType(),  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node.getType(),  true);	  Node    irNode    =    transformer(node,    true);    	non-compiled	[CE]  ')'  expected	15	None	replace
81	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.OBJECTLIT,  true);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.OBJECTLIT,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.OBJECTLIT,  true);	  Node    irNode    =    transformer(node,    true);    	non-compiled	[CE]  ')'  expected	15	None	replace
82	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  null);	  Node    irNode    =    transformer(node,    true);    	non-compiled	[CE]  ')'  expected	15	None	replace
83	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  2;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  2;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK)+  2;	  Node    irNode    =    node.transform(Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
84	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)/  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)/  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK)/  1;	  Node    irNode    =    node.transform(Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
85	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK)+  1;  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK)+  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformToken(Token.BLOCK)+  1;	  Node    irNode    =    node.transform(Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
86	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  4;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  4;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK)+  4;	  Node    irNode    =    node.transform(Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
87	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  3;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  3;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK)+  3;	  Node    irNode    =    node.transform(Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
88	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  1  +  1;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)+  1  +  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK)+  1  +  1;	  Node    irNode    =    node.transform(Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
89	[BUG]  [BUGGY]  Node  irNode  =  node.getOwnerNode();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getOwnerNode();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getOwnerNode();	  Node    irNode    =    node.getParentNode();    	non-compiled	[CE]  ')'  expected	41	None	replace
90	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  this);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  this);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  this);	  Node    irNode    =    transform(node,    Token.BLOCK,    null);    	non-compiled	[CE]  ')'  expected	5	None	replace
91	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  parent);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  parent);	  Node    irNode    =    transform(node,    Token.BLOCK,    null);    	non-compiled	[CE]  ')'  expected	5	None	replace
92	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  newAstNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  newAstNode);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  newAstNode);	  Node    irNode    =    transform(node,    Token.BLOCK,    null);    	non-compiled	[CE]  ')'  expected	5	None	replace
93	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  null,  true);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  null,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  null,  true);	  Node    irNode    =    transform(node,    Token.BLOCK,    null);    	non-compiled	[CE]  ')'  expected	5	None	replace
94	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  nameNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  nameNode);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  nameNode);	  Node    irNode    =    transform(node,    Token.BLOCK,    null);    	non-compiled	[CE]  ')'  expected	5	None	replace
95	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  null,  false);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  null,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  null,  false);	  Node    irNode    =    transform(node,    Token.BLOCK,    null);    	non-compiled	[CE]  ')'  expected	5	None	replace
96	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  false);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  false);	  Node    irNode    =    convert(node,    true);    	non-compiled	[CE]  ')'  expected	32	None	replace
97	[BUG]  [BUGGY]  Node  irNode  =  convert(node);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node);	  Node    irNode    =    convert(node,    true);    	non-compiled	[CE]  ')'  expected	32	None	replace
98	[BUG]  [BUGGY]  Node  irNode  =  convert(node.getType(),  true);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node.getType(),  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node.getType(),  true);	  Node    irNode    =    convert(node,    true);    	non-compiled	[CE]  ')'  expected	32	None	replace
99	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  null);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  null);	  Node    irNode    =    convert(node,    true);    	non-compiled	[CE]  ')'  expected	32	None	replace
100	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getParent());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getParent());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getParent());	  Node    irNode    =    transform(node.getNext());    	non-compiled	[CE]  ')'  expected	13	None	replace
101	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getAstRoot());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getAstRoot());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getAstRoot());	  Node    irNode    =    transform(node.getNext());    	non-compiled	[CE]  ')'  expected	13	None	replace
102	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getNext(),  node);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getNext(),  node);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getNext(),  node);	  Node    irNode    =    transform(node.getNext());    	non-compiled	[CE]  ')'  expected	13	None	replace
103	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  2);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  2);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  2);	  Node    irNode    =    node.transform(Token.BLOCK,    1);    	non-compiled	[CE]  ')'  expected	24	None	replace
104	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  3);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  3);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  3);	  Node    irNode    =    node.transform(Token.BLOCK,    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
105	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  4);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  4);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  4);	  Node    irNode    =    node.transform(Token.BLOCK,    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
106	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  1L);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  1L);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  1L);	  Node    irNode    =    node.transform(Token.BLOCK,    1);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
107	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  DEFAULT_NAME);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  DEFAULT_NAME);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  DEFAULT_NAME);	  Node    irNode    =    node.transform(Token.BLOCK,    1);    	non-compiled	[CE]  ')'  expected	24	None	replace
108	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitReturnType();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitReturnType();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitReturnType();	  Node    irNode    =    node.getImplicitPrototype();    	non-compiled	[CE]  ')'  expected	21	None	replace
109	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitDeclaration();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitDeclaration();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitDeclaration();	  Node    irNode    =    node.getImplicitPrototype();    	non-compiled	[CE]  ')'  expected	21	None	replace
110	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitParent();  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitParent();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitParent();	  Node    irNode    =    node.getImplicitPrototype();    	non-compiled	[CE]  ')'  expected	21	None	replace
111	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitAssignment();  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitAssignment();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitAssignment();	  Node    irNode    =    node.getImplicitPrototype();    	non-compiled	[CE]  ')'  expected	21	None	replace
112	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  2;  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  2;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK)+  2;	  Node    irNode    =    transform(node,    Token.BLOCK)+    1;    	non-compiled	[CE]  <identifier>  expected	42	None	replace
113	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)/  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)/  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK)/  1;	  Node    irNode    =    transform(node,    Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	42	None	replace
114	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  1  +  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  1  +  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK)+  1  +  1;	  Node    irNode    =    transform(node,    Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	42	None	replace
115	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  4;  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  4;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK)+  4;	  Node    irNode    =    transform(node,    Token.BLOCK)+    1;    	non-compiled	[CE]  	42	None	replace
116	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  3;  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK)+  3;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK)+  3;	  Node    irNode    =    transform(node,    Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	42	None	replace
117	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  5);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  5);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  5);	  Node    irNode    =    transform(node,    Token.BLOCK,    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
118	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  0,  1);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  0,  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  0,  1);	  Node    irNode    =    transform(node,    Token.BLOCK,    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
119	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  1L);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  1L);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  1L);	  Node    irNode    =    transform(node,    Token.BLOCK,    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
120	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  Token.BLOCK,  true);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node,  Token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  Token.BLOCK,  true);	  Node    irNode    =    transform(node,    Token.BLOCK,    false);    	non-compiled	[CE]  ')'  expected	7	None	replace
121	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  token.BLOCK,  true);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  token.BLOCK,  true);	  Node    irNode    =    transform(node,    Token.BLOCK,    false);    	non-compiled	[CE]  ')'  expected	7	None	replace
122	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  false,  true);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  false,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  false,  true);	  Node    irNode    =    transform(node,    Token.BLOCK,    false);    	non-compiled	[CE]  ')'  expected	7	None	replace
123	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateChild();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImmediateChild();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImmediateChild();	  Node    irNode    =    node.getImmediateParent();    	non-compiled	[CE]  ')'  expected	30	None	replace
124	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  false,  true);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  false,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  false,  true);	  Node    irNode    =    node.transform(Token.BLOCK,    false);    	non-compiled	[CE]  ')'  expected	16	None	replace
125	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  true);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformToken(Token.BLOCK,  true);	  Node    irNode    =    node.transform(Token.BLOCK,    false);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
126	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  false,  null);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  false,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  false,  null);	  Node    irNode    =    node.transform(Token.BLOCK,    false);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
127	[BUG]  [BUGGY]  Node  irNode  =  node.transformTokenBLOCK(Token.BLOCK,  true);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformTokenBLOCK(Token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformTokenBLOCK(Token.BLOCK,  true);	  Node    irNode    =    node.transform(Token.BLOCK,    false);    	non-compiled	[CE]  <identifier>  expected	16	None	replace
128	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  Token.BLOCK,  false);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node,  Token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  Token.BLOCK,  false);	  Node    irNode    =    transform(node,    Token.BLOCK,    true);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
129	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  token.BLOCK,  false);  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  token.BLOCK,  false);	  Node    irNode    =    transform(node,    Token.BLOCK,    true);    	non-compiled	[CE]  <identifier>  expected	6	None	replace
130	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getFirstChild(),  true);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getFirstChild(),  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getFirstChild(),  true);	  Node    irNode    =    transform(node,    true);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
131	[BUG]  [BUGGY]  Node  irNode  =  node.transform(token.getFirstChild());  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(token.getFirstChild());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(token.getFirstChild());	  Node    irNode    =    node.transform(node.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
132	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  node.getFirstChild());  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  node.getFirstChild());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  node.getFirstChild());	  Node    irNode    =    node.transform(node.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
133	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.OBJECTLIT,  node.getFirstChild());  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.OBJECTLIT,  node.getFirstChild());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.OBJECTLIT,  node.getFirstChild());	  Node    irNode    =    node.transform(node.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
134	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.EMPTY);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.EMPTY);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.EMPTY);	  Node    irNode    =    node.transform(node.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
135	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.GETPROP);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.GETPROP);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.GETPROP);	  Node    irNode    =    node.transform(node.getFirstChild());    	non-compiled	[CE]  <identifier>  expected	39	None	replace
136	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  null);  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformToken(Token.BLOCK,  null);	  Node    irNode    =    node.transformToken(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
137	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(Token.OBJECTLIT);  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformToken(Token.OBJECTLIT);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformToken(Token.OBJECTLIT);	  Node    irNode    =    node.transformToken(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
138	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformToken(Token.BLOCK,  1);	  Node    irNode    =    node.transformToken(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
139	[BUG]  [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  this);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformToken(Token.BLOCK,  this);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformToken(Token.BLOCK,  this);	  Node    irNode    =    node.transformToken(Token.BLOCK);    	non-compiled	[CE]  <identifier>  expected	26	None	replace
140	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY)+  1;  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY)+  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.EMPTY)+  1;	  Node    irNode    =    node.getAstNode(Token.EMPTY);    	non-compiled	[CE]  ')'  expected	35	None	replace
141	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  true);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.EMPTY,  true);	  Node    irNode    =    node.getAstNode(Token.EMPTY);    	non-compiled	[CE]  ')'  expected	35	None	replace
142	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  1);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.EMPTY,  1);	  Node    irNode    =    node.getAstNode(Token.EMPTY);    	non-compiled	[CE]  ')'  expected	35	None	replace
143	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  null);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.EMPTY,  null);	  Node    irNode    =    node.getAstNode(Token.EMPTY);    	non-compiled	[CE]  ')'  expected	35	None	replace
144	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  false);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.EMPTY,  false);	  Node    irNode    =    node.getAstNode(Token.EMPTY);    	non-compiled	[CE]  ')'  expected	35	None	replace
145	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  this);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.EMPTY,  this);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.EMPTY,  this);	  Node    irNode    =    node.getAstNode(Token.EMPTY);    	non-compiled	[CE]  ')'  expected	35	None	replace
146	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  node.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  node.cloneTree());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  node.cloneTree());	  Node    irNode    =    transform(node,    Token.BLOCK,    node);    	non-compiled	[CE]  ')'  expected	8	None	replace
147	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  node.getType());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  node.getType());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  node.getType());	  Node    irNode    =    transform(node,    Token.BLOCK,    node);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
148	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  false,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  false);	  Node    irNode    =    transform(node,    false,    true);    	non-compiled	[CE]  ')'  expected	17	None	replace
149	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  true,  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  true,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  true,  false);	  Node    irNode    =    transform(node,    false,    true);    	non-compiled	[CE]  ')'  expected	17	None	replace
150	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  true,  true);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  true,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  true,  true);	  Node    irNode    =    transform(node,    false,    true);    	non-compiled	[CE]  ')'  expected	17	None	replace
151	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  true,  null);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  true,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  true,  null);	  Node    irNode    =    transform(node,    false,    true);    	non-compiled	[CE]  ')'  expected	17	None	replace
152	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  false,  false);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node,  false,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  false,  false);	  Node    irNode    =    transform(node,    false,    true);    	non-compiled	[CE]  ')'  expected	17	None	replace
153	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  null,  false);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  null,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  null,  false);	  Node    irNode    =    transform(node,    false,    true);    	non-compiled	[CE]  ')'  expected	17	None	replace
154	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  null,  true);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  false,  null,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  null,  true);	  Node    irNode    =    transform(node,    false,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
155	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  null,  null);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  false,  null,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  null,  null);	  Node    irNode    =    transform(node,    false,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
156	[BUG]  [BUGGY]  Node  irNode  =  transformer(node,  true,  null);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node,  true,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node,  true,  null);	  Node    irNode    =    transform(node,    false,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
157	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  false,  null);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  false,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  false,  null);	  Node    irNode    =    transform(node,    false,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
158	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  null)+  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  null)+  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  null)+  1;	  Node    irNode    =    node.transform(Token.BLOCK,    null);    	non-compiled	[CE]  ')'  expected	22	None	replace
159	[BUG]  [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  lookup(node,  Token.BLOCK,  1);	  Node    irNode    =    lookup(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	43	None	replace
160	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  false,  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  false,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  false,  false);	  Node    irNode    =    transform(node,    false,    true);    	non-compiled	[CE]  ')'  expected	17	None	replace
161	[BUG]  [BUGGY]  Node  irNode  =  node.transform(node.getNext());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(node.getNext());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(node.getNext());	  Node    irNode    =    transform(node.getNext());    	non-compiled	[CE]  ')'  expected	13	None	replace
162	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getNext()  +  1);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getNext()  +  1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getNext()  +  1);	  Node    irNode    =    transform(node.getNext());    	non-compiled	[CE]  ')'  expected	13	None	replace
163	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateStatement();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImmediateStatement();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImmediateStatement();	  Node    irNode    =    node.getImmediateParent();    	non-compiled	[CE]  ')'  expected	30	None	replace
164	[BUG]  [BUGGY]  Node  irNode  =  node.getPrimaryParent();  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getPrimaryParent();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getPrimaryParent();	  Node    irNode    =    node.getImmediateParent();    	non-compiled	[CE]  <identifier>  expected	30	None	replace
165	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  this)+  1;  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  this)+  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  this)+  1;	  Node    irNode    =    node.transform(Token.BLOCK,    this);    	non-compiled	[CE]  <identifier>  expected	25	None	replace
166	[BUG]  [BUGGY]  Node  irNode  =  node.transform(node.removeFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(node.removeFirstChild());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(node.removeFirstChild());	  Node    irNode    =    transform(node.removeFirstChild());    	non-compiled	[CE]  ')'  expected	47	None	replace
167	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  false,  Token.BLOCK);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  false,  Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  false,  Token.BLOCK);	  Node    irNode    =    transform(node,    false,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	44	None	replace
168	[BUG]  [BUGGY]  Node  irNode  =  node.getfirstChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getfirstChild();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getfirstChild();	  Node    irNode    =    node.getLastChild();    	non-compiled	[CE]  ')'  expected	11	None	replace
169	[BUG]  [BUGGY]  Node  irNode  =  convert(node.getFirstChild(),  true);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node.getFirstChild(),  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node.getFirstChild(),  true);	  Node    irNode    =    convert(node,    true);    	non-compiled	[CE]  ')'  expected	32	None	replace
170	[BUG]  [BUGGY]  Node  irNode  =  convert(node.getParent(),  true);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node.getParent(),  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node.getParent(),  true);	  Node    irNode    =    convert(node,    true);    	non-compiled	[CE]  ')'  expected	32	None	replace
171	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  null,  null);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  null,  null);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  null,  null);	  Node    irNode    =    transform(node,    false,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
172	[BUG]  [BUGGY]  Node  irNode  =  transformer(node.getFirstChild(),  true);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node.getFirstChild(),  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node.getFirstChild(),  true);	  Node    irNode    =    transformer(node,    true);    	non-compiled	[CE]  ')'  expected	15	None	replace
173	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  irNode);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  irNode);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  irNode);	  Node    irNode    =    transform(node,    Token.BLOCK,    node);    	non-compiled	[CE]  ')'  expected	8	None	replace
174	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  0);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK,  0);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.BLOCK,  0);	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	37	None	replace
175	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.EMPTY);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.EMPTY);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.EMPTY);	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	37	None	replace
176	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitAstNode();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitAstNode();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitAstNode();	  Node    irNode    =    node.getImplicitPrototype();    	non-compiled	[CE]  ')'  expected	21	None	replace
177	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitReference();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitReference();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitReference();	  Node    irNode    =    node.getImplicitPrototype();    	non-compiled	[CE]  ')'  expected	21	None	replace
178	[BUG]  [BUGGY]  Node  irNode  =  convert(node.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node.getFirstChild());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node.getFirstChild());	  Node    irNode    =    transform(node.getLastChild());    	non-compiled	[CE]  ')'  expected	10	None	replace
179	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  nameNode);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  nameNode);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.OBJECTLIT,  nameNode);	  Node    irNode    =    node.getAstNode(Token.OBJECTLIT);    	non-compiled	[CE]  ')'  expected	3	None	replace
180	[BUG]  [BUGGY]  Node  irNode  =  node.getPrimaryParentNode();  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getPrimaryParentNode();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getPrimaryParentNode();	  Node    irNode    =    node.getImmediateParentNode();    	non-compiled	[CE]  ')'  expected	1	None	replace
181	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateChildNode();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImmediateChildNode();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImmediateChildNode();	  Node    irNode    =    node.getImmediateParentNode();    	non-compiled	[CE]  ')'  expected	1	None	replace
182	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.GETPROP);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.GETPROP);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.GETPROP);	  Node    irNode    =    node.getAstNode(Token.ASSIGN);    	non-compiled	[CE]  ')'  expected	4	None	replace
183	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.SCRIPT);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.SCRIPT);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.SCRIPT);	  Node    irNode    =    node.getAstNode(Token.ASSIGN);    	non-compiled	[CE]  ')'  expected	4	None	replace
184	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitOperator();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitOperator();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitOperator();	  Node    irNode    =    node.getImplicitReturn();    	non-compiled	[CE]  ')'  expected	34	None	replace
185	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitReturn(node);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitReturn(node);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitReturn(node);	  Node    irNode    =    node.getImplicitReturn();    	non-compiled	[CE]  <identifier>  expected	34	None	replace
186	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  8);  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  8);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  8);	  Node    irNode    =    transform(node,    Token.BLOCK,    1);    	non-compiled	[CE]  <identifier>  expected	9	None	replace
187	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  -1);  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  -1);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  -1);	  Node    irNode    =    node.transform(Token.BLOCK,    1);    	non-compiled	[CE]  <identifier>  expected	24	None	replace
188	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getParent(),  true);  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getParent(),  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getParent(),  true);	  Node    irNode    =    transform(node,    true);    	non-compiled	[CE]  <identifier>  expected	14	None	replace
189	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  name);  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  name);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  name);	  Node    irNode    =    node.transform(Token.BLOCK,    irNode);    	non-compiled	[CE]  <identifier>  expected	33	None	replace
190	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.EXPR_RESULT));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.EXPR_RESULT));  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  new  AstNode(Token.EXPR_RESULT));	  Node    irNode    =    node.transform(Token.BLOCK,    null);    	non-compiled	[CE]  ')'  expected	22	None	replace
191	[BUG]  [BUGGY]  Node  irNode  =  node.getOwnerDocInfo();  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getOwnerDocInfo();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getOwnerDocInfo();	  Node    irNode    =    node.getOwnerDocument();    	non-compiled	[CE]  ')'  expected	36	None	replace
192	[BUG]  [BUGGY]  Node  irNode  =  node.removeChild(node);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.removeChild(node);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.removeChild(node);	  Node    irNode    =    node.removeFirstChild();    	non-compiled	[CE]  ')'  expected	12	None	replace
193	[BUG]  [BUGGY]  Node  irNode  =  node.getInitializingChild().cloneTree();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getInitializingChild().cloneTree();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getInitializingChild().cloneTree();	  Node    irNode    =    node.getInitializingChild();    	non-compiled	[CE]  ')'  expected	46	None	replace
194	[BUG]  [BUGGY]  Node  irNode  =  transformer(node.getParent(),  true);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transformer(node.getParent(),  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transformer(node.getParent(),  true);	  Node    irNode    =    transformer(node,    true);    	non-compiled	[CE]  ')'  expected	15	None	replace
195	[BUG]  [BUGGY]  Node  irNode  =  transform(node.removeFirstChild(),  node);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.removeFirstChild(),  node);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.removeFirstChild(),  node);	  Node    irNode    =    transform(node.removeFirstChild());    	non-compiled	[CE]  ')'  expected	47	None	replace
196	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)-  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK)-  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK)-  1;	  Node    irNode    =    node.transform(Token.BLOCK)+    1;    	non-compiled	[CE]  ')'  expected	45	None	replace
197	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  false,  null,  Token.BLOCK);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  false,  null,  Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  false,  null,  Token.BLOCK);	  Node    irNode    =    transform(node,    false,    null);    	non-compiled	[CE]  ')'  expected	18	None	replace
198	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitParentNode();  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitParentNode();  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitParentNode();	  Node    irNode    =    node.getImplicitPrototype();    	non-compiled	[CE]  ')'  expected	21	None	replace
199	[BUG]  [BUGGY]  Node  irNode  =  node.getImplicitPrototype()  +  1;  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImplicitPrototype()  +  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImplicitPrototype()  +  1;	  Node    irNode    =    node.getImplicitPrototype();    	non-compiled	[CE]  ')'  expected	21	None	replace
200	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.SCRIPT);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.SCRIPT);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.SCRIPT);	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	37	None	replace
201	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK)-  1;  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  Token.BLOCK)-  1;  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  Token.BLOCK)-  1;	  Node    irNode    =    convert(node,    Token.BLOCK);    	non-compiled	[CE]  ')'  expected	37	None	replace
202	[BUG]  [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  0);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  lookup(node,  Token.BLOCK,  0);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  lookup(node,  Token.BLOCK,  0);	  Node    irNode    =    transform(node,    Token.BLOCK,    0);    	non-compiled	[CE]  ')'  expected	38	None	replace
203	[BUG]  [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  SHORT);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(Token.BLOCK,  SHORT);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(Token.BLOCK,  SHORT);	  Node    irNode    =    node.transform(Token.BLOCK,    1);    	non-compiled	[CE]  unclosed  string  literal	24	None	replace
204	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  12);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  12);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  12);	  Node    irNode    =    transform(node,    Token.BLOCK,    1);    	non-compiled	[CE]  ')'  expected	9	None	replace
205	[BUG]  [BUGGY]  Node  irNode  =  node.transform(node.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transform(node.cloneTree());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transform(node.cloneTree());	  Node    irNode    =    node.transform(node.getFirstChild());    	non-compiled	[CE]  ')'  expected	39	None	replace
206	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN,  this);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.ASSIGN,  this);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.ASSIGN,  this);	  Node    irNode    =    node.getAstNode(Token.ASSIGN);    	non-compiled	[CE]  ')'  expected	4	None	replace
207	[BUG]  [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  0);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstNode(Token.BLOCK,  0);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstNode(Token.BLOCK,  0);	  Node    irNode    =    node.getAstNode(Token.BLOCK);    	non-compiled	[CE]  ')'  expected	2	None	replace
208	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  new  AstNode());  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  new  AstNode());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  new  AstNode());	  Node    irNode    =    transform(node,    Token.BLOCK,    null);    	non-compiled	[CE]  	5	None	replace
209	[BUG]  [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.SCRIPT);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getAstRootNode(Token.SCRIPT);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getAstRootNode(Token.SCRIPT);	  Node    irNode    =    node.getAstRootNode();    	non-compiled	[CE]  	27	None	replace
210	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParentNode(parent);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.getImmediateParentNode(parent);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.getImmediateParentNode(parent);	  Node    irNode    =    node.getImmediateParentNode();    	non-compiled	[CE]  	1	None	replace
211	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getAncestor(1));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getAncestor(1));  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getAncestor(1));	  Node    irNode    =    transform(node.getNext());    	non-compiled	[CE]  	13	None	replace
212	[BUG]  [BUGGY]  Node  irNode  =  transform(node.getAncestor(2));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node.getAncestor(2));  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node.getAncestor(2));	  Node    irNode    =    transform(node.getNext());    	non-compiled	[CE]  	13	None	replace
213	[BUG]  [BUGGY]  Node  irNode  =  node.transformTokenType(Token.BLOCK,  false);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformTokenType(Token.BLOCK,  false);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformTokenType(Token.BLOCK,  false);	  Node    irNode    =    node.transform(Token.BLOCK,    false);    	non-compiled	[CE]  	16	None	replace
214	[BUG]  [BUGGY]  Node  irNode  =  convert(node,  true,  Token.BLOCK);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  convert(node,  true,  Token.BLOCK);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  convert(node,  true,  Token.BLOCK);	  Node    irNode    =    transform(node,    false,    Token.BLOCK);    	non-compiled	[CE]  	44	None	replace
215	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  node.toString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  transform(node,  Token.BLOCK,  node.toString());  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  transform(node,  Token.BLOCK,  node.toString());	  Node    irNode    =    transform(node,    Token.BLOCK,    node);    	non-compiled	[CE]  	8	None	replace
216	[BUG]  [BUGGY]  Node  irNode  =  node.transformTokenType(Token.BLOCK,  true);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {      [BUGGY]  Node  irNode  =  node.transformTokenType(Token.BLOCK,  true);  [BUGGY]      if  (!irNode.isBlock())  {  if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	211	211	1	replace	Node  irNode  =  node.transformTokenType(Token.BLOCK,  true);	  Node    irNode    =    node.transform(Token.BLOCK,    true);    	non-compiled	[CE]  	23	None	replace
