bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
2	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
3	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()!=  Token.WARNING)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
4	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.EMPTY)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY)  {	  if(irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
5	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isExtern())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  ||!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isExtern())  {	  if(irNode    ==    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
6	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isAssignmentOp())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  ||!irNode.isAssignmentOp())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isAssignmentOp())  {	  if(irNode    ==    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
7	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isFunction())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  ||!irNode.isFunction())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isFunction())  {	  if(irNode    ==    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
8	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isBlock())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  &&!irNode.isBlock())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isBlock())  {	  if(irNode!=    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
9	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isExtern())  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  ||!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isExtern())  {	  if(irNode!=    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  	9	None	replace
10	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isWasEmptyNode())  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isWasEmptyNode())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isWasEmptyNode())  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
11	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
12	[BUG]  [BUGGY]  if(irNode.isWasEmpty())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.isWasEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmpty())  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
13	[BUG]  [BUGGY]  if(!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	7	None	replace
14	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
15	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isExtern())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isExtern())    {    	non-compiled	[CE]  not  a  statement	14	None	replace
16	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&!irNode.isExtern())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isExtern())    {    	non-compiled	[CE]  not  a  statement	14	None	replace
17	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isEmpty())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isExtern())    {    	non-compiled	[CE]  not  a  statement	14	None	replace
18	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
19	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( "prototype "))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( "prototype "))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
20	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
21	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  node)  {  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
22	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
23	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isEmpty())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  ||!irNode.isEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isEmpty())  {	  if(!irNode.isEmpty())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
24	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isEmpty())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isEmpty())  {	  if(!irNode.isEmpty())    {    	non-compiled	[CE]  not  a  statement	1	None	replace
25	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
26	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
27	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
28	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
29	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isExtern())  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  &&!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isExtern())  {	  if(irNode!=    null    &&!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
30	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isAssignmentOp())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  &&!irNode.isAssignmentOp())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isAssignmentOp())  {	  if(irNode!=    null    &&!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
31	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isBlock())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isBlock())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
32	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isBlock())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isBlock())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  &&!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
33	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isAssignmentOp())  {  [CE]  illegal  start  of  type  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isAssignmentOp())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isAssignmentOp())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
34	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isBlock())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isBlock())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
35	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction())  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
36	[BUG]  [BUGGY]  if(irNode.isFunction())  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.isFunction())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction())  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
37	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
38	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
39	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
40	[BUG]  [BUGGY]  if(irNode.isFunction()  ||!irNode.isFunction())  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.isFunction()  ||!irNode.isFunction())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||!irNode.isFunction())  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
41	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  Node  irNode  =  node.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  Node  irNode  =  node.getFirstChild();  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
43	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  irNode.setLineno(irNode.getLineno());  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setLineno(irNode.getLineno());	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
44	[BUG]  [BUGGY]  Node  irNode  =  transform(irNode);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  Node  irNode  =  transform(irNode);  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  transform(irNode);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
45	[BUG]  [BUGGY]  Node  irNode  =  node.getNext();  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  Node  irNode  =  node.getNext();  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getNext();	      	non-compiled	[CE]  not  a  statement	8	None	replace
46	[BUG]  [BUGGY]  Node  irNode  =  node.getParent();  [CE]  not  a  statement  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  Node  irNode  =  node.getParent();  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getParent();	      	non-compiled	[CE]  not  a  statement	8	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode);  [CE]  not  a  statement  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode);  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  irNode);	      	non-compiled	[CE]  not  a  statement	8	None	replace
48	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this);  [CE]  unclosed  string  literal  [FE]                                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this);  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  this);	      	non-compiled	[CE]  unclosed  string  literal	8	None	replace
49	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
50	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  unclosed  string  literal  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
51	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  unclosed  string  literal  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  unclosed  string  literal	6	None	replace
52	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
53	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
54	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >  1)  {  [CE]  not  a  statement  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >  1)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	6	None	replace
55	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETELEM)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETELEM)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETELEM)  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
56	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
57	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isEmpty())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  ||!irNode.isEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isEmpty())  {	  if(irNode    ==    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
58	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isStatement())  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  ||!irNode.isStatement())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isStatement())  {	  if(irNode    ==    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
59	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.WHOLE)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE)  {	  if(irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
60	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
62	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
63	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  ||!irNode.isFunction())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isFunction())  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
64	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	5	None	replace
65	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isWasEmptyNode())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  ||!irNode.isWasEmptyNode())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isWasEmptyNode())  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
66	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmptyNode())  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmptyNode())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isWasEmptyNode())  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  if(!irNode.isType())  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isType())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isType())  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  Node  irNode  =  irNode.getFirstChild();  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  Node  irNode  =  irNode.getFirstChild();  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  irNode.getFirstChild();	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
69	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  irNode.setType(Token.OBJECTLIT);  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setType(Token.OBJECTLIT);	      	non-compiled	[CE]  illegal  start  of  type	8	None	replace
70	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isName(irNode))  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isName(irNode))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isName(irNode))  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
71	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
72	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
73	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isWasEmpty())  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  ||!irNode.isWasEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isWasEmpty())  {	  if(!irNode.isWasEmpty())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
74	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmpty())  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isWasEmpty())  {	  if(!irNode.isWasEmpty())    {    	non-compiled	[CE]  not  a  statement	4	None	replace
75	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isEmpty())  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	13	None	replace
76	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isAssignmentOp())  {  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  ||!irNode.isAssignmentOp())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isAssignmentOp())  {	  if(irNode!=    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	9	None	replace
77	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isExtern())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isExtern())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
78	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isBlock())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isBlock())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  ||!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
79	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmptyNode())  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmptyNode())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isWasEmptyNode())  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
80	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
81	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isFunction())  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  &&!irNode.isFunction())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isFunction())  {	  if(irNode!=    null    &&!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
82	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isStatement())  {  [CE]  illegal  start  of  type  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  &&!irNode.isStatement())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isStatement())  {	  if(irNode!=    null    &&!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
83	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isConstructor())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  &&!irNode.isConstructor())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isConstructor())  {	  if(irNode!=    null    &&!irNode.isBlock())    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
84	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()!=  Token.NAME)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
85	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
86	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
87	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
88	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isEmpty())  {  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  &&!irNode.isEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isEmpty())  {	  if(!irNode.isEmpty())    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
89	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isLocal())  {  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isLocal())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isExtern())    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
90	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunction())  {  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunction())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunction())  {	  if(!irNode.isFunction())    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
91	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  node  ||!irNode.isBlock())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isBlock())  {	  if(irNode    ==    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
92	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  node  ||!irNode.isBlock())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isBlock())  {	  if(irNode    ==    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
93	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode  ==  null  ||!irNode.isLocal())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isLocal())  {	  if(irNode    ==    null    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
94	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
95	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()!=  Token.GETPROP)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
96	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  not  a  statement	3	None	replace
97	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()!=  node)  {  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
98	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL)  {  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.LABEL)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL)  {	  if(irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  not  a  statement	11	None	replace
99	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK)  {  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()!=  Token.BLOCK)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  not  a  statement	2	None	replace
100	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
101	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmpty())  {  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isWasEmpty())  {	  if(!irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
102	[BUG]  [BUGGY]  Node  irNode  =  irNode.getParent();  [CE]  <identifier>  expected  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  Node  irNode  =  irNode.getParent();  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  irNode.getParent();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
103	[BUG]  [BUGGY]  Node  irNode  =  irNode.getNext();  [CE]  <identifier>  expected  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  Node  irNode  =  irNode.getNext();  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  irNode.getNext();	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
104	[BUG]  [BUGGY]  irNode.removeChild(irNode);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);    [BUGGY]  irNode.removeChild(irNode);  [BUGGY]    if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.removeChild(irNode);	      	non-compiled	[CE]  <identifier>  expected	8	None	replace
