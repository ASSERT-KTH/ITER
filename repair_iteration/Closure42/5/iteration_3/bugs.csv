bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR)  {	  if(irNode.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
2	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isAssignmentOp())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isAssignmentOp())  {	  if(irNode    ==    null    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
3	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isAssignmentOp())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node  ||!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isAssignmentOp())  {	  if(irNode    ==    null    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
4	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.getType()  ==  Token.BLOCK)  {  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.getType()  ==  Token.BLOCK)  {	  if(irNode    ==    null    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  not  a  statement	6	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  node);  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  node);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  node);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  not  a  statement	47	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  errorReporter);  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  errorReporter);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  errorReporter);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  not  a  statement	47	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  this);  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  this);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  this);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  not  a  statement	47	None	replace
8	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  false);  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  false);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  false);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  not  a  statement	47	None	replace
9	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  config);  [CE]  not  a  statement  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  config);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  config);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  not  a  statement	47	None	replace
10	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  true);  [CE]  not  a  statement  [FE]                                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  true);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  true);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  not  a  statement	47	None	replace
11	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  null);  [CE]  not  a  statement  [FE]                                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  null);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  null);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  not  a  statement	47	None	replace
12	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isExtern())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isExtern())  {	  if(irNode!=    null    &&!irNode.isExtern())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
13	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isLocal())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isLocal())  {	  if(irNode!=    null    &&!irNode.isExtern())    {    	non-compiled	[CE]  not  a  statement	29	None	replace
14	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isStatement())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  ||!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isStatement())  {	  if(irNode!=    null    &&!irNode.isStatement())    {    	non-compiled	[CE]  not  a  statement	82	None	replace
15	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isStatement())  {  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isStatement())  {	  if(irNode!=    null    &&!irNode.isStatement())    {    	non-compiled	[CE]  not  a  statement	82	None	replace
16	[BUG]  [BUGGY]  if(irNode!=  node  &&!irNode.isStatement())  {  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  &&!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  &&!irNode.isStatement())  {	  if(irNode!=    null    &&!irNode.isStatement())    {    	non-compiled	[CE]  not  a  statement	82	None	replace
17	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isWasEmptyNode())  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isWasEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isWasEmptyNode())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
18	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isEmptyNode())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isEmptyNode())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
19	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isAssignableFrom(irNode))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isAssignableFrom(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isAssignableFrom(irNode))  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
20	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunctionDeclaration())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunctionDeclaration())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunctionDeclaration())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
21	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isAssignmentOp())  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isAssignmentOp())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	10	None	replace
22	[BUG]  [BUGGY]  if(!irNode.isFunction()  ||  NodeUtil.isAssignmentOp(irNode))  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  ||  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  ||  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
23	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  not  a  statement	64	None	replace
24	[BUG]  [BUGGY]  if(irNode.isFunction()  ||  NodeUtil.isAssignmentOp(irNode))  {  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
25	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isName(irNode))  {  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  NodeUtil.isName(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
26	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isImmutableValue(irNode))  {  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isImmutableValue(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  NodeUtil.isImmutableValue(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
27	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isVarDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isVarDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  NodeUtil.isVarDeclaration(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
28	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
29	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
30	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
31	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
32	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
33	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  not  a  statement	27	None	replace
34	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isWasEmptyNode())  {  [CE]  not  a  statement  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isWasEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isWasEmptyNode())  {	  if(irNode    ==    null    ||!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
35	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isType())  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isType())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isType())  {	  if(irNode    ==    null    ||!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
36	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isEmptyNode())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isEmptyNode())  {	  if(irNode    ==    null    ||!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  not  a  statement	66	None	replace
37	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	84	None	replace
38	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.FUNCTION)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  not  a  statement	84	None	replace
39	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.BLOCK)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
40	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
41	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isEmpty())  {  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isEmpty())  {	  if(irNode!=    null    &&!irNode.isEmpty())    {    	non-compiled	[CE]  not  a  statement	88	None	replace
42	[BUG]  [BUGGY]  if(irNode!=  node  &&!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  &&!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  &&!irNode.isEmpty())  {	  if(irNode!=    null    &&!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	88	None	replace
43	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  &&  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
44	[BUG]  [BUGGY]  if(irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [CE]  not  a  statement  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  not  a  statement	80	None	replace
45	[BUG]  [BUGGY]  if(!irNode.isAssignableFrom(irNode)||  NodeUtil.isFunction(irNode))  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isAssignableFrom(irNode)||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isAssignableFrom(irNode)||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  not  a  statement	80	None	replace
46	[BUG]  [BUGGY]  if(!irNode.isEmpty()  ||  NodeUtil.isFunction(irNode))  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isEmpty()  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isEmpty()  ||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  not  a  statement	80	None	replace
47	[BUG]  [BUGGY]  if(!irNode.isFunction()  ||  NodeUtil.isFunction(irNode))  {  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  ||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  not  a  statement	80	None	replace
48	[BUG]  [BUGGY]  if(!irNode.isAll()  ||  NodeUtil.isFunction(irNode))  {  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isAll()  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isAll()  ||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  not  a  statement	80	None	replace
49	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getChildCount()  >  1)  {  [CE]  not  a  statement  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
50	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  <  1)  {  [CE]  not  a  statement  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  <  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  <  1)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
51	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >  2)  {  [CE]  not  a  statement  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >  2)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >  2)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
52	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getChildCount()  >  1)  {  [CE]  not  a  statement  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
53	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >=  1)  {  [CE]  not  a  statement  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >=  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()  >=  1)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
54	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()!=  1)  {  [CE]  not  a  statement  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()!=  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getChildCount()!=  1)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  not  a  statement	54	None	replace
55	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
56	[BUG]  [BUGGY]  if(!irNode.isEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
57	[BUG]  [BUGGY]  if(irNode.isWasEmpty()  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isWasEmpty()  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmpty()  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
58	[BUG]  [BUGGY]  if(!irNode.isAssignableFrom(irNode)&&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isAssignableFrom(irNode)&&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isAssignableFrom(irNode)&&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
59	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  &&  irNode.getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  &&  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  &&  irNode.getType()!=  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
60	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  ||  irNode.getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  ||  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  ||  irNode.getType()!=  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
61	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
62	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmptyNode())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmptyNode())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
63	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
64	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isAssignmentOp())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isAssignmentOp())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
65	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isAssignableFrom(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isAssignableFrom(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isAssignableFrom(irNode))  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
66	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isSyntheticBlock())  {  [CE]  not  a  statement  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isSyntheticBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isSyntheticBlock())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	34	None	replace
67	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isExtern())  {  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isBlock())    {    	non-compiled	[CE]  not  a  statement	31	None	replace
68	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isFunction())  {	  if(irNode!=    null    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
69	[BUG]  [BUGGY]  if(irNode!=  node  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  &&!irNode.isFunction())  {	  if(irNode!=    null    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
70	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isWasEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isWasEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isWasEmpty())  {	  if(irNode!=    null    &&!irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
71	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isType())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isType())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isType())  {	  if(irNode!=    null    &&!irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	101	None	replace
72	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isEmpty())  {	  if(irNode    ==    node    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
73	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node  ||!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isExtern())  {	  if(irNode    ==    node    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
74	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isLocal())  {	  if(irNode    ==    node    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
75	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  &&!irNode.isEmpty())  {	  if(irNode.getType()!=    Token.BLOCK    &&!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	16	None	replace
76	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  NodeUtil.isFunctionDeclaration(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
77	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
78	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(irNode))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isExpressionNode(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
79	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isVarDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isVarDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isVarDeclaration(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
80	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isStatementBlock(irNode))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isStatementBlock(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isStatementBlock(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
81	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isLocal())  {	  if(irNode!=    null    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
82	[BUG]  [BUGGY]  if(irNode.isType())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isType())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isType())  {	  if(!irNode.isType())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
83	[BUG]  [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isType()  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(!irNode.isType())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
84	[BUG]  [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isFunctionAnonymous(irNode))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isFunctionAnonymous(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isType()  &&  NodeUtil.isFunctionAnonymous(irNode))  {	  if(!irNode.isType())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
85	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isType())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isType())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isType())  {	  if(!irNode.isType())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
86	[BUG]  [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isType()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isType())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
87	[BUG]  [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isFunctionDeclaration(node))  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isFunctionDeclaration(node))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isType()  &&  NodeUtil.isFunctionDeclaration(node))  {	  if(!irNode.isType())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
88	[BUG]  [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isName(irNode.getString()))  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isType()  &&  NodeUtil.isName(irNode.getString()))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isType()  &&  NodeUtil.isName(irNode.getString()))  {	  if(!irNode.isType())    {    	non-compiled	[CE]  <identifier>  expected	67	None	replace
89	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isLocal())  {	  if(irNode    ==    null    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
90	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isGlobal())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isGlobal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isGlobal())  {	  if(irNode    ==    null    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
91	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.BLOCK    &&!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
92	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.BLOCK    &&!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	15	None	replace
93	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.GETELEM)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.GETELEM)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.GETELEM)  {	  if(irNode.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
94	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
95	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
96	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
97	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETELEM)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETELEM)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETELEM)  {	  if(irNode.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
98	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  node.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
99	[BUG]  [BUGGY]  if(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(node.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
100	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  node.getType()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
101	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  node.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  node.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  node.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
102	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  node.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
103	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
104	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()!=  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
105	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
106	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
107	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.EMPTY)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
108	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
109	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  ||!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
110	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  &&!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
111	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
112	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
113	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
114	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.VAR)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
115	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
116	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isExpressionNode(irNode))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isExpressionNode(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isExpressionNode(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
117	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isVarDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isVarDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isVarDeclaration(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
118	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isName(irNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isName(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
119	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isStatementBlock(irNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isStatementBlock(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isStatementBlock(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
120	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isImmutableValue(irNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isImmutableValue(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isImmutableValue(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
121	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isConstructor())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isConstructor())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isConstructor())  {	  if(irNode    ==    null    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
122	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isConstructor())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  ||!irNode.isConstructor())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isConstructor())  {	  if(irNode!=    null    &&!irNode.isConstructor())    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
123	[BUG]  [BUGGY]  if(irNode  ==  null  &&!irNode.isConstructor())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  &&!irNode.isConstructor())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  &&!irNode.isConstructor())  {	  if(irNode!=    null    &&!irNode.isConstructor())    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
124	[BUG]  [BUGGY]  if(irNode!=  node  &&!irNode.isConstructor())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  &&!irNode.isConstructor())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  &&!irNode.isConstructor())  {	  if(irNode!=    null    &&!irNode.isConstructor())    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
125	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getLastChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getLastChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&  irNode.getLastChild()!=  node)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
126	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
127	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
128	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  node.getFirstChild()!=  irNode)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  node.getFirstChild()!=  irNode)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&  node.getFirstChild()!=  irNode)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
129	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()!=  null)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()!=  null)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()!=  null)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
130	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
131	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  ||!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
132	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
133	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isStatement())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isStatement())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
134	[BUG]  [BUGGY]  Node  irNode  =  node.getLastChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.getLastChild();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getLastChild();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
135	[BUG]  [BUGGY]  Node  irNode  =  parent.getParent();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  parent.getParent();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  parent.getParent();	  Node    irNode    =    irNode.getParent();    	non-compiled	[CE]  <identifier>  expected	102	None	replace
136	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  NodeUtil.isName(irNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  NodeUtil.isName(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
137	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isFunction(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
138	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  NodeUtil.isName(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  NodeUtil.isName(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
139	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isVar(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isVar(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isVar(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
140	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isName(irNode)||  NodeUtil.isName(irNode))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isName(irNode)||  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isName(irNode)||  NodeUtil.isName(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
141	[BUG]  [BUGGY]  if(irNode.isFunction()  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  &&!irNode.isFunction())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
142	[BUG]  [BUGGY]  if(irNode.isConstructor()  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isConstructor()  ||!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isConstructor()  ||!irNode.isFunction())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
143	[BUG]  [BUGGY]  if(irNode.isType()  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isType()  ||!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isType()  ||!irNode.isFunction())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
144	[BUG]  [BUGGY]  if(irNode.isFunction()  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||!irNode.isExtern())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
145	[BUG]  [BUGGY]  if(irNode.isFunction()  ||!irNode.isImplicitPrototype())  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||!irNode.isImplicitPrototype())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||!irNode.isImplicitPrototype())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
146	[BUG]  [BUGGY]  if(irNode.isFunction()  ||!irNode.isStatement())  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||!irNode.isStatement())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
147	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLineno()  +  1);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setLineno(irNode.getLineno()  +  1);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setLineno(irNode.getLineno()  +  1);	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
148	[BUG]  [BUGGY]  irNode.setLineno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setLineno(irNode.getCharno());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setLineno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
149	[BUG]  [BUGGY]  irNode.setLineno(irNode.getLowerCase());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setLineno(irNode.getLowerCase());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setLineno(irNode.getLowerCase());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
150	[BUG]  [BUGGY]  irNode.setCharno(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setCharno(irNode.getLineno());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setCharno(irNode.getLineno());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
151	[BUG]  [BUGGY]  Node.setLineno(irNode.getLineno());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node.setLineno(irNode.getLineno());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node.setLineno(irNode.getLineno());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
152	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
153	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	17	None	replace
154	[BUG]  [BUGGY]  if(irNode!=  node  &&!irNode.isAssignmentOp())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  &&!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  &&!irNode.isAssignmentOp())  {	  if(irNode!=    null    &&!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	30	None	replace
155	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getChildCount());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setChildCount(irNode.getChildCount());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setChildCount(irNode.getChildCount());	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
156	[BUG]  [BUGGY]  irNode.addChildToFront(irNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.addChildToFront(irNode);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.addChildToFront(irNode);	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
157	[BUG]  [BUGGY]  irNode.removeChild(node);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.removeChild(node);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.removeChild(node);	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
158	[BUG]  [BUGGY]  irNode.addChildToBack(irNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.addChildToBack(irNode);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.addChildToBack(irNode);	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
159	[BUG]  [BUGGY]  irNode.setChildrenToFront(irNode);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setChildrenToFront(irNode);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setChildrenToFront(irNode);	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
160	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParent();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.getImmediateParent();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getImmediateParent();	  Node    irNode    =    node.getParent();    	non-compiled	[CE]  <identifier>  expected	46	None	replace
161	[BUG]  [BUGGY]  Node  irNode  =  irNode.getLastChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  irNode.getLastChild();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  irNode.getLastChild();	  Node    irNode    =    irNode.getNext();    	non-compiled	[CE]  <identifier>  expected	103	None	replace
162	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isAssignmentOp())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  &&!irNode.isAssignmentOp())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
163	[BUG]  [BUGGY]  if(!irNode.isWasEmptyNode()  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmptyNode()  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmptyNode()  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
164	[BUG]  [BUGGY]  if(irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
165	[BUG]  [BUGGY]  if(!irNode.isWasEmptyNode()  &&  irNode.getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmptyNode()  &&  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmptyNode()  &&  irNode.getType()!=  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
166	[BUG]  [BUGGY]  if(irNode.isWasEmptyNode()  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isWasEmptyNode()  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmptyNode()  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
167	[BUG]  [BUGGY]  if(!irNode.isWasEmptyNode()  ||  irNode.getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmptyNode()  ||  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmptyNode()  ||  irNode.getType()!=  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
168	[BUG]  [BUGGY]  if(!irNode.isEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
169	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
170	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
171	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
172	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
173	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
174	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.EXPR_RESULT)  {	  if(irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
175	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()!=  Token.BLOCK)  {	  if(irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
176	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.EXPR_RESULT  ||  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
177	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
178	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
179	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
180	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
181	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  &&!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  &&!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.WHOLE    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
182	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WHOLE  &&!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WHOLE  &&!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WHOLE  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.WHOLE    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
183	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.WHOLE    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
184	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
185	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
186	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
187	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
188	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.OBJECTLIT  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.OBJECTLIT  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.OBJECTLIT  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
189	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
190	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
191	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getLastChild().getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getLastChild().getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
192	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getLastChild().getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  node.getLastChild().getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
193	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild().getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild().getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild().getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
194	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.GETPROP    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
195	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.GETPROP    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
196	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.SETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.SETPROP  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.GETPROP    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
197	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.GETPROP    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	22	None	replace
198	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
199	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
200	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
201	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.STRING  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.STRING  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.STRING  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
202	[BUG]  [BUGGY]  if(!irNode.isFunction()  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
203	[BUG]  [BUGGY]  if(irNode.isFunction()  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
204	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
205	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  irNode.getType()!=  Token.BLOCK)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
206	[BUG]  [BUGGY]  if(irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
207	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isEmptyNode())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isEmptyNode())  {	  if(irNode!=    null    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
208	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild()!=  node)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
209	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
210	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  null)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  null)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  null)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
211	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
212	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  irNode)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  irNode)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  node.getFirstChild()!=  irNode)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
213	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
214	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isAssignableFrom(irNode))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isAssignableFrom(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isAssignableFrom(irNode))  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
215	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
216	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
217	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
218	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
219	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()!=  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
220	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
221	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.EMPTY)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
222	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
223	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
224	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
225	[BUG]  [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.getImmediateParentNode();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getImmediateParentNode();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
226	[BUG]  [BUGGY]  Node  irNode  =  node.getPrevious();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.getPrevious();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getPrevious();	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
227	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
228	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild().getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
229	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getLastChild().getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
230	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
231	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()!=  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()!=  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild().getType()!=  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  this);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  null);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  null);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  null);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  errorReporter);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  errorReporter);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  errorReporter);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  node);  [CE]  <identifier>  expected  [FE]                                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  node);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  node);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  errorReporter);  [CE]  <identifier>  expected  [FE]                                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  errorReporter);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  errorReporter);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  fileOverviewInfo);  [CE]  <identifier>  expected  [FE]                                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  fileOverviewInfo);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  fileOverviewInfo);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  false);  [CE]  <identifier>  expected  [FE]                                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  false);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  false);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
239	[BUG]  [BUGGY]  if(!irNode.isFunction()  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
240	[BUG]  [BUGGY]  if(irNode.isFunction()  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
241	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
242	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  irNode.getType()!=  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
243	[BUG]  [BUGGY]  if(irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
244	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
245	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
246	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
247	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EMPTY)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EMPTY)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.EMPTY)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
248	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
249	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getType()  ==  Token.VAR)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
250	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
251	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
252	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
253	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
254	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
255	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.EMPTY)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.EMPTY)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.EMPTY)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
256	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
257	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
258	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.STRING)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.STRING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.STRING)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
259	[BUG]  [BUGGY]  Node  irNode  =  parent.getFirstChild();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  parent.getFirstChild();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  parent.getFirstChild();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
260	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
261	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
262	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
263	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()!=  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
264	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
265	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.FUNCTION  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.FUNCTION  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.FUNCTION  &&!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
266	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.FUNCTION  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.FUNCTION  ||!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.FUNCTION  ||!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
267	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.isFunction())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
268	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
269	[BUG]  [BUGGY]  if(!irNode.isFunction()  ||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  ||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  ||  node.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
270	[BUG]  [BUGGY]  if(irNode.isFunction()  ||  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||  node.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
271	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
272	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  node.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  node.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  node.getType()!=  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
273	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isType())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  ||!irNode.isType())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isType())  {	  if(irNode!=    null    ||!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
274	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
275	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getLastChild()!=  node)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
276	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
277	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
278	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  null)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  null)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()!=  null)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
279	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
280	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
281	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
282	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
283	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  ||  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  ||  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  ||  NodeUtil.isFunctionDeclaration(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
284	[BUG]  [BUGGY]  if(irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
285	[BUG]  [BUGGY]  if(!irNode.isEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
286	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
287	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isVarDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isVarDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  &&  NodeUtil.isVarDeclaration(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
288	[BUG]  [BUGGY]  if(!irNode.isAll()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isAll()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isAll()  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
289	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
290	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
291	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
292	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()!=  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()!=  Token.NAME)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
293	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
294	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
295	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  &&  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
296	[BUG]  [BUGGY]  if(irNode.getType()  >=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  >=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  >=  Token.GETPROP)  {	  if(irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
297	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SETPROP)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.SETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.SETPROP)  {	  if(irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
298	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  <  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  <  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  <  1)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
299	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  2)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  2)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >  2)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
300	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  irNode.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
301	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >=  1)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >=  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()  >=  1)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
302	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getChildCount()  >  1)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
303	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()!=  1)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()!=  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getChildCount()!=  1)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
304	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(1);  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.getAncestor(1);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getAncestor(1);	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
305	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.WARNING    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
306	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.WARNING    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
307	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  &&!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	75	None	replace
308	[BUG]  [BUGGY]  if(irNode!=  node  &&!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  &&!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  &&!irNode.isBlock())  {	  if(irNode!=    node    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
309	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isEmpty())  {	  if(irNode!=    node    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	92	None	replace
310	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  ||!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isFunction())  {	  if(irNode!=    null    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	63	None	replace
311	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isAssignableFrom(irNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isAssignableFrom(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isAssignableFrom(irNode))  {	  if(irNode    ==    null    ||!irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
312	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
313	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
314	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  &&  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
315	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETELEM)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETELEM)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.GETELEM)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
316	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getLastChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
317	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()!=  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
318	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
319	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
320	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  node.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
321	[BUG]  [BUGGY]  if(irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isEmpty())  {	  if(irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
322	[BUG]  [BUGGY]  if(irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
323	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT,  irNode);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setType(Token.OBJECTLIT,  irNode);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setType(Token.OBJECTLIT,  irNode);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
324	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT,  node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setType(Token.OBJECTLIT,  node);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setType(Token.OBJECTLIT,  node);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
325	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.NAME);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.NAME);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setType(Token.OBJECTLIT  |  Token.NAME);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
326	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT,  null);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setType(Token.OBJECTLIT,  null);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setType(Token.OBJECTLIT,  null);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
327	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
328	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
329	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  &&!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
330	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
331	[BUG]  [BUGGY]  Node  irNode  =  transform(node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  transform(node);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  transform(node);	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
332	[BUG]  [BUGGY]  Node  irNode  =  node.transform(irNode);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.transform(irNode);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.transform(irNode);	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
333	[BUG]  [BUGGY]  Node  irNode  =  node.removeFirstChild();  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.removeFirstChild();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.removeFirstChild();	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
334	[BUG]  [BUGGY]  Node  irNode  =  transform(node,  irNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  transform(node,  irNode);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  transform(node,  irNode);	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
335	[BUG]  [BUGGY]  if(irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {	  if(irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
336	[BUG]  [BUGGY]  if(irNode.isFunction()  &&  node.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  &&  node.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  &&  node.getType()  ==  Token.BLOCK)  {	  if(irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
337	[BUG]  [BUGGY]  if(irNode.isFunction()  &&  node.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  &&  node.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  &&  node.getType()  ==  Token.NAME)  {	  if(irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
338	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  irNode.getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
339	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( ".prototype "))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( ".prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( ".prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
340	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  irNode.getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
341	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  node.getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
342	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  NodeUtil.isAssignmentOp(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
343	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
344	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunctionAssignmentOp(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
345	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
346	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getLastChild().getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
347	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  irNode.getType()  ==  Token.WARNING)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
348	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isGlobal())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  ||!irNode.isGlobal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isGlobal())  {	  if(irNode    ==    null    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
349	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  irNode.getFirstChild()  ==  node)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
350	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  irNode)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  irNode)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  node.getFirstChild()!=  irNode)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	85	None	replace
351	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
352	[BUG]  [BUGGY]  Node  irNode  =  node.cloneTree();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.cloneTree();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.cloneTree();	  Node    irNode    =    node.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	42	None	replace
353	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()  ==  node)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()  ==  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&  irNode.getFirstChild()  ==  node)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
354	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getFirstChild()  ==  node)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getFirstChild()  ==  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  &&  irNode.getFirstChild()  ==  node)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
355	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getChildCount()  >  1)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  node.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  node.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	96	None	replace
356	[BUG]  [BUGGY]  if(irNode!=  null  ||  irNode.getType()!=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  ||  irNode.getType()!=  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||  irNode.getType()!=  Token.NAME)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
357	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
358	[BUG]  [BUGGY]  if(irNode.getType()  >=  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  >=  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  >=  Token.NAME)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
359	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
360	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
361	[BUG]  [BUGGY]  irNode.replaceChild(irNode,  new  Node(Token.EMPTY));  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.replaceChild(irNode,  new  Node(Token.EMPTY));  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.replaceChild(irNode,  new  Node(Token.EMPTY));	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
362	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getChildCount()  +  1);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setChildCount(irNode.getChildCount()  +  1);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setChildCount(irNode.getChildCount()  +  1);	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
363	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isEmptyNode())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  ||!irNode.isEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isEmptyNode())  {	  if(irNode    ==    null    ||!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
364	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||!irNode.isEmpty())  {	  if(irNode.getType()!=    Token.BLOCK    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	61	None	replace
365	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
366	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  ||  node.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
367	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.STRING)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.STRING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.STRING)  {	  if(irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
368	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.isWasEmpty())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.isWasEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.isWasEmpty())  {	  if(irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
369	[BUG]  [BUGGY]  if(irNode.isWasEmpty()  ||  node.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isWasEmpty()  ||  node.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmpty()  ||  node.getType()  ==  Token.BLOCK)  {	  if(irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
370	[BUG]  [BUGGY]  if(irNode.isWasEmpty()  ||  node.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isWasEmpty()  ||  node.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isWasEmpty()  ||  node.getType()  ==  Token.GETPROP)  {	  if(irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
371	[BUG]  [BUGGY]  if(irNode.isFunction()  ||  node.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||  node.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||  node.getType()  ==  Token.NAME)  {	  if(irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
372	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  node.isFunction())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  node.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  node.isFunction())  {	  if(irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
373	[BUG]  [BUGGY]  if(irNode.isFunction()  ||  node.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||  node.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||  node.getType()  ==  Token.GETPROP)  {	  if(irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
374	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()  ==  node)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()  ==  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()  ==  node)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
375	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild()  ==  node)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild()  ==  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.GETPROP  &&  irNode.getFirstChild()  ==  node)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
376	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isName(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  &&  NodeUtil.isName(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
377	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isVar(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  &&  NodeUtil.isVar(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  &&  NodeUtil.isVar(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
378	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
379	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isWasEmptyNode(irNode))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isWasEmptyNode(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isWasEmptyNode(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
380	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  ||  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  ||  NodeUtil.isFunctionDeclaration(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	18	None	replace
381	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  &&!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  &&!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
382	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isEmpty())    {    	non-compiled	[CE]  <identifier>  expected	24	None	replace
383	[BUG]  [BUGGY]  if(irNode!=  null  ||!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  ||!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  ||!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
384	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
385	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  ||  NodeUtil.isName(irNode))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  ||  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  ||  NodeUtil.isName(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
386	[BUG]  [BUGGY]  irNode.setSourceFile(irNode.getSourceFile());  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setSourceFile(irNode.getSourceFile());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setSourceFile(irNode.getSourceFile());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
387	[BUG]  [BUGGY]  irNode.setSourceName(irNode.getSourceName());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setSourceName(irNode.getSourceName());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setSourceName(irNode.getSourceName());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
388	[BUG]  [BUGGY]  irNode.setCharno(irNode.getCharno());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setCharno(irNode.getCharno());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setCharno(irNode.getCharno());	  irNode.setLineno(irNode.getLineno());    	non-compiled	[CE]  <identifier>  expected	43	None	replace
389	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||!irNode.isAssignmentOp())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||!irNode.isAssignmentOp())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
390	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isAssignmentOp())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isAssignmentOp())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
391	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunctionPrototype())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunctionPrototype())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunctionPrototype())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  fileOverviewInfo);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  irNode,  fileOverviewInfo);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  irNode,  fileOverviewInfo);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
393	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  node.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    node.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	72	None	replace
394	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  node.getChildCount()  >  1)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  node.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  node.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
395	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETELEM)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETELEM)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.GETELEM)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
396	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isStatement())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node  ||!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isStatement())  {	  if(irNode    ==    null    ||!irNode.isStatement())    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
397	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
398	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
399	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isBlock())  {	  if(irNode.getType()!=    Token.VAR    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	78	None	replace
400	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  node.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  node.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||  node.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
401	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.LABEL)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.LABEL)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.LABEL)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
402	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()!=  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()!=  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
403	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||  irNode.getType()  ==  Token.BLOCK  ||!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
404	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
405	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmpty())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmpty())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
406	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isEmpty(irNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isEmpty(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isEmpty(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
407	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  NodeUtil.isName(irNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  NodeUtil.isName(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
408	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWrapped(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWrapped(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWrapped(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
409	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  NodeUtil.isFunction(irNode))  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
410	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  node.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
411	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	1	None	replace
412	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	28	None	replace
413	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.FUNCTION)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
414	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  NodeUtil.isFunction(irNode))  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
415	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isInitializingDeclaration())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isInitializingDeclaration())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isInitializingDeclaration())  {	  if(irNode    ==    null    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
416	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WHOLE)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WHOLE)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WHOLE)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
417	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  node.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  node.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||  node.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
418	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  node.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  ||  node.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  ||  node.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
419	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( "prototype ")||  irNode.getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( "prototype ")||  irNode.getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getString().equals( "prototype ")||  irNode.getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
420	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWasEmptyNode(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWasEmptyNode(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWasEmptyNode(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
421	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isInitializingFunction())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isInitializingFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isInitializingFunction())  {	  if(irNode    ==    null    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
422	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
423	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.mayHaveSideEffects(irNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.mayHaveSideEffects(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  NodeUtil.mayHaveSideEffects(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
424	[BUG]  [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isWasEmptyNode(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isFunction()  &&  NodeUtil.isWasEmptyNode(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isFunction()  &&  NodeUtil.isWasEmptyNode(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
425	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isFunction(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
426	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(irNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.mayHaveSideEffects(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
427	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode)||  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode)||  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  NodeUtil.isAssignmentOp(irNode)||  NodeUtil.isAssignmentOp(irNode))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	56	None	replace
428	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  &&!irNode.isBlock())  {	  if(irNode.getType()!=    Token.VAR    &&!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	32	None	replace
429	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WARNING  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WARNING  ||!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
430	[BUG]  [BUGGY]  Node  irNode  =  transform(irNode,  node);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  transform(irNode,  node);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  transform(irNode,  node);	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
431	[BUG]  [BUGGY]  Node  irNode  =  transform(irNode.cloneTree());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  transform(irNode.cloneTree());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  transform(irNode.cloneTree());	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
432	[BUG]  [BUGGY]  Node  irNode  =  transform(irNode,  false);  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  transform(irNode,  false);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  transform(irNode,  false);	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
433	[BUG]  [BUGGY]  Node  irNode  =  transform(irNode.getFirstChild());  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  transform(irNode.getFirstChild());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  transform(irNode.getFirstChild());	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
434	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.ERROR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.ERROR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.ERROR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
435	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	27	None	replace
436	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isEmpty())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
437	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isConstructor())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isConstructor())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isConstructor())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
438	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isStatement())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isStatement())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
439	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
440	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.SETPROP)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.SETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.SETPROP)  {	  if(irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	95	None	replace
441	[BUG]  [BUGGY]  if(irNode.isFunction()  ||!irNode.isEmpty())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||!irNode.isEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||!irNode.isEmpty())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
442	[BUG]  [BUGGY]  if(irNode.isFunction()  ||!irNode.isConstructor())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||!irNode.isConstructor())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||!irNode.isConstructor())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
443	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isWasEmptyNode())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isWasEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&!irNode.isWasEmptyNode())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
444	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  node.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
445	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
446	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  node.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
447	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT,  Node.newString(Token.NAME));  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setType(Token.OBJECTLIT,  Node.newString(Token.NAME));  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setType(Token.OBJECTLIT,  Node.newString(Token.NAME));	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
448	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  &&!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  &&!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  &&!irNode.isFunction())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	90	None	replace
449	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.GETPROP)  {	  if(irNode.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
450	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&  irNode.getFirstChild()  ==  node)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  &&  irNode.getFirstChild()  ==  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  &&  irNode.getFirstChild()  ==  node)  {	  if(irNode.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
451	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.VAR)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.VAR)  {	  if(irNode.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
452	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||  irNode.getType()!=  Token.FUNCTION)  {	  if(irNode.getType()!=    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	99	None	replace
453	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
454	[BUG]  [BUGGY]  if(irNode.getFirstChild().getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getFirstChild().getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getFirstChild().getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	87	None	replace
455	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  ||!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isExtern())  {	  if(irNode!=    null    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	9	None	replace
456	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isAssignmentOp())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  ||!irNode.isAssignmentOp())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
457	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunctionDeclaration())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunctionDeclaration())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||!irNode.isFunctionDeclaration())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	33	None	replace
458	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	19	None	replace
459	[BUG]  [BUGGY]  if(irNode.isExtern()  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isExtern()  ||!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isExtern()  ||!irNode.isFunction())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
460	[BUG]  [BUGGY]  if(irNode.isFunction()  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||!irNode.isLocal())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
461	[BUG]  [BUGGY]  if(irNode.isFunction()  ||!irNode.isSyntheticBlock())  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||!irNode.isSyntheticBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||!irNode.isSyntheticBlock())  {	  if(irNode.isFunction()    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	40	None	replace
462	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
463	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isFunction()  &&  node.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    node.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	37	None	replace
464	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isWasEmptyNode())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  ||!irNode.isWasEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isWasEmptyNode())  {	  if(irNode!=    null    ||!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	65	None	replace
465	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  ||!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  ||!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.VAR    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	77	None	replace
466	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isWasEmptyNode())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.VAR  &&!irNode.isWasEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.VAR  &&!irNode.isWasEmptyNode())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	10	None	replace
467	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isStatement())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  ||!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isStatement())  {	  if(irNode    ==    null    ||!irNode.isStatement())    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
468	[BUG]  [BUGGY]  if(irNode  >=  null  ||!irNode.isStatement())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  >=  null  ||!irNode.isStatement())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  >=  null  ||!irNode.isStatement())  {	  if(irNode    ==    null    ||!irNode.isStatement())    {    	non-compiled	[CE]  <identifier>  expected	58	None	replace
469	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(irNode!=    null    &&!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	81	None	replace
470	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isExpressionNode())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isExpressionNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||!irNode.isExpressionNode())  {	  if(irNode.getType()    ==    Token.FUNCTION    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	35	None	replace
471	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.VAR)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
472	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.SCRIPT)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.SCRIPT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EMPTY  ||  irNode.getType()  ==  Token.SCRIPT)  {	  if(irNode.getType()    ==    Token.EMPTY)    {    	non-compiled	[CE]  <identifier>  expected	4	None	replace
473	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	52	None	replace
474	[BUG]  [BUGGY]  Node  irNode  =  irNode.cloneTree();  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  irNode.cloneTree();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  irNode.cloneTree();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
475	[BUG]  [BUGGY]  Node  irNode  =  irNode.removeFirstChild();  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  irNode.removeFirstChild();  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  irNode.removeFirstChild();	  Node    irNode    =    irNode.getFirstChild();    	non-compiled	[CE]  <identifier>  expected	68	None	replace
476	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.SETELEM)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.SETELEM)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETELEM  ||  irNode.getType()  ==  Token.SETELEM)  {	  if(irNode.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  <identifier>  expected	55	None	replace
477	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
478	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FUNCTION  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	39	None	replace
479	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isWasEmpty()  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(!irNode.isWasEmpty()    &&    NodeUtil.isFunctionDeclaration(irNode))    {    	non-compiled	[CE]  <identifier>  expected	11	None	replace
480	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()!=  Token.WARNING)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
481	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()!=  Token.THIS)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	2	None	replace
482	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
483	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isWasEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
484	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isEmpty()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmpty()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	14	None	replace
485	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
486	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
487	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||!irNode.isWasEmptyNode()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isWasEmptyNode()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	13	None	replace
488	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWasEmpty(irNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWasEmpty(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isWasEmpty(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
489	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  NodeUtil.isName(irNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&  NodeUtil.isName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&  NodeUtil.isName(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
490	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isLabelName(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isLabelName(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  &&  NodeUtil.isLabelName(irNode))  {	  if(irNode.getType()    ==    Token.NAME    &&    NodeUtil.isName(irNode))    {    	non-compiled	[CE]  <identifier>  expected	70	None	replace
491	[BUG]  [BUGGY]  Node  irNode  =  transform(irNode,  null);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  transform(irNode,  null);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  transform(irNode,  null);	  Node    irNode    =    transform(irNode);    	non-compiled	[CE]  <identifier>  expected	44	None	replace
492	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isFunctionPrototype())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isFunctionPrototype())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isFunctionPrototype())  {	  if(irNode!=    null    &&!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	79	None	replace
493	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	50	None	replace
494	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.WARNING    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	97	None	replace
495	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.NAME)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.NAME)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getType()  ==  Token.NAME)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
496	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.LABEL)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.LABEL)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.LABEL)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
497	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BOOLEAN)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BOOLEAN)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.BOOLEAN)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	53	None	replace
498	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||!irNode.isBlock())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.BLOCK  ||!irNode.isBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.BLOCK  ||!irNode.isBlock())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	34	None	replace
499	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.THIS)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
500	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()!=  Token.BLOCK)  {	  if(irNode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  <identifier>  expected	84	None	replace
501	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isAssignmentOp())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  ||!irNode.isAssignmentOp())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isAssignmentOp())  {	  if(irNode    ==    null    ||!irNode.isAssignmentOp())    {    	non-compiled	[CE]  <identifier>  expected	6	None	replace
502	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
503	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  &&  irNode.getChildCount()  >  1)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.WHOLE  &&  irNode.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.WHOLE  &&  irNode.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.WHOLE)    {    	non-compiled	[CE]  <identifier>  expected	59	None	replace
504	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getFirstChild());  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setChildCount(irNode.getFirstChild());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setChildCount(irNode.getFirstChild());	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
505	[BUG]  [BUGGY]  irNode.setChildCount(irNode.getLastChild());  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setChildCount(irNode.getLastChild());  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setChildCount(irNode.getLastChild());	  irNode.removeChild(irNode);    	non-compiled	[CE]  <identifier>  expected	104	None	replace
506	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getChildCount()  >  1)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  &&  irNode.getChildCount()  >  1)  {	  if(irNode.getType()    ==    Token.NAME    &&    irNode.getChildCount()    >    1)    {    	non-compiled	[CE]  <identifier>  expected	54	None	replace
507	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isConstructor()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isConstructor()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isConstructor()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(irNode!=    null    &&!irNode.isConstructor())    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
508	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isConstructor()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isConstructor()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isConstructor()  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(irNode!=    null    &&!irNode.isConstructor())    {    	non-compiled	[CE]  <identifier>  expected	83	None	replace
509	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.EXPR_RESULT)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
510	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getType()  ==  Token.FUNCTION)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	51	None	replace
511	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
512	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.FUNCTION)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  <identifier>  expected	38	None	replace
513	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getFirstChild()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
514	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getString()!=  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.NAME  ||  irNode.getString()!=  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.NAME  ||  irNode.getString()!=  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	71	None	replace
515	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isWasEmptyNode())  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node  ||!irNode.isWasEmptyNode())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isWasEmptyNode())  {	  if(irNode    ==    null    ||!irNode.isWasEmptyNode())    {    	non-compiled	[CE]  <identifier>  expected	66	None	replace
516	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isLocal())  {	  if(irNode    ==    null    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	93	None	replace
517	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isWasEmpty()  ||  NodeUtil.isFunction(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
518	[BUG]  [BUGGY]  if(!irNode.isWasEmpty()  ||  NodeUtil.isVar(irNode))  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(!irNode.isWasEmpty()  ||  NodeUtil.isVar(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(!irNode.isWasEmpty()  ||  NodeUtil.isVar(irNode))  {	  if(!irNode.isWasEmpty()    ||    NodeUtil.isFunction(irNode))    {    	non-compiled	[CE]  <identifier>  expected	80	None	replace
519	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  ||!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  ||!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.WARNING    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	60	None	replace
520	[BUG]  [BUGGY]  if(irNode  ==  node)  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node)  {	  if(irNode    ==    node    ||!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	91	None	replace
521	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
522	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isFunction()  &&  irNode.getType()  ==  Token.BLOCK)  {	  if(!irNode.isFunction()    &&    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	41	None	replace
523	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.VAR);  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.VAR);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setType(Token.OBJECTLIT  |  Token.VAR);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
524	[BUG]  [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.BLOCK);  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  irNode.setType(Token.OBJECTLIT  |  Token.BLOCK);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	irNode.setType(Token.OBJECTLIT  |  Token.BLOCK);	  irNode.setType(Token.OBJECTLIT);    	non-compiled	[CE]  <identifier>  expected	69	None	replace
525	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  null);  [CE]  <identifier>  expected  [FE]                                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  null);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  null);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  false);  [CE]  <identifier>  expected  [FE]                                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  false);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  false);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
527	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder);  [CE]  <identifier>  expected  [FE]                                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  irNode,  this,  fileLevelJsDocBuilder);	  NodeTraversal.traverse(compiler,    irNode,    this);    	non-compiled	[CE]  <identifier>  expected	48	None	replace
528	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                          AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
529	[BUG]  [BUGGY]  if(irNode.getFirstChild().getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getFirstChild().getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getFirstChild().getType()  ==  Token.NAME  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
530	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.BLOCK  ||  irNode.getFirstChild().getType()  ==  Token.THIS)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getFirstChild().getType()    ==    Token.THIS)    {    	non-compiled	[CE]  <identifier>  expected	86	None	replace
531	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isWasEmpty())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node  ||!irNode.isWasEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isWasEmpty())  {	  if(irNode    ==    null    ||!irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
532	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isAll())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isAll())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isAll())  {	  if(irNode    ==    null    ||!irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	74	None	replace
533	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.isWasEmpty())  {  [CE]  <identifier>  expected  [FE]                            AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.isWasEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&  irNode.isWasEmpty())  {	  if(irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
534	[BUG]  [BUGGY]  if(irNode  ==  null  ||  irNode.isWasEmpty())  {  [CE]  <identifier>  expected  [FE]                              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||  irNode.isWasEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||  irNode.isWasEmpty())  {	  if(irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	12	None	replace
535	[BUG]  [BUGGY]  if(irNode!=  node  ||!irNode.isWasEmpty())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  node  ||!irNode.isWasEmpty())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  node  ||!irNode.isWasEmpty())  {	  if(irNode!=    null    ||!irNode.isWasEmpty())    {    	non-compiled	[CE]  <identifier>  expected	73	None	replace
536	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getChildCount()  >  1)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WARNING  &&  irNode.getChildCount()  >  1)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WARNING  &&  irNode.getChildCount()  >  1)  {	  if(irNode.getType()!=    Token.WARNING)    {    	non-compiled	[CE]  <identifier>  expected	3	None	replace
537	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.BLOCK    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
538	[BUG]  [BUGGY]  if(irNode.getType()!=  Token.WHOLE  ||!irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()!=  Token.WHOLE  ||!irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()!=  Token.WHOLE  ||!irNode.isExtern())  {	  if(irNode.getType()    ==    Token.WHOLE    ||!irNode.isExtern())    {    	non-compiled	[CE]  <identifier>  expected	62	None	replace
539	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.SETPROP  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
540	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETELEM  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETELEM  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild()!=    node)    {    	non-compiled	[CE]  <identifier>  expected	21	None	replace
541	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  irNode);  [CE]  <identifier>  expected  [FE]                                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  NodeTraversal.traverse(compiler,  node,  this,  irNode);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	NodeTraversal.traverse(compiler,  node,  this,  irNode);	  NodeTraversal.traverse(compiler,    node,    irNode);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
542	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
543	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.FOR  &&  irNode.getType()  ==  Token.WARNING)  {	  if(irNode.getType()    ==    Token.WARNING    ||    irNode.getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	25	None	replace
544	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  null  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  null  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild()!=  null  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
545	[BUG]  [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&  irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&  irNode.getType()  ==  Token.GETPROP  &&  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getFirstChild().getType()    ==    Token.BLOCK)    {    	non-compiled	[CE]  <identifier>  expected	20	None	replace
546	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isSyntheticBlock())  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isSyntheticBlock())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isSyntheticBlock())  {	  if(irNode.getType()    ==    Token.VAR    &&!irNode.isBlock())    {    	non-compiled	[CE]  <identifier>  expected	31	None	replace
547	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  &&!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
548	[BUG]  [BUGGY]  if(irNode  ==  null  ||!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  null  ||!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  null  ||!irNode.isFunction()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(!irNode.isFunction()    &&    NodeUtil.isAssignmentOp(irNode))    {    	non-compiled	[CE]  <identifier>  expected	64	None	replace
549	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isAssignmentOp(irNode))  {  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isAssignmentOp(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isAssignmentOp(irNode))  {	  if(irNode!=    null    &&!irNode.isStatement())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
550	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isFunctionDeclaration(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isFunctionDeclaration(irNode))  {	  if(irNode!=    null    &&!irNode.isStatement())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
551	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isFunction(irNode))  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isFunction(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isFunction(irNode))  {	  if(irNode!=    null    &&!irNode.isStatement())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
552	[BUG]  [BUGGY]  if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isWasEmptyNode(irNode))  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isWasEmptyNode(irNode))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode!=  null  &&!irNode.isStatement()  &&  NodeUtil.isWasEmptyNode(irNode))  {	  if(irNode!=    null    &&!irNode.isStatement())    {    	non-compiled	[CE]  <identifier>  expected	82	None	replace
553	[BUG]  [BUGGY]  if(irNode.isFunction()  ||  irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isFunction()  ||  irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isFunction()  ||  irNode.isExtern())  {	  if(irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
554	[BUG]  [BUGGY]  if(irNode.isExtern())  {  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.isExtern())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.isExtern())  {	  if(irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	36	None	replace
555	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||!irNode.isLocal())  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||!irNode.isLocal())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||!irNode.isLocal())  {	  if(irNode.getType()    ==    Token.BLOCK    ||!irNode.isLocal())    {    	non-compiled	[CE]  <identifier>  expected	89	None	replace
556	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getType()  ==  Token.VAR)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
557	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild().getType()  ==  Token.BLOCK)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
558	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.EXPR_RESULT  ||  irNode.getFirstChild().getType()  ==  Token.FUNCTION)  {	  if(irNode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  <identifier>  expected	26	None	replace
559	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.hasChildren()  &&  irNode.getLastChild().getString().equals( "prototype "))  {  [CE]  <identifier>  expected  [FE]                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.GETPROP  &&  irNode.hasChildren()  &&  irNode.getLastChild().getString().equals( "prototype "))  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.GETPROP  &&  irNode.hasChildren()  &&  irNode.getLastChild().getString().equals( "prototype "))  {	  if(irNode.getType()    ==    Token.GETPROP    &&    irNode.getLastChild().getString().equals(   "prototype   "))    {    	non-compiled	[CE]  <identifier>  expected	94	None	replace
560	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.VAR)  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.VAR)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  ||  irNode.getType()  ==  Token.VAR)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
561	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.LABEL  &&  irNode.getFirstChild()!=  node)  {  [CE]  <identifier>  expected  [FE]                    AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.LABEL  &&  irNode.getFirstChild()!=  node)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.LABEL  &&  irNode.getFirstChild()!=  node)  {	  if(irNode.getType()    ==    Token.LABEL)    {    	non-compiled	[CE]  <identifier>  expected	98	None	replace
562	[BUG]  [BUGGY]  if(irNode  ==  node  ||!irNode.isFunction())  {  [CE]  <identifier>  expected  [FE]                  AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode  ==  node  ||!irNode.isFunction())  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode  ==  node  ||!irNode.isFunction())  {	  if(irNode    ==    null    ||!irNode.isFunction())    {    	non-compiled	[CE]  <identifier>  expected	7	None	replace
563	[BUG]  [BUGGY]  Node  irNode  =  node.getAncestor(2);  [CE]  <identifier>  expected  [FE]                                AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  Node  irNode  =  node.getAncestor(2);  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	Node  irNode  =  node.getAncestor(2);	  Node    irNode    =    node.getNext();    	non-compiled	[CE]  <identifier>  expected	45	None	replace
564	[BUG]  [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.GETPROP)  {  [CE]  <identifier>  expected  [FE]                      AssertionFailedError      [CONTEXT]      private  Node  transformBlock(AstNode  node)  {  Node  irNode  =  transform(node);      [BUGGY]  if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.GETPROP)  {  [BUGGY]      if  (irNode.isEmpty())  {  irNode.setType(Token.BLOCK);  irNode.setWasEmptyNode(true);  }  else  {  Node  newBlock  =  newNode(Token.BLOCK,  irNode);  newBlock.setLineno(irNode.getLineno());  newBlock.setCharno(irNode.getCharno());  maybeSetLengthFrom(newBlock,  node);  irNode  =  newBlock;  }  [CLASS]  IRFactory  TransformDispatcher  [METHOD]  transformBlock  [RETURN_TYPE]  Node  AstNode  node  [VARIABLES]  ErrorReporter  errorReporter  Set  ALLOWED_DIRECTIVES  ES5_RESERVED_KEYWORDS  ES5_STRICT_RESERVED_KEYWORDS  parsedComments  reservedKeywords  boolean  Config  config  Node  irNode  newBlock  rootNodeJsDocHolder  templateNode  FileLevelJsDocBuilder  fileLevelJsDocBuilder  String  SUSPICIOUS_COMMENT_WARNING  sourceName  sourceString  StaticSourceFile  sourceFile  TransformDispatcher  transformDispatcher  JSDocInfo  fileOverviewInfo  rootNodeJsDoc  AstNode  node  	projects/Closure42/src/com/google/javascript/jscomp/parsing/IRFactory.java	0.5	212	212	1	replace	if(irNode.getType()  ==  Token.VAR  ||  irNode.getType()  ==  Token.GETPROP)  {	  if(irNode.getType()    ==    Token.NAME    ||    irNode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  <identifier>  expected	49	None	replace
