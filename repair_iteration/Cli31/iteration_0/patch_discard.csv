compilation error,328,add,[CE] method get in interface List cannot be applied to given types;,,  String argName =(String)this.values.get(argName);
compilation error,328,add,[CE] cannot find symbol,,  String argName = getDefaultArgName();
compilation error,328,add,[CE] cannot find symbol,,  String argName = getValues().keySet();
increase failing tests,328,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  String argName = getValues().toString();
compilation error,315,add,[CE] cannot find symbol,,  if(name!= null) { this.defaultWidth = defaultWidth; } else { this.defaultSyntaxPrefix = defaultSyntaxPrefix.setArgName(name); }
compilation error,315,add,[CE] cannot find symbol,,  if(name!= null) { this.defaultWidth = defaultWidth; } else { this.defaultSyntaxPrefix = defaultSyntaxPrefix.getDefaultArgName(); setDefaultArgName(name); }
increase failing tests,315,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  if(name!= null) { this.defaultWidth = defaultWidth; } else { this.defaultWidth = defaultWidth; }
compilation error,315,add,[CE] cannot find symbol,,  if(name!= null) { this.defaultWidth = defaultWidth; } else { this.defaultSyntaxPrefix = defaultSyntaxPrefix.getArgName(); setDefaultArgName(name); }
compilation error,315,add,[CE] cannot find symbol,,  firePropertyChange("ArgName", name);
increase failing tests,314,replace, [FE] NullPointerException testUsageWithLongOptSeparator,this.defaultArgName = name; ,this.defaultArgName ="ARG_NAME";
increase failing tests,314,replace, [FE] NullPointerException testUsageWithLongOptSeparator,this.defaultArgName = name; ,this.defaultArgName ="arg";
increase failing tests,314,replace, [FE] NullPointerException testUsageWithLongOptSeparator,this.defaultArgName = name; ,this.defaultArgName ="ARG";
increase failing tests,314,replace, [FE] NullPointerException testUsageWithLongOptSeparator,this.defaultArgName = name; , 
compilation error,111,replace,[CE] non-static variable this cannot be referenced from a static context,return instance; ,return this.argName;
compilation error,111,replace,[CE] cannot find symbol optionBuilder,return instance; ,return optionBuilder;
compilation error,111,replace,[CE] non-static variable this cannot be referenced from a static context,return instance; ,return this.optionalArg;
compilation error,111,replace,[CE] cannot find symbol UNLIMITED_ARG,return instance; ,return OptionBuilder.UNLIMITED_ARG;
compilation error,111,replace,[CE] missing return statement,return instance; , 
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOption(argName);
compilation error,148,add,[CE] cannot find symbol options,,  OptionBuilder instance = options.getOptionBuilder();
compilation error,148,add,[CE] cannot find symbol option,,  OptionBuilder instance = option.getOptionBuilder();
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = getOptionBuilder();
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.createOptionBuilder();
increase failing tests,314,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  this.defaultArgName = name.toLowerCase();
increase failing tests,314,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  this.defaultArgName = name.trim().toLowerCase();
compilation error,314,add,[CE] illegal start of expression,,  if(name!= null) { if(defaultArgName.length() > 0) { throw new IllegalArgumentException(""); }
compilation error,314,add,[CE] cannot find symbol,,  super.setArgName(name);
compilation error,314,add,[CE] illegal start of expression,,  if(name!= null) { if(!setDefaultArgName(name)) { this.defaultArgName = name; }
increase failing tests,655,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  buff.append("[").append(option.getArgName()).append(">");
increase failing tests,655,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  buff.append(" >").append(option.getArgName()).append(">");
increase failing tests,655,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  buff.append(">");
increase failing tests,655,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  buff.append(">").append(option.getArgName());
compilation error,109,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOption(argName);
compilation error,109,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.build();
compilation error,109,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.createOption(argName);
compilation error,109,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOption(argName); optionBuilder.isRequired();
compilation error,109,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOption(argName); OptionBuilder.instance = null;
increase failing tests,318,add, [FE] NullPointerException testUsageWithLongOptSeparator,,  String argName = getValues().toString();
compilation error,318,add,[CE] method get in interface List cannot be applied to given types;,,  String argName =(String)this.values.get(argName);
compilation error,318,add,[CE] cannot find symbol,,  String argName = super.getArgName();
increase failing tests,318,add, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,,  String argName =(String)this.values.get(0);
compilation error,315,replace,[CE] illegal start of expression,} ,this.optionComparator.setArgName(name);
compilation error,315,replace,[CE] illegal start of expression,} ,if(name!= null) { this.defaultArgName = name.trim().toLowerCase(); } else { this.defaultWidth = defaultWidth; }
compilation error,315,replace,[CE] illegal start of expression,} ,if(name!= null) { this.defaultArgName = name.trim().toLowerCase(); } else { this.defaultWidth = defaultWidth++; }
compilation error,315,replace,[CE] illegal start of expression,} ,if(name!= null) { this.defaultArgName = name.trim().toLowerCase(); } else { Preconditions.checkState(this.defaultArgName == null); }
increase failing tests,655,replace, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,buff.append(option.getOpt() == null ? longOptSeparator : " "); ,buff.append(option.getOpt() == null? option.getLongOpt() :" ");
increase failing tests,655,replace, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,buff.append(option.getOpt() == null ? longOptSeparator : " "); ,buff.append(option.getOpt() == null? option.getArgName() :" ");
increase failing tests,655,replace, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,buff.append(option.getOpt() == null ? longOptSeparator : " "); ,buff.append(option.getOpt()!= null? option.getLongOpt() :" ");
compilation error,150,replace,[CE] incompatible types,return instance; ,return required;
compilation error,150,replace,[CE] non-static variable this cannot be referenced from a static context,return instance; ,return this.required;
compilation error,150,replace,[CE] non-static variable this cannot be referenced from a static context,return instance; ,return this.optionalArg;
compilation error,150,replace,[CE] missing return statement,return instance; , 
compilation error,150,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOption(argName);
compilation error,150,add,[CE] cannot find symbol option,,  OptionBuilder instance = option.getOptionBuilder();
compilation error,150,add,[CE] cannot find symbol options,,  OptionBuilder instance = options.getOptionBuilder();
compilation error,150,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOptionBuilder();
increase failing tests,150,add, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,,  OptionBuilder instance = new OptionBuilder();
increase failing tests,109,replace, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,OptionBuilder.numberOfArgs = 1; ,OptionBuilder.numberOfArgs = 0;
increase failing tests,109,replace, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,OptionBuilder.numberOfArgs = 1; ,OptionBuilder.numberOfArgs = 2;
increase failing tests,109,replace, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,OptionBuilder.numberOfArgs = 1; ,OptionBuilder.numberOfArgs = 3;
increase failing tests,656,add, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,,  buff.append(option.getOpt() == null? longOptSeparator :" ");
increase failing tests,656,add, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,,  buff.append(option.getLongOpt()).append(">");
increase failing tests,656,add, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,,  buff.append(option.getLongOpt() == null? longOptSeparator :" ");
compilation error,111,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOption(argName);
compilation error,111,add,[CE] no suitable method found for hasArg(OptionBuilder),,  OptionBuilder.hasArg(instance);
compilation error,111,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.build();
compilation error,111,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOption(argName); optionBuilder.hasArg();
compilation error,111,add,[CE] cannot find symbol,,  OptionBuilder instance = Option.getOption(argName); OptionBuilder.type = type;
increase failing tests,328,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName != null && argName.length() > 0; ,return this.argName!= null && argName.length() > 0;
increase failing tests,328,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName != null && argName.length() > 0; ,return argName!= null || argName.length() > 0;
increase failing tests,328,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName != null && argName.length() > 0; ,return argName == null && argName.length() > 0;
increase failing tests,656,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,buff.append("<").append(option.getArgName()).append(">"); ,buff.append(" < ").append(option.getLongOpt()).append(">");
increase failing tests,656,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,buff.append("<").append(option.getArgName()).append(">"); ,buff.append(option.getArgName()).append(">");
increase failing tests,656,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,buff.append("<").append(option.getArgName()).append(">"); ,buff.append(" < ").append(option.getOpt()).append(">");
increase failing tests,148,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,OptionBuilder.required = true; ,OptionBuilder.required = false;
compilation error,148,replace,[CE] incompatible types,OptionBuilder.required = true; ,OptionBuilder.required ="required";
compilation error,148,replace,[CE] incompatible types,OptionBuilder.required = true; ,OptionBuilder.required = null;
increase failing tests,318,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName; ,return this.argName;
increase failing tests,318,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName; ,return argName!= null? null : argName;
increase failing tests,318,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName; ,return argName == null? null : argName;
compilation error,318,replace,[CE] incompatible types for ?: neither is a subtype of the other,return argName; ,return argName == null? 0 : argName;
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = getOptions().iterator().next();
compilation error,148,add,[CE] non-static variable this cannot be referenced from a static context,,  OptionBuilder instance =(OptionBuilder)this.optionalArgs.get();
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = getOptions().iterator().isRequired();
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = getOptions();
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = getOptions().newInstance();
compilation error,328,add,[CE] inconvertible types,,  String argName =(String)this.numberOfArgs;
compilation error,328,add,[CE] cannot find symbol,,  String argName = getOptionalArg();
compilation error,328,add,[CE] cannot find symbol,,  String argName =(String)this.opt.getArgName();
compilation error,314,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkArgument(name.length() == 0);
compilation error,314,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkArgument(name.isEmpty());
compilation error,314,add,[CE] illegal start of expression,,  if(name!= null) { if(defaultArgName == null) { throw new IllegalArgumentException(""); }
compilation error,314,add,[CE] illegal start of expression,,  if(name!= null) { if(defaultArgName == null) { setDefaultArgName(defaultArgName); }
compilation error,314,add,[CE] illegal start of expression,,  if(name!= null) { if(defaultArgName == null) { this.defaultArgName = defaultArgName; }
compilation error,655,add,[CE] cannot find symbol,,  longOptSeparator =(longOpt)option.getArgName();
compilation error,655,add,[CE] cannot find symbol,,  longOptSeparator = option.getLongOptSeparator();
compilation error,655,add,[CE] cannot find symbol,,  longOptSeparator =(longOptSeparator)option.getArgName();
increase failing tests,655,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  longOptSeparator = option.getLongOpt();
compilation error,655,add,[CE] ,,  longOptSeparator ="");
increase failing tests,314,replace, [FE] ComparisonFailure testAccessors,this.defaultArgName = name; ,this.defaultArgName = name!= null? DEFAULT_ARG_NAME : name;
increase failing tests,314,replace, [FE] ComparisonFailure testAccessors,this.defaultArgName = name; ,this.defaultArgName = name == null? name : defaultArgName;
compilation error,111,replace,[CE] non-static variable this cannot be referenced from a static context,return instance; ,return this.numberOfArgs;
compilation error,111,replace,[CE] non-static variable this cannot be referenced from a static context,return instance; ,return this.instance;
compilation error,111,replace,[CE] non-static variable this cannot be referenced from a static context,return instance; ,return this.numberOfArgs - 1;
compilation error,148,replace,[CE] cannot find symbol,OptionBuilder.required = true; ,OptionBuilder.required =(optionalArg)required;
compilation error,150,replace,[CE] cannot find symbol optionalArgs,return instance; ,return(optionalArgs == null)? required : option.getArgs();
compilation error,150,replace,[CE] cannot find symbol optionalArgs,return instance; ,return(optionalArgs == OptionBuilder.REQUIRED)? required : null;
compilation error,111,add,[CE] no suitable method found for hasArg(int),,  OptionBuilder.hasArg(numberOfArgs);
increase failing tests,111,add, [FE] ComparisonFailure testAccessors,,  OptionBuilder.isRequired(required);
increase failing tests,111,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  OptionBuilder.isRequired();
compilation error,111,add,[CE] not a statement,,  OptionBuilder.isRequired()? OptionBuilder.instance : null;
compilation error,111,add,[CE] no suitable method found for hasArg(int),,  OptionBuilder.hasArg(numberOfArgs - 1);
compilation error,315,replace,[CE] illegal start of expression,} ,if(name!= null) { throw new IllegalArgumentException(""); }
compilation error,315,replace,[CE] illegal start of expression,} ,if(name!= null) { this.defaultArgName = defaultArgName; }
compilation error,315,replace,[CE] illegal start of expression,} ,this.optionComparator.setArgName(defaultArgName);
increase failing tests,656,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(" } ").append(option.getLongOpt()).append(">");
increase failing tests,656,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(option.getLongOpt()).append(" :");
increase failing tests,656,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(" { ").append(option.getLongOpt()).append(">");
increase failing tests,656,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(" :").append(option.getLongOpt()).append(">");
increase failing tests,656,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(option.getLongOpt());
increase failing tests,109,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,OptionBuilder.numberOfArgs = 1; ,OptionBuilder.numberOfArgs = Option.UNLIMITED_VALUES;
compilation error,109,replace,[CE] possible loss of precision,OptionBuilder.numberOfArgs = 1; ,OptionBuilder.numberOfArgs = 1L;
compilation error,109,add,[CE] non-static variable this cannot be referenced from a static context,,  OptionBuilder.instance =(OptionBuilder)this.argName.clone();
compilation error,109,add,[CE] cannot find symbol optionalArgs,,  OptionBuilder.instance =(OptionBuilder)optionalArgs.iterator().next();
compilation error,109,add,[CE] cannot find symbol optionalArgs,,  OptionBuilder.instance =(OptionBuilder)optionalArgs.clone();
increase failing tests,109,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  OptionBuilder.isRequired(required);
increase failing tests,109,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  OptionBuilder.isRequired();
compilation error,318,add,[CE] cannot find symbol,,  String argName =(String)this.opt.getArgName();
compilation error,318,add,[CE] inconvertible types,,  String argName =(String)this.numberOfArgs + 1;
compilation error,318,add,[CE] cannot find symbol,,  String argName =(String)this.values.get(opt.getArgName());
compilation error,318,add,[CE] inconvertible types,,  String argName =(String)this.numberOfArgs;
compilation error,150,add,[CE] cannot find symbol,,  OptionBuilder instance = getOptions().iterator().next();
compilation error,150,add,[CE] boolean cannot be dereferenced,,  OptionBuilder instance =(OptionBuilder)required.clone();
compilation error,150,add,[CE] boolean cannot be dereferenced,,  OptionBuilder instance =(OptionBuilder)required.newInstance();
compilation error,150,add,[CE] non-static variable this cannot be referenced from a static context,,  OptionBuilder instance =(OptionBuilder)this.optionalArgs.get();
compilation error,150,add,[CE] cannot find symbol,,  OptionBuilder instance = getDefaultOptionBuilder();
increase failing tests,328,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName != null && argName.length() > 0; ,return(argName!= null && argName.length() > 0);
increase failing tests,318,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName; ,return(numberOfArgs == 0)? null : argName;
increase failing tests,318,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName; ,return(this.argName == null)? null : argName;
increase failing tests,318,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName; ,return(this.argName!= null)? null : argName;
increase failing tests,655,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,buff.append(option.getOpt() == null ? longOptSeparator : " "); ,buff.append(option.getOpt()!= null? longOptSeparator :" ");
increase failing tests,655,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,buff.append(option.getOpt() == null ? longOptSeparator : " "); ,buff.append(option.getArgName() == null? longOptSeparator :" ");
compilation error,655,replace,[CE] cannot find symbol getLongOptSeparator,buff.append(option.getOpt() == null ? longOptSeparator : " "); ,buff.append(option.getOpt() == null? option.getLongOptSeparator :" ");
compilation error,656,replace,[CE] cannot find symbol,buff.append("<").append(option.getArgName()).append(">"); ,buff.append(" < ").append(option.getLongOptSeparator()).append(">");
compilation error,656,replace,[CE] cannot find symbol,buff.append("<").append(option.getArgName()).append(">"); ,buff.append(" < ").append(option.getSyntaxPrefix()).append(">");
compilation error,148,replace,[CE] inconvertible types,OptionBuilder.required = true; ,OptionBuilder.required =(OptionBuilder)required;
compilation error,148,replace,[CE] cannot find symbol,OptionBuilder.required = true; ,OptionBuilder.required =(OptionBuilder)enabledByDefault();
compilation error,109,add,[CE] clone() has protected access in Object,,  OptionBuilder instance =(OptionBuilder)argName.clone();
compilation error,109,add,[CE] cannot find symbol,,  OptionBuilder instance =(OptionBuilder)ArgName.class.getSimpleName();
compilation error,109,add,[CE] no suitable method found for hasArg(String),,  OptionBuilder.hasArg(argName);
increase failing tests,656,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,buff.append("<").append(option.getArgName()).append(">"); ,buff.append(" < ").append(option.getArgs()).append(">");
compilation error,656,replace,[CE] cannot find symbol,buff.append("<").append(option.getArgName()).append(">"); ,buff.append(" < ").append(option.getSize()).append(">");
compilation error,150,replace,[CE] cannot find symbol optionBuilder,return instance; ,return(optionBuilder == null)? required : instance;
compilation error,150,replace,[CE] cannot find symbol optionBuilder,return instance; ,return(optionBuilder == null)? required : optionBuilder.required;
compilation error,315,add,[CE] cannot find symbol arguments,,  if(arguments == null) { throw new IllegalArgumentException(""); }
compilation error,315,add,[CE] for-each loops are not supported in -source 1.4,,  if(arguments == null) { for(Comparator optionComparator : defaultArgName) { this.optionComparator = optionComparator; }
compilation error,315,add,[CE] for-each loops are not supported in -source 1.4,,  if(optionComparator == null) { for(Comparator optionComparator : optionComparator.keySet()) { this.defaultArgName = defaultArgName; }
compilation error,315,add,[CE] for-each loops are not supported in -source 1.4,,  if(optionComparator == null) { for(Comparator optionComparator : optionComparator.keySet()) { setArgName(optionComparator.getDefaultArgName()); }
increase failing tests,656,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(option.getLongOpt()).append(" =");
increase failing tests,656,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append("[").append(option.getLongOpt()).append("]");
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance =(OptionBuilder)enabledByDefault();
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = getRequired();
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance =(OptionBuilder)required();
compilation error,148,add,[CE] cannot find symbol,,  OptionBuilder instance = new OptionBuilder(getArgs());
increase failing tests,328,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName != null && argName.length() > 0; ,return argName!= null && argName.length() > 1;
compilation error,328,add,[CE] int cannot be dereferenced,,  String argName =(String)this.numberOfArgs.get(0);
compilation error,328,add,[CE] cannot find symbol,,  String argName = getValue(opt.getKey());
increase failing tests,328,add, [FE] java.lang.IndexOutOfBoundsException: Index: 0 testUsageWithLongOptSeparator,,  String argName =(String)this.values.get(0);
compilation error,328,add,[CE] incompatible types,,  String argName = getValues();
increase failing tests,655,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(" < ").append(option.getArgName()).append(">");
increase failing tests,655,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  if(!required) { buff.append(" < ").append(option.getArgName()).append(">"); }
increase failing tests,655,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  if(!required) { buff.append(" } ").append(option.getArgName()).append(">"); }
increase failing tests,655,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(" } ").append(option.getArgName()).append(">");
increase failing tests,655,add, [FE] ComparisonFailure testUsageWithLongOptSeparator,,  buff.append(" { ").append(option.getArgName()).append(">");
compilation error,111,add,[CE] clone() has protected access in Object,,  OptionBuilder.argName =(OptionBuilder)argName.clone();
compilation error,111,add,[CE] cannot find symbol,,  OptionBuilder.argName =(OptionBuilder)argName.fullArg();
compilation error,111,add,[CE] cannot find symbol,,  OptionBuilder.argName =(OptionBuilder)argName.get();
compilation error,314,add,[CE] cannot find symbol,,  this.optionComparator.setArgName(name);
compilation error,314,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkArgument(!this.defaultArgName.equals(name));
compilation error,314,add,[CE] cannot find symbol argName,,  Preconditions.checkArgument(!this.argName.equals(name));
compilation error,314,add,[CE] cannot find symbol Preconditions,,  Preconditions.checkArgument(!this.defaultArgName.isEmpty());
compilation error,314,add,[CE] cannot find symbol argName,,  Preconditions.checkArgument(this.argName!= null);
compilation error,318,add,[CE] cannot find symbol arguments,,  String argName =(String)this.values.get(arguments.keySet());
compilation error,318,add,[CE] cannot find symbol,,  String argName =(String)this.values.get(opt.getKey());
compilation error,318,add,[CE] inconvertible types,,  String argName =(String)this.numberOfArgs * 1;
compilation error,655,replace,[CE] cannot find symbol getLongOptSeparator,buff.append(option.getOpt() == null ? longOptSeparator : " "); ,buff.append(option.getArgName() == null? option.getLongOptSeparator :" ");
compilation error,655,replace,[CE] cannot find symbol getOptSeparator,buff.append(option.getOpt() == null ? longOptSeparator : " "); ,buff.append(option.getArgName() == null? option.getOptSeparator :" ");
increase failing tests,318,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,return argName; ,return(this.argName!= null? null : argName);
compilation error,150,add,[CE] cannot find symbol,,  OptionBuilder instance =(OptionBuilder)required();
compilation error,150,add,[CE] boolean cannot be dereferenced,,  OptionBuilder instance =(OptionBuilder)required.next();
compilation error,150,add,[CE] cannot find symbol,,  OptionBuilder instance = getRequired();
compilation error,150,add,[CE] boolean cannot be dereferenced,,  OptionBuilder instance =(OptionBuilder)required.build();
compilation error,150,add,[CE] cannot find symbol,,  OptionBuilder instance = getOptionBuilder();
compilation error,315,replace,[CE] illegal start of expression,} ,if(!setArgName(name)) { throw new IllegalArgumentException(""); }
compilation error,315,replace,[CE] illegal start of expression,} ,if(optionComparator == null) { throw new IllegalArgumentException(""); }
increase failing tests,314,replace, [FE] ComparisonFailure testUsageWithLongOptSeparator,this.defaultArgName = name; ,this.defaultArgName = name == null? DEFAULT_ARG_NAME : defaultArgName;
