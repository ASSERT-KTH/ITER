projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47}
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.observedPoint=optimizer.getObservedPoint();
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47if(this.observes!=null){for(finalWeightedObservedPoint[]observations:this.observes){returnnewHarmonicFitter(this.observes);}
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47if(this.observes!=null){for(finalWeightedObservedPoint[]observations:this.observes){super(observes);}
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47if(this.observes==null){for(finalWeightedObservedPoint[]observations:this.observes){returnnewHarmonicFitter(this.observes);}
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47if(this.observes!=null){for(finalWeightedObservedPoint[]observations:this.observes){observed=newWeightedObservedPoint[observes.length];System.arraycopy(this.observes,0,observations,0,observations.length);}
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47if(this.observes!=null){for(finalWeightedObservedPoint[]observations:this.observes){observed=newWeightedObservedPoint[observes.length];System.arraycopy(this.observes,0,observations,1,observations.length);}
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47if(this.observes!=null){for(finalWeightedObservedPoint[]observations:this.observes){observed=newWeightedObservedPoint[observes.length];}
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47if(this.observes!=null){for(finalWeightedObservedPoint[]observations:this.observes){observed=newWeightedObservedPoint[observes.size()];}
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.annotation=optimizer.annotation;
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.observedPoint=optimizer.getPartialPoint();
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47super(optimizer);
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.observedPoint=optimizer.getParameterPoint();
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.observes=calculateObservedPoint(optimizer);
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.observes=newWeightedObservedPoint[size()];
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.observes=newWeightedObservedPoint[this.observings.size()];
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.observes=newWeightedObservedPoint[this.observes.size()];
projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java47this.observes=newWeightedObservedPoint[1];
