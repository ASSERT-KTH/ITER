bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }  [CE]  incompatible  types  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  incompatible  types	6	None	replace
2	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }  [CE]  incompatible  types  [FE]                    [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  incompatible  types	6	None	replace
3	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[3];  }  [CE]  incompatible  types  [FE]                      [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[3];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[3];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  incompatible  types	6	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[0];  }  [CE]  incompatible  types  [FE]                        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[0];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[0];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  incompatible  types	6	None	replace
5	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
6	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
7	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
8	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
9	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  illegal  start  of  expression  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
10	[BUG]  [BUGGY]  [FE]    [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
11	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
12	[BUG]  [BUGGY]  [FE]    [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
13	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
14	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	12	None	add
15	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
16	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  InitialGuess  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	2	None	replace
17	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  InitialGuess  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	2	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  incompatible  types  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  incompatible  types	2	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  [CE]  observations  has  private  access  in  CurveFitter  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	13	None	replace
21	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  [CE]  missing  return  statement  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	13	None	replace
22	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  omega,  observations);  [CE]  cannot  find  symbol  omega  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  omega,  observations);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  omega,  observations);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations);    	non-compiled	[CE]  cannot  find  symbol  omega	7	None	replace
23	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  omega);  [CE]  cannot  find  symbol  omega  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations);    	non-compiled	[CE]  cannot  find  symbol  omega	7	None	replace
24	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega);  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	7	None	replace
25	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
26	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
27	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
28	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
29	[BUG]  [BUGGY]  return  fit(initialGuess,  observations,  new  HarmonicOscillator.Parametric());  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  observations,  new  HarmonicOscillator.Parametric());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  observations,  new  HarmonicOscillator.Parametric());	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	9	None	replace
30	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  observations);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  observations);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  observations);	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	9	None	replace
31	[BUG]  [BUGGY]  return  fit(initialGuess,  observer,  new  HarmonicOscillator.Parametric());  [CE]  cannot  find  symbol  observer  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  observer,  new  HarmonicOscillator.Parametric());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  observer,  new  HarmonicOscillator.Parametric());	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol  observer	9	None	replace
32	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  observations);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	8	None	replace
33	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  omega);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  omega);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
34	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  omega);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  omega);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	8	None	replace
35	[BUG]  [BUGGY]  return  fit(initialGuess.Parameter(),  new  HarmonicOscillator());  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess.Parameter(),  new  HarmonicOscillator());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess.Parameter(),  new  HarmonicOscillator());	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
36	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter());  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parameter());	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
37	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  +  1];  [CE]  missing  return  statement  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  double[]  observations  =  new  double[initialGuess.length  +  1];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  +  1];	      double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	4	None	replace
38	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  -  1];  [CE]  missing  return  statement  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  double[]  observations  =  new  double[initialGuess.length  -  1];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  -  1];	      double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	4	None	replace
39	[BUG]  [BUGGY]  float[]  observations  =  new  float[initialGuess.length];  [CE]  missing  return  statement  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  float[]  observations  =  new  float[initialGuess.length];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	float[]  observations  =  new  float[initialGuess.length];	      double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	4	None	replace
40	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  *  2];  [CE]  missing  return  statement  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  double[]  observations  =  new  double[initialGuess.length  *  2];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  *  2];	      double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	4	None	replace
41	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
42	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
43	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
44	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  double[]  observations  =  new  double[initialGuess.length];  [CE]  variable  observations  is  already  defined  in  method  fit(double[])  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  double[]  observations  =  new  double[initialGuess.length];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    double[]  observations  =  new  double[initialGuess.length];	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit(double[])	3	None	add
45	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [CE]  variable  observations  is  already  defined  in  method  fit(double[])  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit(double[])	3	None	add
46	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  variable  observations  is  already  defined  in  method  fit(double[])  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit(double[])	3	None	add
47	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  [CE]  variable  observations  is  already  defined  in  method  fit(double[])  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit(double[])	3	None	add
48	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  variable  observations  is  already  defined  in  method  fit(double[])  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit(double[])	3	None	add
49	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  omega);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observation);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	10	None	replace
50	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  Omega);  [CE]  cannot  find  symbol  Omega  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  Omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  Omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observation);    	non-compiled	[CE]  cannot  find  symbol  Omega	10	None	replace
51	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anchor);  [CE]  cannot  find  symbol  anchor  [FE]                    [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anchor);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anchor);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observation);    	non-compiled	[CE]  cannot  find  symbol  anchor	10	None	replace
52	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	16	None	replace
53	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [CE]  not  a  statement  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	16	None	replace
54	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations);  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations);	  return    fit(initialGuess,    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
55	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter());  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Fitter());	  return    fit(initialGuess,    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
56	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parameter());  [CE]  cannot  find  symbol  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parameter());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parameter());	  return    fit(initialGuess,    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
57	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	14	None	replace
58	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [CE]  not  a  statement  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	14	None	replace
59	[BUG]  [BUGGY]  this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [CE]  not  a  statement  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	14	None	replace
60	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
61	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
62	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
63	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
64	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
65	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  observations.length;  ++i)  {	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
66	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[InitialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[InitialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[InitialGuess.length];  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
67	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGuess.length];  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
68	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  [CE]  not  a  statement  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	16	None	replace
69	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	13	None	replace
70	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  parameters);  [CE]  cannot  find  symbol  parameters  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  parameters);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  parameters);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observation);    	non-compiled	[CE]  cannot  find  symbol  parameters	10	None	replace
71	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  false);  [CE]  no  suitable  method  found  for  fit(Parametric,double[],boolean)  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  false);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  false);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observation);    	non-compiled	[CE]  no  suitable  method  found  for  fit(Parametric,double[],boolean)	10	None	replace
72	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  [CE]  not  a  statement  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	14	None	replace
73	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
74	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
75	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter());  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FitterParameter());	  return    fit(initialGuess,    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
76	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  observations);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  observations);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  observations);	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
77	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
78	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[	      if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
79	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [CE]  ';'  expected  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  ';'  expected	22	None	replace
80	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [CE]  ';'  expected  [FE]                    [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  ';'  expected	22	None	replace
81	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues  [CE]  ';'  expected  [FE]                      [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  ';'  expected	22	None	replace
82	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess  *  [CE]  illegal  start  of  expression  [FE]                        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess  *  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess  *	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
83	[BUG]  [BUGGY]  InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  1];  [CE]  cannot  find  symbol  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  1];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  1];	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
84	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1];  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1];	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
85	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.clone();  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.clone();  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.clone();	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
86	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.length;  [CE]  cannot  find  symbol  [FE]                      [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.length;  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.length;	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
87	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [CE]  ';'  expected  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  ';'  expected	21	None	replace
88	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [CE]  ';'  expected  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  ';'  expected	21	None	replace
89	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess!=  null)?  new  double[0]  :  initialGuess.length;  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  InitialGuess  initialGuess  =(initialGuess!=  null)?  new  double[0]  :  initialGuess.length;  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess!=  null)?  new  double[0]  :  initialGuess.length;	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
90	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
91	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
92	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialGuess	12	None	add
93	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
94	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)initialGuess.clone();  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)initialGuess.clone();  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(InitialGuess)initialGuess.clone();	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  injections  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  injections	2	None	replace
96	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  parameters);  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  parameters);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  parameters);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
97	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  +  2];  [CE]  missing  return  statement  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  double[]  observations  =  new  double[initialGuess.length  +  2];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  +  2];	      double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	4	None	replace
98	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length];  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length];  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[initialGuess.length];	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
99	[BUG]  [BUGGY]  init(initialGuess);  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  init(initialGuess);  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	init(initialGuess);	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
100	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess();  [CE]  cannot  find  symbol  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess();  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  getInitialGuess();	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
101	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	17	None	replace
102	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
103	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
104	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
105	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
106	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  observations[i];  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  observations[i];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  observations[i];  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
107	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
108	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation  [CE]  ';'  expected  [FE]                      [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  ';'  expected	22	None	replace
109	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
110	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	14	None	replace
111	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  weightedObservedPoints);  [CE]  observations  has  private  access  in  CurveFitter  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  weightedObservedPoints);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  weightedObservedPoints);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	7	None	replace
112	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [CE]  variable  observations  is  already  defined  in  method  fit(double[])  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit(double[])	3	None	add
113	[BUG]  [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  1;  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  1;  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  1;  }	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
114	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
115	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	      if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	16	None	replace
116	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	12	None	add
117	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(observes  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  observes  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(observes  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(observes  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  cannot  find  symbol  observes	12	None	add
118	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(answers  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  answers  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(answers  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(answers  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	  	non-compiled	[CE]  cannot  find  symbol  answers	12	None	add
119	[BUG]  [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  observations[0]  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]      if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  observations[0]  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  observations[0]  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	12	None	add
120	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observation);  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observation);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observation);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
121	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	17	None	replace
122	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
123	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }	      if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
124	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]        [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }	      if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	13	None	replace
125	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  measurements);  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  measurements);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  measurements);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
126	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit(double[]  initialGuess)  {    [BUGGY]  if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }  [BUGGY]    return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[2];  }	      if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
