bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]      [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
2	[BUG]  [BUGGY]    if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]        [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
3	[BUG]  [BUGGY]  [FE]    [FE]          [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    double[]  observations  =  new  double[initialGuess.length];  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	    double[]  observations  =  new  double[initialGuess.length];		compilable	  [FE]    	6	1	add
4	[BUG]  [BUGGY]    double[]  observations  =  new  double[initialGuess.length];  [FE]    [FE]          [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    double[]  observations  =  new  double[initialGuess.length];  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    double[]  observations  =  new  double[initialGuess.length];		compilable	  [FE]    	6	1	add
5	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
6	[BUG]  [BUGGY]    if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[1];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
7	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations);  [CE]  observations  has  private  access  in  CurveFitter  [FE]      [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations);  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations);	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	5	None	replace
8	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observations);  [CE]  cannot  find  symbol  [FE]        [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observations);  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observations);	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
9	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric());  [CE]  no  suitable  method  found  for  fit(double[],Parametric)  [FE]          [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric());  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parametric());	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  	non-compiled	[CE]  no  suitable  method  found  for  fit(double[],Parametric)	5	None	replace
10	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observation);  [CE]  cannot  find  symbol  observation  [FE]            [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observation);  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observation);	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  	non-compiled	[CE]  cannot  find  symbol  observation	5	None	replace
11	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric());  [CE]  cannot  find  symbol  [FE]      [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric());  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric());	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
12	[BUG]  [BUGGY]  [FE]    [FE]      [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }		compilable	  [FE]    	6	1	add
13	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]      [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }		compilable	  [FE]    	6	1	add
14	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [CE]  not  a  statement  [FE]        [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]		non-compiled	[CE]  not  a  statement	6	None	add
15	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  observations.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	6	None	add
16	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [CE]  not  a  statement  [FE]            [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]		non-compiled	[CE]  not  a  statement	6	None	add
17	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  [CE]  cannot  find  symbol  [FE]      [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  	non-compiled	[CE]  cannot  find  symbol	5	None	replace
18	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }  [CE]  illegal  start  of  expression  [FE]      [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
19	[BUG]  [BUGGY]    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }  [CE]  illegal  start  of  expression  [FE]        [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
20	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
21	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
22	[BUG]  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  observations[i];  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]  public  double[]  fit(double[]  initialGuess)  {  [BUGGY]    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  observations[i];  }  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  observations[i];  }		non-compiled	[CE]  illegal  start  of  expression	6	None	add
