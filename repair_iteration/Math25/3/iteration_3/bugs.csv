bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  fit(initialGuess,  initialGuess,  new  HarmonicOscillator.Parametric());  [CE]  no  suitable  method  found  for  fit(double[],double[],Parametric)  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  initialGuess,  new  HarmonicOscillator.Parametric());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  initialGuess,  new  HarmonicOscillator.Parametric());	  return    fit(initialGuess,    observer,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  no  suitable  method  found  for  fit(double[],double[],Parametric)	31	None	replace
2	[BUG]  [BUGGY]  return  fit(initialGuess,  a,  new  HarmonicOscillator.Parametric());  [CE]  cannot  find  symbol  a  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  a,  new  HarmonicOscillator.Parametric());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  a,  new  HarmonicOscillator.Parametric());	  return    fit(initialGuess,    observer,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol  a	31	None	replace
3	[BUG]  [BUGGY]  return  fit(initialGuess,  observer,  new  HarmonicOscillator());  [CE]  cannot  find  symbol  observer  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  observer,  new  HarmonicOscillator());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  observer,  new  HarmonicOscillator());	  return    fit(initialGuess,    observer,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol  observer	31	None	replace
4	[BUG]  [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  answers  [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  answers	11	None	replace
5	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [CE]  ';'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  ';'  expected	91	None	replace
6	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  ';'  expected	91	None	replace
7	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [CE]  ';'  expected  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  ';'  expected	91	None	replace
8	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial  [CE]  ';'  expected  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  ';'  expected	91	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[4];  }  [CE]  incompatible  types  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[4];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[4];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[2];    }    	non-compiled	[CE]  incompatible  types	2	None	replace
10	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
11	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
12	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator());  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator());	  return    fit(new    HarmonicOscillator(),    initialGuess);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	101	None	replace
13	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observation);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observation);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  observation);	  return    fit(new    HarmonicOscillator(),    initialGuess);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	101	None	replace
14	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  observations,  initialGuess);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  observations,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  observations,  initialGuess);	  return    fit(new    HarmonicOscillator(),    initialGuess);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	101	None	replace
15	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  omega,  observations);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  omega,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric(),  omega,  observations);	  return    fit(initialGuess,    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
16	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations,  omega);  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations,  omega);	  return    fit(initialGuess,    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
17	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations,  Omega);  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations,  Omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric(),  observations,  Omega);	  return    fit(initialGuess,    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
18	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  measurements);  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  measurements);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric(),  measurements);	  return    fit(initialGuess,    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
19	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  omega);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  omega);	  return    fit(new    HarmonicOscillator().Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	121	None	replace
20	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  omega,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  omega,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  omega,  observations);	  return    fit(new    HarmonicOscillator().Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	121	None	replace
21	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  observations,  initialGuess);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  observations,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  observations,  initialGuess);	  return    fit(new    HarmonicOscillator().Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	121	None	replace
22	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  a);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  a);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  a);	  return    fit(new    HarmonicOscillator().Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	121	None	replace
23	[BUG]  [BUGGY]  setInitialGuess[i]  =  new  double[InitialGuess.length];  [CE]  cannot  find  symbol  setInitialGuess  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  setInitialGuess[i]  =  new  double[InitialGuess.length];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	setInitialGuess[i]  =  new  double[InitialGuess.length];	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    setInitialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	122	None	replace
24	[BUG]  [BUGGY]  setInitialGuess[initialGuess.length]  =  new  double[InitialGuess.length];  [CE]  cannot  find  symbol  setInitialGuess  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  setInitialGuess[initialGuess.length]  =  new  double[InitialGuess.length];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	setInitialGuess[initialGuess.length]  =  new  double[InitialGuess.length];	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    setInitialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	122	None	replace
25	[BUG]  [BUGGY]  setInitialGuess[0]  =  new  double[InitialGuess.length];  [CE]  cannot  find  symbol  setInitialGuess  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  setInitialGuess[0]  =  new  double[InitialGuess.length];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	setInitialGuess[0]  =  new  double[InitialGuess.length];	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    setInitialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	122	None	replace
26	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	9	None	replace
27	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGu    	non-compiled	[CE]  ';'  expected	79	None	replace
28	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation  [CE]  ';'  expected  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i]    *    annotation    	non-compiled	[CE]  ';'  expected	108	None	replace
29	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGues  [CE]  ';'  expected  [FE]                            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGues  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGues	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i]    *    annotation    	non-compiled	[CE]  ';'  expected	108	None	replace
30	[BUG]  [BUGGY]  if(answers!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation  [CE]  ';'  expected  [FE]                              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i]    *    annotation    	non-compiled	[CE]  ';'  expected	108	None	replace
31	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  -  2];  [CE]  missing  return  statement  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  observations  =  new  double[initialGuess.length  -  2];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  -  2];	  double[]    observations    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  missing  return  statement	38	None	replace
32	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  /  1];  [CE]  missing  return  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  observations  =  new  double[initialGuess.length  /  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  /  1];	  double[]    observations    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  missing  return  statement	38	None	replace
33	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  initialGuess,  observations);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  initialGuess,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  initialGuess,  observations);	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	30	None	replace
34	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  initialGuess);  [CE]  no  suitable  method  found  for  fit(double[],Parametric,double[])  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  initialGuess);	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  no  suitable  method  found  for  fit(double[],Parametric,double[])	30	None	replace
35	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  parameters);  [CE]  cannot  find  symbol  parameters  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  parameters);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  parameters);	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol  parameters	30	None	replace
36	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  measurements);  [CE]  cannot  find  symbol  measurements  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  measurements);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  measurements);	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol  measurements	30	None	replace
37	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  +  3];  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  observations  =  new  double[initialGuess.length  +  3];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  +  3];	  double[]    observations    =    new    double[initialGuess.length    +    1];    	non-compiled	[CE]  missing  return  statement	37	None	replace
38	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);  [CE]  cannot  find  symbol  annotations  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);	  System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    	non-compiled	[CE]  cannot  find  symbol  annotations	21	None	replace
39	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  -  1);  [CE]  missing  return  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  -  1);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  -  1);	  System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    	non-compiled	[CE]  missing  return  statement	21	None	replace
40	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  parameters,  initialGuess);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  parameters,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  parameters,  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    parameters);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	96	None	replace
41	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  parameters,  initialGuess);  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  parameters,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  parameters,  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    parameters);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
42	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }  [CE]  cannot  find  symbol  InitialGuess  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    Double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	114	None	replace
44	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  Double[InitialGuess.length];  }  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  Double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  Double[InitialGuess.length];  }	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    Double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol	114	None	replace
45	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }  [CE]  cannot  find  symbol  InitialGuess  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    Double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	114	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  InitialGuess  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i!=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	17	None	replace
47	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  true);  [CE]  no  suitable  method  found  for  fit(Parametric,double[],boolean)  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  true);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  true);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    false);    	non-compiled	[CE]  no  suitable  method  found  for  fit(Parametric,double[],boolean)	71	None	replace
48	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  false);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  false);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  false);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    false);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	71	None	replace
49	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  false);  [CE]  no  suitable  method  found  for  fit(double[],Parametric,boolean)  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  false);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parametric(),  false);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    false);    	non-compiled	[CE]  no  suitable  method  found  for  fit(double[],Parametric,boolean)	71	None	replace
50	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations[0]    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	119	None	replace
51	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues  [CE]  ';'  expected  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	90	None	replace
52	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
53	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
54	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  observations,  initialGuess);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  observations,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  observations,  initialGuess);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    anchor);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	51	None	replace
55	[BUG]  [BUGGY]  return  fit(initialGuess,  observations,  new  HarmonicOscillator.Parameter());  [CE]  observations  has  private  access  in  CurveFitter  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  observations,  new  HarmonicOscillator.Parameter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  observations,  new  HarmonicOscillator.Parameter());	  return    fit(initialGuess,    observations,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	29	None	replace
56	[BUG]  [BUGGY]  return  fit(initialGuess,  observations,  new  HarmonicOscillator());  [CE]  observations  has  private  access  in  CurveFitter  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  observations,  new  HarmonicOscillator());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  observations,  new  HarmonicOscillator());	  return    fit(initialGuess,    observations,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	29	None	replace
57	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [CE]  ')'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess.length!=    0)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
58	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial  [CE]  ')'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess.length!=    0)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
59	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess.length!=    0)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
60	[BUG]  [BUGGY]  if(initialGuess.length  ==  0)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial  [CE]  ')'  expected  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length  ==  0)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length  ==  0)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess.length!=    0)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
61	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
62	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  }  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
63	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0  [CE]  ';'  expected  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    	non-compiled	[CE]  ';'  expected	64	None	replace
64	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess,  initialGuess.length;  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess,  initialGuess.length;  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess,  initialGuess.length;	  InitialGuess    initialGuess    =(initialGuess!=    null)?    new    double[0]    :    initialGuess.length;    	non-compiled	[CE]  ';'  expected	89	None	replace
65	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observer);  [CE]  cannot  find  symbol  observer  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observer);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observer);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    parameters);    	non-compiled	[CE]  cannot  find  symbol  observer	70	None	replace
66	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  omega);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  omega);	  return    fit(new    HarmonicOscillator(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	32	None	replace
67	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  parameters,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  parameters,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  parameters,  observations);	  return    fit(new    HarmonicOscillator(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	32	None	replace
68	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  omega,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  omega,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  omega,  observations);	  return    fit(new    HarmonicOscillator(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	32	None	replace
69	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  a);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  a);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  a);	  return    fit(new    HarmonicOscillator(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	32	None	replace
70	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess!=  null)?  new  double[0]  :  initialGuess.clone();  [CE]  cannot  find  symbol  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuess!=  null)?  new  double[0]  :  initialGuess.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess!=  null)?  new  double[0]  :  initialGuess.clone();	  InitialGuess    initialGuess    =(initialGuess    ==    null)?    new    double[0]    :    initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
71	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[1]  :  initialGuess.clone();  [CE]  cannot  find  symbol  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[1]  :  initialGuess.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[1]  :  initialGuess.clone();	  InitialGuess    initialGuess    =(initialGuess    ==    null)?    new    double[0]    :    initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
72	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  originalGuess.clone();  [CE]  cannot  find  symbol  [FE]                            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  originalGuess.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  originalGuess.clone();	  InitialGuess    initialGuess    =(initialGuess    ==    null)?    new    double[0]    :    initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
73	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega,  weightedObservedPoints);  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega,  weightedObservedPoints);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega,  weightedObservedPoints);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    weightedObservedPoints);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	111	None	replace
74	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements,  weightedObservedPoints);  [CE]  cannot  find  symbol  measurements  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements,  weightedObservedPoints);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements,  weightedObservedPoints);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    weightedObservedPoints);    	non-compiled	[CE]  cannot  find  symbol  measurements	111	None	replace
75	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  weightedObservedPoints,  omega);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  weightedObservedPoints,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  weightedObservedPoints,  omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    weightedObservedPoints);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	111	None	replace
76	[BUG]  [BUGGY]  return  fit(initialGuess.Parameter(),  new  HarmonicFitter());  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess.Parameter(),  new  HarmonicFitter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess.Parameter(),  new  HarmonicFitter());	  return    fit(initialGuess.Parameter(),    new    HarmonicOscillator());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
77	[BUG]  [BUGGY]  return  fit(initialGuess,  Parameter.Parameter(),  new  HarmonicOscillator());  [CE]  cannot  find  symbol  Parameter  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  Parameter.Parameter(),  new  HarmonicOscillator());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  Parameter.Parameter(),  new  HarmonicOscillator());	  return    fit(initialGuess.Parameter(),    new    HarmonicOscillator());    	non-compiled	[CE]  cannot  find  symbol  Parameter	35	None	replace
78	[BUG]  [BUGGY]  return  fit(initialGuess,  parameters.Parameter(),  new  HarmonicOscillator());  [CE]  cannot  find  symbol  parameters  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  parameters.Parameter(),  new  HarmonicOscillator());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  parameters.Parameter(),  new  HarmonicOscillator());	  return    fit(initialGuess.Parameter(),    new    HarmonicOscillator());    	non-compiled	[CE]  cannot  find  symbol  parameters	35	None	replace
79	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	45	None	replace
80	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	45	None	replace
81	[BUG]  [BUGGY]  if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	45	None	replace
82	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	45	None	replace
83	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }	          double[]    observations    =    new    double[initialGuess.length];    double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	44	None	replace
84	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  [CE]  missing  return  statement  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  }	          double[]    observations    =    new    double[initialGuess.length];    double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	44	None	replace
85	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  new  [CE]  <identifier>  expected  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  new  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  new	          double[]    observations    =    new    double[initialGuess.length];    double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  <identifier>  expected	44	None	replace
86	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  }  [CE]  illegal  start  of  expression  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  }	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i]    *    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
87	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
88	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
89	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [CE]  ')'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
90	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGues  [CE]  ')'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGues  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGues	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
91	[BUG]  [BUGGY]  this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    }    	non-compiled	[CE]  not  a  statement	57	None	replace
92	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGues  [CE]  not  a  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGues  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGues	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    }    	non-compiled	[CE]  not  a  statement	57	None	replace
93	[BUG]  [BUGGY]  InitialValues[]  initialGuess  =  new  double[InitialGuess.length  -  1];  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialValues[]  initialGuess  =  new  double[InitialGuess.length  -  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialValues[]  initialGuess  =  new  double[InitialGuess.length  -  1];	  InitialValues[]    initialGuess    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
94	[BUG]  [BUGGY]  InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  2];  [CE]  cannot  find  symbol  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  2];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  2];	  InitialValues[]    initialGuess    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
95	[BUG]  [BUGGY]  InitialValues[]  initialGuess  =  new  double[initialGuess.length  /  1];  [CE]  cannot  find  symbol  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialValues[]  initialGuess  =  new  double[initialGuess.length  /  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialValues[]  initialGuess  =  new  double[initialGuess.length  /  1];	  InitialValues[]    initialGuess    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
96	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  +  1];  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  +  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[initialGuess.length  +  1];	  InitialGuess    initialGuess    =    new    double[initialGuess.length];    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
97	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[InitialGuess.length];  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  new  double[InitialGuess.length];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[InitialGuess.length];	  InitialGuess    initialGuess    =    new    double[initialGuess.length];    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
98	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  *  2  +  1];  [CE]  missing  return  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  observations  =  new  double[initialGuess.length  *  2  +  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  *  2  +  1];	  double[]    observations    =    new    double[initialGuess.length    *    2];    	non-compiled	[CE]  missing  return  statement	40	None	replace
99	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  /  2];  [CE]  missing  return  statement  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  observations  =  new  double[initialGuess.length  /  2];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  /  2];	  double[]    observations    =    new    double[initialGuess.length    *    2];    	non-compiled	[CE]  missing  return  statement	40	None	replace
100	[BUG]  [BUGGY]  init(initialGuess,  observations);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  init(initialGuess,  observations);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	init(initialGuess,  observations);	  init(initialGuess);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	99	None	replace
101	[BUG]  [BUGGY]  init(initialGuess,  observation);  [CE]  cannot  find  symbol  observation  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  init(initialGuess,  observation);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	init(initialGuess,  observation);	  init(initialGuess);    	non-compiled	[CE]  cannot  find  symbol  observation	99	None	replace
102	[BUG]  [BUGGY]  init(initialGuess,  observer);  [CE]  cannot  find  symbol  observer  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  init(initialGuess,  observer);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	init(initialGuess,  observer);	  init(initialGuess);    	non-compiled	[CE]  cannot  find  symbol  observer	99	None	replace
103	[BUG]  [BUGGY]  initialGuess  =  initialGuess.length;  [CE]  incompatible  types  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  initialGuess  =  initialGuess.length;  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	initialGuess  =  initialGuess.length;	  init(initialGuess);    	non-compiled	[CE]  incompatible  types	99	None	replace
104	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  a);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  a);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  a);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    omega);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	24	None	replace
105	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  a,  omega);  [CE]  cannot  find  symbol  a  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  a,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  a,  omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    omega);    	non-compiled	[CE]  cannot  find  symbol  a	24	None	replace
106	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anObservedPoint,  omega);  [CE]  cannot  find  symbol  anObservedPoint  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anObservedPoint,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anObservedPoint,  omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    omega);    	non-compiled	[CE]  cannot  find  symbol  anObservedPoint	24	None	replace
107	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observedPoints);  [CE]  cannot  find  symbol  observedPoints  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observedPoints);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observedPoints);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    omega);    	non-compiled	[CE]  cannot  find  symbol  observedPoints	23	None	replace
108	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues  [CE]  ';'  expected  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGues    	non-compiled	[CE]  ';'  expected	81	None	replace
109	[BUG]  [BUGGY]  final  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[Ini  [CE]  ']'  expected  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  final  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[Ini  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	final  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[Ini	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  ']'  expected	66	None	replace
110	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
111	[BUG]  [BUGGY]  final  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[InitialGu  [CE]  ']'  expected  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  final  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[InitialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	final  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[InitialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  ']'  expected	66	None	replace
112	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  +  1];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[Ini  [CE]  ']'  expected  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  observations  =  new  double[initialGuess.length  +  1];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[Ini  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  +  1];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[Ini	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  ']'  expected	66	None	replace
113	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  measurements,  initialGuess);  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  measurements,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  measurements,  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    measurements);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
114	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  measurements);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  measurements);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  measurements);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    measurements);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	125	None	replace
115	[BUG]  [BUGGY]  [FE]    [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
116	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
117	[BUG]  [BUGGY]  [FE]    [FE]          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
118	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
119	[BUG]  [BUGGY]  [FE]    [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
120	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
121	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialGuess	12	None	add
122	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	12	None	add
123	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator().Parameter(),  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator().Parameter(),  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator().Parameter(),  observations);	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter(),    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	76	None	replace
124	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator().Parameter(),  measurements);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator().Parameter(),  measurements);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator().Parameter(),  measurements);	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter(),    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	76	None	replace
125	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  observations,  omega);  [CE]  cannot  find  symbol  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  observations,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  observations,  omega);	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter(),    observations);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
126	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(),  observations);  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(),  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Fitter(),  observations);	  return    fit(initialGuess,    HarmonicOscillator.Fitter());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
127	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(a));  [CE]  cannot  find  symbol  a  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(a));  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Fitter(a));	  return    fit(initialGuess,    HarmonicOscillator.Fitter());    	non-compiled	[CE]  cannot  find  symbol  a	55	None	replace
128	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(2));  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(2));  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Fitter(2));	  return    fit(initialGuess,    HarmonicOscillator.Fitter());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
129	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGues  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGues  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGues	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
130	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i]  [CE]  ';'  expected  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i]	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
131	[BUG]  [BUGGY]  this.initialGuess  =  new  double[InitialGuess.length  +  1];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [CE]  not  a  statement  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  this.initialGuess  =  new  double[InitialGuess.length  +  1];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[InitialGuess.length  +  1];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]	  this.initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	59	None	replace
132	[BUG]  [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [CE]  not  a  statement  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]	  this.initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  not  a  statement	59	None	replace
133	[BUG]  [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    }    	non-compiled	[CE]  not  a  statement	52	None	replace
134	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  a,  observations);  [CE]  cannot  find  symbol  a  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  a,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  a,  observations);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    omega,    observations);    	non-compiled	[CE]  cannot  find  symbol  a	22	None	replace
135	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  annotated,  observations);  [CE]  cannot  find  symbol  annotated  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  annotated,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  annotated,  observations);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    omega,    observations);    	non-compiled	[CE]  cannot  find  symbol  annotated	22	None	replace
136	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anObservedPoint,  observations);  [CE]  cannot  find  symbol  anObservedPoint  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anObservedPoint,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  anObservedPoint,  observations);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    omega,    observations);    	non-compiled	[CE]  cannot  find  symbol  anObservedPoint	22	None	replace
137	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
138	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  }  [CE]  not  a  statement  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  }	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  not  a  statement	68	None	replace
139	[BUG]  [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
140	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGues  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGues  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGues	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
141	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  [CE]  ';'  expected  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	27	None	replace
142	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    for(initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length,    initialGuess.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	93	None	replace
143	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    for(initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length,    initialGuess.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	93	None	replace
144	[BUG]  [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [CE]  cannot  find  symbol  answers  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    for(initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  answers	93	None	replace
145	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    for(initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length,    initialGuess.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	93	None	replace
146	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
147	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
148	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
149	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  observations,  initialGuess,  Omega);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  observations,  initialGuess,  Omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  observations,  initialGuess,  Omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    Omega);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	50	None	replace
150	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  1;  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  1;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  1;  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
151	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
152	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
153	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
154	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].get  [CE]  ';'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].get  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].get	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObserv    	non-compiled	[CE]  ';'  expected	87	None	replace
155	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObserv    	non-compiled	[CE]  ';'  expected	87	None	replace
156	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].get  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].get  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].get	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObserv    	non-compiled	[CE]  ';'  expected	88	None	replace
157	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observations);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observations);	  return    fit(initialGuess,    HarmonicOscillator.FitterParameter());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
158	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observation);  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observation);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observation);	  return    fit(initialGuess,    HarmonicOscillator.FitterParameter());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
159	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observer);  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observer);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  observer);	  return    fit(initialGuess,    HarmonicOscillator.FitterParameter());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
160	[BUG]  [BUGGY]  if(answers  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  answers  [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  answers	13	None	replace
161	[BUG]  [BUGGY]  [FE]    [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	10	1	add
162	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	10	1	add
163	[BUG]  [BUGGY]  [FE]    [FE]          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	10	1	add
164	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	10	1	add
165	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
166	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  if(initialGuess  ==  null)  {  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	10	None	add
167	[BUG]  [BUGGY]  if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  }  [CE]  missing  return  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  0)  {  double[]  observations  =  new  double[initialGuess.length];  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  missing  return  statement	47	None	replace
168	[BUG]  [BUGGY]  if(initialGuess.length  ==  0)  {  double[]  observations  =  new  double[initialGuess.length];  }  [CE]  missing  return  statement  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length  ==  0)  {  double[]  observations  =  new  double[initialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length  ==  0)  {  double[]  observations  =  new  double[initialGuess.length];  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  missing  return  statement	47	None	replace
169	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.initialGuess.clone();  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.initialGuess.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(InitialGuess)this.initialGuess.clone();	  InitialGuess    initialGuess    =(InitialGuess)initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
170	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.originalGuess.clone();  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.originalGuess.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(InitialGuess)this.originalGuess.clone();	  InitialGuess    initialGuess    =(InitialGuess)initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
171	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.annotation.clone();  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.annotation.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(InitialGuess)this.annotation.clone();	  InitialGuess    initialGuess    =(InitialGuess)initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
172	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess(initialGuess);  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess(initialGuess);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  getInitialGuess(initialGuess);	  InitialGuess    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
173	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess().clone();  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess().clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  getInitialGuess().clone();	  InitialGuess    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
174	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess(initialGuess.length);  [CE]  cannot  find  symbol  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess(initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  getInitialGuess(initialGuess.length);	  InitialGuess    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
175	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator().Parameter());  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator().Parameter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator().Parameter());	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter());    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	36	None	replace
176	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator(),  Parameter.Parameter());  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator(),  Parameter.Parameter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator(),  Parameter.Parameter());	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter());    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	36	None	replace
177	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial  [CE]  ';'  expected  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initial	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  ';'  expected	78	None	replace
178	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }	  if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    1,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	124	None	replace
179	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  [CE]  missing  return  statement  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);	  if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    1,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	124	None	replace
180	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  observations,  1,  initialGuess.length);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  observations,  1,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  observations,  1,  initialGuess.length);	  if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    1,    initialGuess.length);    }    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	124	None	replace
181	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    InitialGuess[]    initialGuess    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
182	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    InitialGuess[]    initialGuess    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
183	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [CE]  incompatible  types  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    InitialGuess[]    initialGuess    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  incompatible  types	19	None	replace
184	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  observations,  initialGuess);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  observations,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  observations,  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    observation);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
185	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	116	None	replace
186	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	116	None	replace
187	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess.length);  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  initialGuess.length);	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	116	None	replace
188	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	116	None	replace
189	[BUG]  [BUGGY]  float[]  observations  =  new  float[initialGuess.length  +  1];  [CE]  missing  return  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  float[]  observations  =  new  float[initialGuess.length  +  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	float[]  observations  =  new  float[initialGuess.length  +  1];	  float[]    observations    =    new    float[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	39	None	replace
190	[BUG]  [BUGGY]  int[]  observations  =  new  int[initialGuess.length];  [CE]  missing  return  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  int[]  observations  =  new  int[initialGuess.length];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	int[]  observations  =  new  int[initialGuess.length];	  float[]    observations    =    new    float[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	39	None	replace
191	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  omega,  initialGuess);  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  omega,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  omega,  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    omega);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
192	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  omega.Parameter(),  initialGuess);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  omega.Parameter(),  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  omega.Parameter(),  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	33	None	replace
193	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  omega,  initialGuess);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  omega,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  omega,  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	33	None	replace
194	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  observations,  initialGuess,  omega);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  observations,  initialGuess,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parametric(),  observations,  initialGuess,  omega);	  return    fit(new    HarmonicOscillator().Parametric(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	49	None	replace
195	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  observations,  omega);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  observations,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  observations,  omega);	  return    fit(new    HarmonicOscillator().Parametric(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	49	None	replace
196	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  omega,  initialGuess);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  omega,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parametric(),  omega,  initialGuess);	  return    fit(new    HarmonicOscillator().Parametric(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	49	None	replace
197	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  omega,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  omega,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  omega,  observations);	  return    fit(new    HarmonicOscillator().Parametric(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	49	None	replace
198	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[InitialGuess.length  -  1];  [CE]  cannot  find  symbol  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  new  double[InitialGuess.length  -  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[InitialGuess.length  -  1];	  InitialGuess    initialGuess    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
199	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  -  2];  [CE]  cannot  find  symbol  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  -  2];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[initialGuess.length  -  2];	  InitialGuess    initialGuess    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
200	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1  +  1];  [CE]  cannot  find  symbol  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1  +  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1  +  1];	  InitialGuess    initialGuess    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
201	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  double[0];  }  [CE]  incompatible  types  [FE]                            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  double[0];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  initialGuess[i]  =  new  double[0];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[0];    }    	non-compiled	[CE]  incompatible  types	4	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[0];  }  [CE]  cannot  find  symbol  setInitialGuess  [FE]                              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[0];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[0];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[0];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	4	None	replace
203	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
204	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  }  [CE]  not  a  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  }	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  not  a  statement	72	None	replace
205	[BUG]  [BUGGY]  this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
206	[BUG]  [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  answers  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(answers    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  answers	118	None	replace
207	[BUG]  [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  answers  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(answers    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  answers	118	None	replace
208	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	92	None	replace
209	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterType.Parameter());  [CE]  cannot  find  symbol  FitterType  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterType.Parameter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FitterType.Parameter());	  return    fit(initialGuess,    HarmonicOscillator.Parameter());    	non-compiled	[CE]  cannot  find  symbol  FitterType	56	None	replace
210	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
211	[BUG]  [BUGGY]  []  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  []  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
212	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  injections  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i!=  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    injections[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  injections	95	None	replace
213	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  injections  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  ==  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    injections[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  injections	95	None	replace
214	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }  [CE]  incompatible  types  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >>  0;  i--)  {  injections[i]  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    injections[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  incompatible  types	95	None	replace
215	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGu  [CE]  ']'  expected  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  ']'  expected	67	None	replace
216	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(answer!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(answer!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(answer!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
217	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(answer!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(answer!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(answer!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
218	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[ini  [CE]  ']'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[ini  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[ini	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  ']'  expected	67	None	replace
219	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
220	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
221	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGu  [CE]  ')'  expected  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
222	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess  ==  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess  ==  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess  ==  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
223	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  -  1  +  1];  [CE]  missing  return  statement  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  observations  =  new  double[initialGuess.length  -  1  +  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  -  1  +  1];	  double[]    observations    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  missing  return  statement	38	None	replace
224	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[INITIAL_GUESS.length];  }  [CE]  cannot  find  symbol  INITIAL_GUESS  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[INITIAL_GUESS.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[INITIAL_GUESS.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  INITIAL_GUESS	16	None	replace
225	[BUG]  [BUGGY]  init(initialGuess,  initialGuess);  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  init(initialGuess,  initialGuess);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	init(initialGuess,  initialGuess);	  init(initialGuess);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
226	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
227	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObserv  [CE]  ';'  expected  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObserv  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObserv	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  ';'  expected	103	None	replace
228	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  false,  observations);  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  false,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  false,  observations);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    omega,    observations);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	22	None	replace
229	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements);  [CE]  cannot  find  symbol  measurements  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    omega,    observations);    	non-compiled	[CE]  cannot  find  symbol  measurements	22	None	replace
230	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [CE]  ')'  expected  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	46	None	replace
231	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  omega,  initialGuess);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  omega,  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  omega,  initialGuess);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	33	None	replace
232	[BUG]  [BUGGY]  InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  1  +  1];  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  1  +  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialValues[]  initialGuess  =  new  double[initialGuess.length  -  1  +  1];	  InitialValues[]    initialGuess    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
233	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  -  2);  [CE]  missing  return  statement  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  -  2);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  -  2);	  System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    	non-compiled	[CE]  missing  return  statement	21	None	replace
234	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  +  1);  [CE]  missing  return  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  +  1);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length  +  1);	  System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    	non-compiled	[CE]  missing  return  statement	21	None	replace
235	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [CE]  ';'  expected  [FE]                            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess    *    	non-compiled	[CE]  ';'  expected	82	None	replace
236	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess  *  [CE]  illegal  start  of  expression  [FE]                              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess  *  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess  *	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess    *    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
237	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FIELD_NAMES,  Parameter.Parameter());  [CE]  cannot  find  symbol  FIELD_NAMES  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FIELD_NAMES,  Parameter.Parameter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FIELD_NAMES,  Parameter.Parameter());	  return    fit(initialGuess,    HarmonicOscillator.Parameter());    	non-compiled	[CE]  cannot  find  symbol  FIELD_NAMES	56	None	replace
238	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	116	None	replace
239	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	116	None	replace
240	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length  +  1,  initialGuess.length);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length  +  1,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length  +  1,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	116	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  double[INITIAL_GUESS.length];  }  [CE]  cannot  find  symbol  injections  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  double[INITIAL_GUESS.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  double[INITIAL_GUESS.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    injections[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  injections	95	None	replace
242	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
243	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  omega);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  omega);	  return    fit(new    HarmonicOscillator(),    initialGuess);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	101	None	replace
244	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FITTER_Parameter());  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FITTER_Parameter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FITTER_Parameter());	  return    fit(initialGuess,    HarmonicOscillator.FitterParameter());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
245	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter())+  1;  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter())+  1;  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FitterParameter())+  1;	  return    fit(initialGuess,    HarmonicOscillator.FitterParameter());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
246	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.toArray(new  double[initialGuess.size()  ]);  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.toArray(new  double[initialGuess.size()  ]);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.toArray(new  double[initialGuess.size()  ]);	  if(initialGuess    ==    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[2];    }    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
247	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[1]  :  initialGuess.length;  [CE]  cannot  find  symbol  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[1]  :  initialGuess.length;  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[1]  :  initialGuess.length;	  InitialGuess    initialGuess    =(initialGuess    ==    null)?    new    double[0]    :    initialGuess.length;    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
248	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.toArray(new  double[initialGuess.length]);  [CE]  cannot  find  symbol  [FE]                            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.toArray(new  double[initialGuess.length]);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  initialGuess.toArray(new  double[initialGuess.length]);	  InitialGuess    initialGuess    =(initialGuess    ==    null)?    new    double[0]    :    initialGuess.length;    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
249	[BUG]  [BUGGY]  For(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [CE]  '.class'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  For(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	For(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  initialGuess  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    InitialGuess[]    initialGuess    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  '.class'  expected	19	None	replace
250	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FITTTER());  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FITTTER());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FITTTER());	  return    fit(initialGuess,    HarmonicOscillator.Fitter());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
251	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
252	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	11	None	replace
253	[BUG]  [BUGGY]  return  fit(initialGuess,  initialGuess,  new  HarmonicOscillator.Parameter());  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  initialGuess,  new  HarmonicOscillator.Parameter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  initialGuess,  new  HarmonicOscillator.Parameter());	  return    fit(initialGuess,    observations,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
254	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
255	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  [CE]  ';'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	6	None	replace
256	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    for(initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	15	None	replace
257	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parametric(),  initialGuess,  observations);	  return    fit(new    HarmonicOscillator().Parametric(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	49	None	replace
258	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initial  =  new  double[InitialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initial  =  new  double[InitialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initial  =  new  double[InitialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	92	None	replace
259	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[InitialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[InitialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initial  =  new  double[InitialGuess.length];  System.arraycopy(initial,  0,  initial,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  InitialGuess	92	None	replace
260	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  illegal  start  of  expression  [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  for(initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  illegal  start  of  expression	12	None	add
261	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
262	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  [CE]  illegal  start  of  expression  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i]    *    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
263	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGu  [CE]  ')'  expected  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	112	None	replace
264	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
265	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
266	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess  *  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess  *  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess  *	  if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    observations[i];    }    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
267	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.  observations.clone();  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.  observations.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(InitialGuess)this.  observations.clone();	  InitialGuess    initialGuess    =(InitialGuess)initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
268	[BUG]  [BUGGY]  setInitialGuess[i]  =  new  double[initialGuess.length];  [CE]  cannot  find  symbol  setInitialGuess  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  setInitialGuess[i]  =  new  double[initialGuess.length];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	setInitialGuess[i]  =  new  double[initialGuess.length];	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    setInitialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	122	None	replace
269	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGues,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  initialGues  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGues,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGues,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations[0]    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  initialGues	119	None	replace
270	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  initialGuess);  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  initialGuess);	  return    fit(initialGuess,    new    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
271	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  1,  initialGuess.length);  }	  if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    1,    initialGuess.length);    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	124	None	replace
272	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator(),  parameters);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator(),  parameters);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator(),  parameters);	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter(),    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	76	None	replace
273	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  InitialGuess  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  InitialGuess  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  InitialGuess  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	  if(initialGuess!=    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    }    	non-compiled	[CE]  not  a  statement	110	None	replace
274	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    }    	non-compiled	[CE]  not  a  statement	57	None	replace
275	[BUG]  [BUGGY]  double[]  observations  =  new  double[initialGuess.length  *  1];  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  observations  =  new  double[initialGuess.length  *  1];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  observations  =  new  double[initialGuess.length  *  1];	  double[]    observations    =    new    double[initialGuess.length    +    1];    	non-compiled	[CE]  missing  return  statement	37	None	replace
276	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  parameters,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  parameters,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  parameters,  observations);	  return    fit(new    HarmonicOscillator().Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	121	None	replace
277	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  weightedObservedPoint);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  weightedObservedPoint);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  weightedObservedPoint);	  return    fit(new    HarmonicOscillator().Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	121	None	replace
278	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	44	None	replace
279	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial  [CE]  ')'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initial	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess.length!=    0)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
280	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [CE]  ')'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess.length!=    0)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  ')'  expected	48	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  =  new  Double[InitialGuess.length];  }  [CE]  not  a  statement  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  =  new  Double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  InitialGuess[]  =  new  Double[InitialGuess.length];  }	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    Double[InitialGuess.length];    }    	non-compiled	[CE]  not  a  statement	114	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  Double[InitialGuess.length];  }  [CE]  cannot  find  symbol  injections  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  Double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injections[i]  =  new  Double[InitialGuess.length];  }	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    Double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  injections	114	None	replace
283	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
284	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [CE]  ';'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObserv    	non-compiled	[CE]  ';'  expected	87	None	replace
285	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length  +  1];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObserv    	non-compiled	[CE]  ';'  expected	87	None	replace
286	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
287	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
288	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0  [CE]  ';'  expected  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  ';'  expected	66	None	replace
289	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1].doubleValue();  [CE]  cannot  find  symbol  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1].doubleValue();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  new  double[initialGuess.length  -  1].doubleValue();	  InitialGuess    initialGuess    =    new    double[initialGuess.length    -    1];    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
290	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  parameters,  weightedObservedPoints);  [CE]  cannot  find  symbol  parameters  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  parameters,  weightedObservedPoints);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  parameters,  weightedObservedPoints);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    weightedObservedPoints);    	non-compiled	[CE]  cannot  find  symbol  parameters	111	None	replace
291	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  InitialGuess  [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  cannot  find  symbol  InitialGuess	10	None	add
292	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	9	None	replace
293	[BUG]  [BUGGY]  return  fit(initialGuess,  intuition,  new  HarmonicOscillator.Parametric());  [CE]  cannot  find  symbol  intuition  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  intuition,  new  HarmonicOscillator.Parametric());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  intuition,  new  HarmonicOscillator.Parametric());	  return    fit(initialGuess,    observer,    new    HarmonicOscillator.Parametric());    	non-compiled	[CE]  cannot  find  symbol  intuition	31	None	replace
294	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  [CE]  not  a  statement  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  not  a  statement	68	None	replace
295	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  [CE]  not  a  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGu	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  not  a  statement	72	None	replace
296	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGu  [CE]  ';'  expected  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  ';'  expected	67	None	replace
297	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGu  [CE]  ';'  expected  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  ';'  expected	67	None	replace
298	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
299	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
300	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements,  omega);  [CE]  cannot  find  symbol  measurements  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  measurements,  omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    omega);    	non-compiled	[CE]  cannot  find  symbol  measurements	24	None	replace
301	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  0,  omega);  [CE]  cannot  find  symbol  omega  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  0,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  0,  omega);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    omega);    	non-compiled	[CE]  cannot  find  symbol  omega	24	None	replace
302	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  initialGuess);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  initialGuess);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric(),  initialGuess);	  return    fit(initialGuess,    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
303	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  parameters);  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  parameters);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric(),  parameters);	  return    fit(initialGuess,    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
304	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess().doubleValue();  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess().doubleValue();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  getInitialGuess().doubleValue();	  InitialGuess    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
305	[BUG]  [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGues.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  answers  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGues.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGues.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(observes    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  answers	117	None	replace
306	[BUG]  [BUGGY]  float[]  observations  =  new  double[initialGuess.length];  [CE]  incompatible  types  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  float[]  observations  =  new  double[initialGuess.length];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	float[]  observations  =  new  double[initialGuess.length];	  float[]    observations    =    new    float[initialGuess.length];    	non-compiled	[CE]  incompatible  types	39	None	replace
307	[BUG]  [BUGGY]  int  initialGuess  =  new  float[initialGuess.length];  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  int  initialGuess  =  new  float[initialGuess.length];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	int  initialGuess  =  new  float[initialGuess.length];	  float[]    observations    =    new    float[initialGuess.length];    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	39	None	replace
308	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parameter(),  new  HarmonicOscillator());  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parameter(),  new  HarmonicOscillator());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parameter(),  new  HarmonicOscillator());	  return    fit(initialGuess.Parameter(),    new    HarmonicOscillator());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
309	[BUG]  [BUGGY]  int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  not  a  statement  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >>    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  not  a  statement	18	None	replace
310	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGUess.length);  }  [CE]  cannot  find  symbol  initialGUess  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGUess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  initialGUess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    for(initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess.length,    initialGuess.length);    }    	non-compiled	[CE]  cannot  find  symbol  initialGUess	93	None	replace
311	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Fitter());  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Fitter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Fitter());	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
312	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.FitterParameter());  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.FitterParameter());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.FitterParameter());	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter());    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
313	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  weightedObservedPoint);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  weightedObservedPoint);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  weightedObservedPoint);	  return    fit(new    HarmonicOscillator(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	32	None	replace
314	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length  +  1];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length  +  1];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length  +  1];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  0;  i  <	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
315	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  inputGuess,  0,  initialGuess.length);  [CE]  cannot  find  symbol  inputGuess  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  inputGuess,  0,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  inputGuess,  0,  initialGuess.length);	  System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    	non-compiled	[CE]  cannot  find  symbol  inputGuess	20	None	replace
316	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  parameters,  0,  initialGuess.length);  [CE]  cannot  find  symbol  parameters  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  parameters,  0,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  parameters,  0,  initialGuess.length);	  System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    	non-compiled	[CE]  cannot  find  symbol  parameters	20	None	replace
317	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess.length,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	14	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[1];  }  [CE]  cannot  find  symbol  setInitialGuess  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[1];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[1];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	1	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[1];  }  [CE]  cannot  find  symbol  parameters  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[1];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[1];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[1];    }    	non-compiled	[CE]  cannot  find  symbol  parameters	1	None	replace
320	[BUG]  [BUGGY]  System.arraycopy(initialGuess,  0,  prototype,  0,  initialGuess.length);  [CE]  cannot  find  symbol  prototype  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  System.arraycopy(initialGuess,  0,  prototype,  0,  initialGuess.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	System.arraycopy(initialGuess,  0,  prototype,  0,  initialGuess.length);	  System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    	non-compiled	[CE]  cannot  find  symbol  prototype	21	None	replace
321	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  [CE]  ';'  expected  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i]    *    	non-compiled	[CE]  ';'  expected	42	None	replace
322	[BUG]  [BUGGY]  float[]  observations  =  new  float[initialGuess.length  *  2];  [CE]  missing  return  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  float[]  observations  =  new  float[initialGuess.length  *  2];  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	float[]  observations  =  new  float[initialGuess.length  *  2];	  float[]    observations    =    new    float[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	39	None	replace
323	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observer,  false);  [CE]  cannot  find  symbol  observer  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observer,  false);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observer,  false);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    false);    	non-compiled	[CE]  cannot  find  symbol  observer	71	None	replace
324	[BUG]  [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	45	None	replace
325	[BUG]  [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  1,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  1,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  1,  initialGuess.length);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    observations,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	45	None	replace
326	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  0,  initialGuess.length);  }	  if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	69	None	replace
327	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  1;  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  1;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  1;  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
328	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    1;    }    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
329	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations  [CE]  not  a  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    1;    }    	non-compiled	[CE]  not  a  statement	113	None	replace
330	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observationCount);  [CE]  cannot  find  symbol  observationCount  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observationCount);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observationCount);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    anchor);    	non-compiled	[CE]  cannot  find  symbol  observationCount	51	None	replace
331	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  initialGuess[i]  =  new  Double[InitialGuess.length];  }	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    Double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
332	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  Double[InitialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  Double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  Double[InitialGuess.length];  }	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    Double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
333	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  initialGuess,  observations);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Parametric(),  initialGuess,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Parametric(),  initialGuess,  observations);	  return    fit(initialGuess,    HarmonicOscillator.Parametric(),    observations);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
334	[BUG]  [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess.length!=  0)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess.length!=    0)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
335	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observation,  omega);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observation,  omega);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  initialGuess,  observation,  omega);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    observation);    	non-compiled	[CE]  cannot  find  symbol	120	None	replace
336	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  }	  if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGu    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
337	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  for(int  i  =  0;  i  <	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
338	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);  for(int  i  =  0;  i  <  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);  for(int  i  =  0;  i  <	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    i    <    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
339	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i]  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i]  *  initialGuess[i]	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i]    *    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	41	None	replace
340	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  1,  initialGuess.length);  }  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  1,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  1,  initialGuess.length);  }	  if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    1,    initialGuess.length);    }    	non-compiled	[CE]  missing  return  statement	124	None	replace
341	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  [CE]  <identifier>  expected  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
342	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
343	[BUG]  [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGu  [CE]  ']'  expected  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  double[initialGu	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  ']'  expected	67	None	replace
344	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  [CE]  <identifier>  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  observations[i]  =  new	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    observations[i]    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  <identifier>  expected	67	None	replace
345	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	74	None	replace
346	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i]  [CE]  ';'  expected  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i]	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	74	None	replace
347	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);  for(int  i  =  0;  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);  for(int  i  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  annotations,  0,  initialGuess.length);  for(int  i  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
348	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  InitialGuess  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [CE]  not  a  statement  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  InitialGuess  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  InitialGuess  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  initialGuess[i]  }	  if(initialGuess!=    null)    {    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    }    	non-compiled	[CE]  not  a  statement	110	None	replace
349	[BUG]  [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
350	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parametric(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
351	[BUG]  [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  }  [CE]  missing  return  statement  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    	non-compiled	[CE]  missing  return  statement	47	None	replace
352	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObserv    	non-compiled	[CE]  ';'  expected	88	None	replace
353	[BUG]  [BUGGY]  if(answers!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [CE]  ';'  expected  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObserv	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObserv    	non-compiled	[CE]  ';'  expected	88	None	replace
354	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  for(int  i  =  0;  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  for(int  i  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  for(int  i  =  0;  }	  if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    0;    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
355	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  0;  }	  if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    0;    }    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
356	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	8	None	replace
357	[BUG]  [BUGGY]  return  fit(initialGuess.parameter(),  new  HarmonicOscillator());  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess.parameter(),  new  HarmonicOscillator());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess.parameter(),  new  HarmonicOscillator());	  return    fit(initialGuess.Parameter(),    new    HarmonicOscillator());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
358	[BUG]  [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i]  [CE]  ';'  expected  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i]  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i]	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  ';'  expected	73	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[2];  }  [CE]  cannot  find  symbol  setInitialGuess  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[2];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[2];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[2];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	2	None	replace
360	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[0];  }  [CE]  cannot  find  symbol  parameters  [FE]                            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[0];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[0];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[0];    }    	non-compiled	[CE]  cannot  find  symbol  parameters	4	None	replace
361	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injects[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  injects  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injects[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  injects[i]  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    injections[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  injects	95	None	replace
362	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	102	None	replace
363	[BUG]  [BUGGY]  [FE]    [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
364	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [FE]    [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  observations,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
365	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(observes,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  cannot  find  symbol  observes  [FE]          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(observes,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(observes,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  cannot  find  symbol  observes	12	None	add
366	[BUG]  [BUGGY]  [FE]    [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(observations,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	add	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(observations,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
367	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(observations,  0,  initialGuess,  0,  initialGuess.length);  }  [FE]    [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(observations,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  double[]  observations  =  new  double[initialGuess.length];  System.arraycopy(observations,  0,  initialGuess,  0,  initialGuess.length);  }	  	compilable	  [FE]    	12	1	add
368	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(initialGuess));  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(initialGuess));  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Fitter(initialGuess));	  return    fit(initialGuess,    HarmonicOscillator.Fitter());    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
369	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(answers));  [CE]  cannot  find  symbol  answers  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.Fitter(answers));  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.Fitter(answers));	  return    fit(initialGuess,    HarmonicOscillator.Fitter());    	non-compiled	[CE]  cannot  find  symbol  answers	55	None	replace
370	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  missing  return  statement  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  }  else  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    double[]    observations    =    new    double[initialGuess.length];    	non-compiled	[CE]  missing  return  statement	44	None	replace
371	[BUG]  [BUGGY]  if(initialGuess  ==  null  ||  initialGuess.length  <  2)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess  ==  null  ||  initialGuess.length  <  2)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess  ==  null  ||  initialGuess.length  <  2)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  observations[i].getObservedPoint();  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    observations[i].getObservedPoint();    }    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
372	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observed);  [CE]  cannot  find  symbol  observed  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observed);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observed);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    omega,    observations);    	non-compiled	[CE]  cannot  find  symbol  observed	22	None	replace
373	[BUG]  [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess().cloneTree();  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =  getInitialGuess().cloneTree();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =  getInitialGuess().cloneTree();	  InitialGuess    initialGuess    =    getInitialGuess();    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
374	[BUG]  [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  return  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  unreachable  statement  [FE]        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  initialGuess  =  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  if(initialGuess  ==  null)  {  return  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	                if(initialGuess        ==        null)        {        double[]        observations        =        new        double[initialGuess.length];        System.arraycopy(initialGuess,        0,        initialGuess,        0,        initialGuess.length);        }        if(initialGuess    ==    null)    {    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess  ==  null)  {  return  new  double[initialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	  	non-compiled	[CE]  unreachable  statement	10	None	add
375	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[3];  }  [CE]  cannot  find  symbol  setInitialGuess  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[3];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[3];  }	  for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    initialGuess[i]    =    new    double[3];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	3	None	replace
376	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  omega,  observations);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  omega,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  omega,  observations);	  return    fit(new    HarmonicOscillator().Parameter(),    initialGuess,    omega);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	34	None	replace
377	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  weightedObservedPoints);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  weightedObservedPoints);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator(),  initialGuess,  observations,  weightedObservedPoints);	  return    fit(new    HarmonicOscillator(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	32	None	replace
378	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  setInitialGuess  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i!=    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  setInitialGuess	17	None	replace
379	[BUG]  [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CE]  cannot  find  symbol  initialGuess  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }	  this.initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  cannot  find  symbol  initialGuess	59	None	replace
380	[BUG]  [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [CE]  ')'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	this.initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  i++)  {  return  fit(new  HarmonicOscillator.Parametric(),  initialGu	  this.initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    i++)    {    initialGuess[i]    	non-compiled	[CE]  ')'  expected	59	None	replace
381	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  initialGuess,  observations);  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  initialGuess,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  initialGuess,  observations);	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter(),    observations);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
382	[BUG]  [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  parameters);  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  parameters);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  new  HarmonicOscillator.Parameter(),  parameters);	  return    fit(initialGuess,    new    HarmonicOscillator.Parameter(),    observations);    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
383	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues  [CE]  ';'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGues	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  ';'  expected	91	None	replace
384	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
385	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initialGuess,  0,  initialGuess.length);  for(int  i  =	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    for(int    i    =    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
386	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  2;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  2;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  2;  i  >=  0;  i--)  {  setInitialGuess[i]  =  new  double[InitialGuess.length];  }	  if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    setInitialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
387	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterInitialValue());  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterInitialValue());  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FitterInitialValue());	  return    fit(initialGuess,    HarmonicOscillator.Parameter());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
388	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
389	[BUG]  [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[InitialGuess.length];  }  [CE]  cannot  find  symbol  parameters  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[InitialGuess.length];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  parameters[i]  =  new  double[InitialGuess.length];  }	  for(int    i    =    initialGuess.length    -    1;    i    >>    0;    i--)    {    initialGuess[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  cannot  find  symbol  parameters	18	None	replace
390	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i].getObservedPoint();  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i].getObservedPoint();    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	61	None	replace
391	[BUG]  [BUGGY]  init(initialGuess,  observations.length);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  init(initialGuess,  observations.length);  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	init(initialGuess,  observations.length);	  init(initialGuess);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	99	None	replace
392	[BUG]  [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  intuition);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  intuition);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(initialGuess,  HarmonicOscillator.FitterParameter(),  intuition);	  return    fit(initialGuess,    HarmonicOscillator.FitterParameter());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
393	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [CE]  ';'  expected  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGu    	non-compiled	[CE]  ';'  expected	80	None	replace
394	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuesess  ==  null)?  new  double[0]  :  initialGuess.length;  [CE]  cannot  find  symbol  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuesess  ==  null)?  new  double[0]  :  initialGuess.length;  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuesess  ==  null)?  new  double[0]  :  initialGuess.length;	  InitialGuess    initialGuess    =(initialGuess!=    null)?    new    double[0]    :    initialGuess.length;    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
395	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  weightedObservedPoints);  [CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  weightedObservedPoints);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator().Parameter(),  initialGuess,  observations,  weightedObservedPoints);	  return    fit(new    HarmonicOscillator().Parameter(),    initialGuess,    observations);    	non-compiled	[CE]  constructor  HarmonicOscillator  in  class  HarmonicOscillator  cannot  be  applied  to  given  types;	121	None	replace
396	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega,  a);  [CE]  observations  has  private  access  in  CurveFitter  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega,  a);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  omega,  a);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    omega);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	24	None	replace
397	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	28	None	replace
398	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  omega,  observations);  [CE]  cannot  find  symbol  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parameter(),  omega,  observations);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parameter(),  omega,  observations);	  return    fit(new    HarmonicOscillator.Parameter(),    initialGuess,    omega);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
399	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.observes.clone();  [CE]  cannot  find  symbol  [FE]                [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(InitialGuess)this.observes.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(InitialGuess)this.observes.clone();	  InitialGuess    initialGuess    =(InitialGuess)initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
400	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation  [CE]  ';'  expected  [FE]                          [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  observations.length;  ++i)  {  observations[i]  =  initialGuess[i]  *  annotation	  if(initialGuess!=    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    observations.length;    ++i)    {    observations[i]    =    initialGuess[i]    *    annotation    	non-compiled	[CE]  ';'  expected	108	None	replace
401	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initial],  0,  initialGuess.length);  }  [CE]  ')'  expected  [FE]                    [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initial],  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initial  =  new  double[initialGuess.length];  System.arraycopy(initial,  0,  initial],  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    for(initialGuess    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  ')'  expected	15	None	replace
402	[BUG]  [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  this.weightedObservedPoints);  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  this.weightedObservedPoints);  [BUGGY]      }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	return  fit(new  HarmonicOscillator.Parametric(),  initialGuess,  observations,  this.weightedObservedPoints);	  return    fit(new    HarmonicOscillator.Parametric(),    initialGuess,    observations,    weightedObservedPoints);    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	111	None	replace
403	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]                  [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[InitialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGuess[i];  }	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[InitialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGuess[i];    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	90	None	replace
404	[BUG]  [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [CE]  ';'  expected  [FE]                      [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(answers  ==  null)  {  double[]  initialGuess  =  new  double[initialGuess.length];  for(int  i  =  0;  i  <  initialGuess.length;  ++i)  {  observations[i]  =  initialGu	  if(initialGuess    ==    null)    {    double[]    initialGuess    =    new    double[initialGuess.length];    for(int    i    =    0;    i    <    initialGuess.length;    ++i)    {    observations[i]    =    initialGu    	non-compiled	[CE]  ';'  expected	79	None	replace
405	[BUG]  [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[In  [CE]  ']'  expected  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[In  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	double[]  initialGuess  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  >=  0;  i--)  {  observations[i]  =  new  double[In	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  ']'  expected	66	None	replace
406	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  <  0;  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  <  0;  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  for(int  i  =  initialGuess.length  -  1;  i  <  0;	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    for(int    i    =    initialGuess.length    -    1;    i    >=    0;    i--)    {    observations[i]    =    new    double[InitialGuess.length];    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
407	[BUG]  [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  this.initialGuess.clone();  [CE]  cannot  find  symbol  [FE]                        [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  this.initialGuess.clone();  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	InitialGuess  initialGuess  =(initialGuess  ==  null)?  new  double[0]  :  this.initialGuess.clone();	  InitialGuess    initialGuess    =(initialGuess    ==    null)?    new    double[0]    :    initialGuess.clone();    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
408	[BUG]  [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess.length!=  1)  {  double[]  observations  =  new  double[initialGuess.length];  if(initialGuess!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
409	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  observations  =  new  double[initialGuess.length];  if(observations!=  null)  {  return  fit(new  HarmonicOscillator.Parameter(),  initialGuess);  }	          double[]    observations    =    new    double[initialGuess.length];    if(initialGuess!=    null)    {    double[]    observations    =    new    double[initialGuess.length];    }    else    {    return    fit(new    HarmonicOscillator.Parameter(),    initialGuess);    }    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
410	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]            [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGuess.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	92	None	replace
411	[BUG]  [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGues.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])  [FE]              [CONTEXT]      public  double[]  fit(double[]  initialGuess)  {      [BUGGY]  if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGues.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }  [BUGGY]      return  fit(new  HarmonicOscillator.Parametric(),  initialGuess);  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  double[]  initialGuess  [VARIABLES]  boolean  WeightedObservedPoint[]  observations  double[]  initialGuess  double  a  omega  phi  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	62	62	0	replace	if(initialGuess!=  null)  {  double[]  initialGuess  =  new  double[InitialGues.length];  System.arraycopy(initialGuess,  0,  initialGuess,  0,  initialGuess.length);  }	          if(initialGuess    ==    null)    {    double[]    observations    =    new    double[initialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    if(initialGuess    ==    null)    {    initialGuess    =    new    double[InitialGuess.length];    System.arraycopy(initialGuess,    0,    initialGuess,    0,    initialGuess.length);    }    	non-compiled	[CE]  variable  initialGuess  is  already  defined  in  method  fit(double[])	92	None	replace
