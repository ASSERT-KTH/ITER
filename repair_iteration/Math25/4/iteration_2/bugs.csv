bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    Point    phi    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
2	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    Point    phi    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
3	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    Point    phi    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
4	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =  [CE]  illegal  start  of  expression  [FE]                        [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    Point    phi    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
5	[BUG]  [BUGGY]  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [CE]  missing  return  statement  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    }    	non-compiled	[CE]  missing  return  statement	3	None	replace
6	[BUG]  [BUGGY]  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0,  len  =  points.length;  i  <  len;  ++i)  {  }  [CE]  missing  return  statement  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0,  len  =  points.length;  i  <  len;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0,  len  =  points.length;  i  <  len;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    }    	non-compiled	[CE]  missing  return  statement	3	None	replace
7	[BUG]  [BUGGY]  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
8	[BUG]  [BUGGY]  WeightedObservedPoint[]  points  =  getObservations();  for(int  j  =  0;  j  <  points.length;  ++j)  {  }  [CE]  missing  return  statement  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  points  =  getObservations();  for(int  j  =  0;  j  <  points.length;  ++j)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  points  =  getObservations();  for(int  j  =  0;  j  <  points.length;  ++j)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    }    	non-compiled	[CE]  missing  return  statement	3	None	replace
9	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
10	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
11	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
12	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	for(int  i  =  0;  i  <  points.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
13	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().clone();  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().clone();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getObservedPoints().clone();	      WeightedObservedPoint[]    observations    =    getObservedPoints();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
14	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[temps.size()  ]);  [CE]  cannot  find  symbol  temps  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[temps.size()  ]);  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[temps.size()  ]);	      WeightedObservedPoint[]    observations    =    getObservedPoints();    	non-compiled	[CE]  cannot  find  symbol  temps	14	None	replace
15	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[0]);  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[0]);	      WeightedObservedPoint[]    observations    =    getObservedPoints();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
16	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations();  [CE]  cannot  find  symbol  [FE]        [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getStandardObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getStandardObservations();	      WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
17	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getWeightedObservations();  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getWeightedObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getWeightedObservations();	      WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
18	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations();  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getAllObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getAllObservations();	      WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
19	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getFixedObservations();  [CE]  cannot  find  symbol  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getFixedObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getFixedObservations();	      WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
21	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
22	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
23	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
25	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
26	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
27	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega)).a);  [CE]  ';'  expected  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega)).a);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  omega)).a);	  return    fit((    new    ParameterGuesser(getObservations())).a);    	non-compiled	[CE]  ';'  expected	13	None	replace
28	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations)).a);  [CE]  ';'  expected  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations)).a);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  observations)).a);	  return    fit((    new    ParameterGuesser(getObservations())).a);    	non-compiled	[CE]  ';'  expected	13	None	replace
29	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations.length)).a);  [CE]  ';'  expected  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations.length)).a);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  observations.length)).a);	  return    fit((    new    ParameterGuesser(getObservations())).a);    	non-compiled	[CE]  ';'  expected	13	None	replace
30	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega),  getObservations()).a);  [CE]  ';'  expected  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega),  getObservations()).a);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  omega),  getObservations()).a);	  return    fit((    new    ParameterGuesser(getObservations())).a);    	non-compiled	[CE]  ';'  expected	13	None	replace
31	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).as());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).as());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getObservations())).as());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
32	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getReturnPoint())).guess());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getReturnPoint())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getReturnPoint())).guess());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
33	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations(),  this)).guess());  [CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations(),  this)).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getObservations(),  this)).guess());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;	12	None	replace
34	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).a.guess());  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).a.guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getObservations())).a.guess());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	replace
35	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  ((  new  ParameterGuesser(getObservations())).guess());  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  ((  new  ParameterGuesser(getObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((    new    ParameterGuesser(getObservations())).guess());    ((  new  ParameterGuesser(getObservations())).guess());	  	non-compiled	[CE]  not  a  statement	11	None	add
36	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  (  new  ParameterGuesser(getObservations())).guess());  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  (  new  ParameterGuesser(getObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((    new    ParameterGuesser(getObservations())).guess());    (  new  ParameterGuesser(getObservations())).guess());	  	non-compiled	[CE]  ';'  expected	11	None	add
37	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  if(getObservations()!=  null)  {  return((  new  ParameterGuesser(getObservations())).guess());  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  if(getObservations()!=  null)  {  return((  new  ParameterGuesser(getObservations())).guess());  }  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((    new    ParameterGuesser(getObservations())).guess());    if(getObservations()!=  null)  {  return((  new  ParameterGuesser(getObservations())).guess());  }	  	non-compiled	[CE]  unreachable  statement	11	None	add
38	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
39	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
40	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
41	[BUG]  [BUGGY]  while(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  while(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	while(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
42	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  (new  ParameterGuesser(getObservations())).guess();  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  (new  ParameterGuesser(getObservations())).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    (new  ParameterGuesser(getObservations())).guess();	  	non-compiled	[CE]  unreachable  statement	9	None	add
43	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  ((  ParameterGuesser(getObservations())).guess());  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  ((  ParameterGuesser(getObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    ((  ParameterGuesser(getObservations())).guess());	  	non-compiled	[CE]  not  a  statement	9	None	add
44	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  if(getObservations()!=  null)  {  return(new  ParameterGuesser(getObservations())).guess();  }  [CE]  unreachable  statement  [FE]        AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  if(getObservations()!=  null)  {  return(new  ParameterGuesser(getObservations())).guess();  }  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    if(getObservations()!=  null)  {  return(new  ParameterGuesser(getObservations())).guess();  }	  	non-compiled	[CE]  unreachable  statement	9	None	add
45	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  (new  ParameterGuesser(getObservations())).guess());  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  (new  ParameterGuesser(getObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    (new  ParameterGuesser(getObservations())).guess());	  	non-compiled	[CE]  ';'  expected	9	None	add
46	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getStandardObservations())).guess());  [CE]  ';'  expected  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getStandardObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getStandardObservations())).guess());	  return    fit((    new    ParameterGuesser(getStandardObservations())).guess());    	non-compiled	[CE]  ';'  expected	19	None	replace
47	[BUG]  [BUGGY]  return  fit(getStandardObservations(),  new  ParameterGuesser(getStandardObservations())).guess());  [CE]  ';'  expected  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(getStandardObservations(),  new  ParameterGuesser(getStandardObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(getStandardObservations(),  new  ParameterGuesser(getStandardObservations())).guess());	  return    fit((    new    ParameterGuesser(getStandardObservations())).guess());    	non-compiled	[CE]  ';'  expected	19	None	replace
48	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())),  observations).guess());  [CE]  ';'  expected  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())),  observations).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getStandardObservations())),  observations).guess());	  return    fit((    new    ParameterGuesser(getStandardObservations())).guess());    	non-compiled	[CE]  ';'  expected	19	None	replace
49	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return	      if(observations!=    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
50	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return	      if(observations!=    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
51	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega)).guess();  [CE]  cannot  find  symbol  omega  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega)).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  omega)).guess();	  return    fit(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  cannot  find  symbol  omega	7	None	replace
52	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations)).guess();  [CE]  observations  has  private  access  in  CurveFitter  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations)).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  observations)).guess();	  return    fit(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	7	None	replace
53	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations.length)).guess();  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations.length)).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  observations.length)).guess();	  return    fit(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	7	None	replace
54	[BUG]  [BUGGY]  return(new  ParameterGuesser(this.observations)).guess();  [CE]  observations  has  private  access  in  CurveFitter  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(this.observations)).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(this.observations)).guess();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	10	None	replace
55	[BUG]  [BUGGY]  return(new  ParameterGuesser(getFitter())).guess();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getFitter())).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(getFitter())).guess();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
56	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations(),  this)).guess();  [CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations(),  this)).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(getObservations(),  this)).guess();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;	10	None	replace
57	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).as();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).as();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(getObservations())).as();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
58	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
59	[BUG]  [BUGGY]  if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
60	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega));  [CE]  cannot  find  symbol  omega  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega));  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  omega));	  return    fit(new    ParameterGuesser(getObservations()));    	non-compiled	[CE]  cannot  find  symbol  omega	8	None	replace
61	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(this,  getObservations()));  [CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(this,  getObservations()));  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(this,  getObservations()));	  return    fit(new    ParameterGuesser(getObservations()));    	non-compiled	[CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;	8	None	replace
62	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations));  [CE]  observations  has  private  access  in  CurveFitter  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations));  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  observations));	  return    fit(new    ParameterGuesser(getObservations()));    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	8	None	replace
63	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations.length));  [CE]  observations  has  private  access  in  CurveFitter  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  observations.length));  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  observations.length));	  return    fit(new    ParameterGuesser(getObservations()));    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	8	None	replace
64	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations())).as());  [CE]  ';'  expected  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations())).as());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations())).as());	  return    fit((    new    ParameterGuesser(getObservations())).as());    	non-compiled	[CE]  ';'  expected	18	None	replace
65	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations())).as(),  omega);  [CE]  ';'  expected  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations())).as(),  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations())).as(),  omega);	  return    fit((    new    ParameterGuesser(getObservations())).as());    	non-compiled	[CE]  ';'  expected	18	None	replace
66	[BUG]  [BUGGY]  return  fit(getObservations(),  new  ParameterGuesser(getObservations())).as());  [CE]  ';'  expected  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(getObservations(),  new  ParameterGuesser(getObservations())).as());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(getObservations(),  new  ParameterGuesser(getObservations())).as());	  return    fit((    new    ParameterGuesser(getObservations())).as());    	non-compiled	[CE]  ';'  expected	18	None	replace
67	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservations().get(i);    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
68	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservations().get(i);    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
69	[BUG]  [BUGGY]  if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservations().get(i);    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
70	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]        [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
71	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getStandardObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getStandardObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getStandardObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
72	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getOrClearObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getOrClearObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getOrClearObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
73	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getOrCreateObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getOrCreateObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getOrCreateObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
74	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getFitter();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getFitter();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getFitter();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
75	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
76	[BUG]  [BUGGY]  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];  [CE]  missing  return  statement  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    new    WeightedObservedPoint[1];    }    	non-compiled	[CE]  missing  return  statement	16	None	replace
77	[BUG]  [BUGGY]  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[0];  [CE]  missing  return  statement  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[0];  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[0];	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    new    WeightedObservedPoint[1];    }    	non-compiled	[CE]  missing  return  statement	16	None	replace
78	[BUG]  [BUGGY]  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[2];  [CE]  missing  return  statement  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[2];  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[2];	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    new    WeightedObservedPoint[1];    }    	non-compiled	[CE]  missing  return  statement	16	None	replace
79	[BUG]  [BUGGY]  weightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];  [CE]  cannot  find  symbol  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  weightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	weightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    new    WeightedObservedPoint[1];    }    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
80	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations())).a,  omega);  [CE]  ';'  expected  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations())).a,  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations())).a,  omega);	  return    fit((    new    ParameterGuesser(getObservations())).a);    	non-compiled	[CE]  ';'  expected	13	None	replace
81	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations()),  omega);  [CE]  cannot  find  symbol  omega  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations()),  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations()),  omega);	  return    fit((    new    ParameterGuesser(getObservations())).a);    	non-compiled	[CE]  cannot  find  symbol  omega	13	None	replace
82	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations()),  omega,  observations).a);  [CE]  ';'  expected  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations()),  omega,  observations).a);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations()),  omega,  observations).a);	  return    fit((    new    ParameterGuesser(getObservations())).a);    	non-compiled	[CE]  ';'  expected	13	None	replace
83	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getFixedObservations();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]        [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getFixedObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getFixedObservations();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
84	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getReturnPoints();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getReturnPoints();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getReturnPoints();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
85	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getRequirements();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getRequirements();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getRequirements();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
86	[BUG]  [BUGGY]  if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return	      if(observations!=    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
87	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0;  i  <  points.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
88	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    Point    phi    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
89	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    Point    phi    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
90	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())).a);  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())).a);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getStandardObservations())).a);	  return    fit((    new    ParameterGuesser(getStandardObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
91	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())).weight());  [CE]  cannot  find  symbol  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())).weight());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getStandardObservations())).weight());	  return    fit((    new    ParameterGuesser(getStandardObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
92	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
93	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
94	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
95	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
96	[BUG]  [BUGGY]  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[3];  [CE]  missing  return  statement  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[3];  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[3];	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    new    WeightedObservedPoint[1];    }    	non-compiled	[CE]  missing  return  statement	16	None	replace
97	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(this);  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(this);  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(this);	      WeightedObservedPoint[]    observations    =    getObservedPoints();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
98	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getFixedPoints();  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getFixedPoints();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getFixedPoints();	      WeightedObservedPoint[]    observations    =    getObservedPoints();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
99	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservations().get(i);    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
100	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
101	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
102	[BUG]  [BUGGY]  if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    ++i)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
103	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).weight());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).weight());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getObservations())).weight());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
104	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getFixedPoint())).guess());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getFixedPoint())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getFixedPoint())).guess());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
105	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getEdge())).guess());  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getEdge())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getEdge())).guess());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
106	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  new  ParameterGuesser(getObservations())).guess();  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  new  ParameterGuesser(getObservations())).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((    new    ParameterGuesser(getObservations())).guess());    new  ParameterGuesser(getObservations())).guess();	  	non-compiled	[CE]  ';'  expected	11	None	add
107	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  new  ParameterGuesser(getObservations())).guess());  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  new  ParameterGuesser(getObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((    new    ParameterGuesser(getObservations())).guess());    new  ParameterGuesser(getObservations())).guess());	  	non-compiled	[CE]  ';'  expected	11	None	add
108	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(this.observations,  getObservations()));  [CE]  observations  has  private  access  in  CurveFitter  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(this.observations,  getObservations()));  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(this.observations,  getObservations()));	  return    fit(new    ParameterGuesser(getObservations()));    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	8	None	replace
109	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(a,  getObservations()));  [CE]  cannot  find  symbol  a  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(a,  getObservations()));  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(a,  getObservations()));	  return    fit(new    ParameterGuesser(getObservations()));    	non-compiled	[CE]  cannot  find  symbol  a	8	None	replace
110	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
111	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pools  =  getObservedPoints();  for(int  i  =  0;  i  <  pools.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
112	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  pieces  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
113	[BUG]  [BUGGY]  return(new  ParameterGuesser(this)).guess();  [CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(this)).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(this)).guess();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;	10	None	replace
114	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).weight();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).weight();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(getObservations())).weight();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
115	[BUG]  [BUGGY]  return(new  ParameterGuesser(this.observations)).weight();  [CE]  observations  has  private  access  in  CurveFitter  [FE]        AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(this.observations)).weight();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(this.observations)).weight();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	10	None	replace
116	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(this,  getObservations())).guess();  [CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(this,  getObservations())).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(this,  getObservations())).guess();	  return    fit(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  constructor  ParameterGuesser  in  class  ParameterGuesser  cannot  be  applied  to  given  types;	7	None	replace
117	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(this.observations)).guess();  [CE]  observations  has  private  access  in  CurveFitter  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(this.observations)).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(this.observations)).guess();	  return    fit(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	7	None	replace
118	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getObservations())).as(),  omega);  [CE]  cannot  find  symbol  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit((  new  ParameterGuesser(getObservations())).as(),  omega);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getObservations())).as(),  omega);	  return    fit((    new    ParameterGuesser(getObservations())).as());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
119	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  ((  ParameterGuesser(getObservations())).guess();  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  ((  ParameterGuesser(getObservations())).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    ((  ParameterGuesser(getObservations())).guess();	  	non-compiled	[CE]  ')'  expected	9	None	add
120	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return(new  ParameterGuesser(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return(new  ParameterGuesser(  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return(new  ParameterGuesser(	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
121	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[0]);  [CE]  cannot  find  symbol  [FE]        [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[0]);  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getObservations().toArray(new  WeightedObservedPoint[0]);	      WeightedObservedPoint[]    observations    =    getObservations();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
122	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
123	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0;  i  <  points.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservations().get(i);    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
124	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
125	[BUG]  [BUGGY]  if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(answers  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  }	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
126	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  return  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  return	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    Point    phi    =    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
127	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length  [CE]  ';'  expected  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    Point    phi    =    	non-compiled	[CE]  ';'  expected	6	None	replace
128	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i  [CE]  ')'  expected  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    }    	non-compiled	[CE]  ')'  expected	3	None	replace
129	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i  [CE]  ')'  expected  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    }    	non-compiled	[CE]  ')'  expected	3	None	replace
130	[BUG]  [BUGGY]  if(Points.length  ==  1)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(Points.length  ==  1)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(Points.length  ==  1)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    }    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
131	[BUG]  [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length  [CE]  ';'  expected  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points  ==  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    }    	non-compiled	[CE]  ';'  expected	3	None	replace
132	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return	      if(observations!=    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    getObservedPoints();    if(points!=    null)    {    return    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
133	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega),  observations).a);  [CE]  ';'  expected  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit(new  ParameterGuesser(getObservations(),  omega),  observations).a);  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations(),  omega),  observations).a);	  return    fit((    new    ParameterGuesser(getObservations())).a);    	non-compiled	[CE]  ';'  expected	13	None	replace
134	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i  [CE]  ')'  expected  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  ')'  expected	23	None	replace
135	[BUG]  [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i  [CE]  ')'  expected  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  ')'  expected	23	None	replace
136	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  [CE]  illegal  start  of  expression  [FE]                    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
137	[BUG]  [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                      [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    observations    =    getObservedPoints();    for(int    i    =    0;    i    <    observations.length;    ++i)    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
138	[BUG]  [BUGGY]  this.observations  =  new  WeightedObservedPoint[0];  [CE]  observations  has  private  access  in  CurveFitter  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  this.observations  =  new  WeightedObservedPoint[0];  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	this.observations  =  new  WeightedObservedPoint[0];	      if(observations    ==    null)    {    for(int    i    =    0;    i    <    observations.length;    i++)    {    WeightedObservedPoint[]    points    =    new    WeightedObservedPoint[1];    }    	non-compiled	[CE]  observations  has  private  access  in  CurveFitter	16	None	replace
139	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getStandardObservations())).guess());  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getStandardObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getStandardObservations())).guess());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
140	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getReturnPoints())).guess());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getReturnPoints())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getReturnPoints())).guess());	  return((    new    ParameterGuesser(getObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
141	[BUG]  [BUGGY]  return(new  ParameterGuesser(getEmptyPoints())).guess();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getEmptyPoints())).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(getEmptyPoints())).guess();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
142	[BUG]  [BUGGY]  return(new  ParameterGuesser(getStandardObservations())).guess();  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getStandardObservations())).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(getStandardObservations())).guess();	  return(new    ParameterGuesser(getObservations())).guess();    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
143	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations(),  observations)).guess());  [CE]  cannot  find  symbol  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations(),  observations)).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getStandardObservations(),  observations)).guess());	  return    fit((    new    ParameterGuesser(getStandardObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
144	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())).missingPoints());  [CE]  cannot  find  symbol  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())).missingPoints());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getStandardObservations())).missingPoints());	  return    fit((    new    ParameterGuesser(getStandardObservations())).guess());    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
145	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  return((  new  ParameterGuesser(getObservations())).guess());  [CE]  unreachable  statement  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  return((  new  ParameterGuesser(getObservations())).guess());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((    new    ParameterGuesser(getObservations())).guess());    return((  new  ParameterGuesser(getObservations())).guess());	  	non-compiled	[CE]  unreachable  statement	11	None	add
146	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  weightedObservedPoint[]  observations  =  getObservations();  [CE]  cannot  find  symbol  [FE]        [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  weightedObservedPoint[]  observations  =  getObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    weightedObservedPoint[]  observations  =  getObservations();	  	non-compiled	[CE]  cannot  find  symbol	1	None	add
147	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getObservation();  [CE]  variable  observations  is  already  defined  in  method  fit()  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observations  =  getObservation();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observations  =  getObservation();	  	non-compiled	[CE]  variable  observations  is  already  defined  in  method  fit()	1	None	add
148	[BUG]  [BUGGY]  [FE]    [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observers  =  getObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	add	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observers  =  getObservations();	  	compilable	  [FE]    	1	1	add
149	[BUG]  [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observers  =  getObservations();  [FE]    [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]      WeightedObservedPoint[]  observations  =  getObservations();  WeightedObservedPoint[]  observers  =  getObservations();  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	        WeightedObservedPoint[]    observations    =    getObservations();    WeightedObservedPoint[]  observers  =  getObservations();	  	compilable	  [FE]    	1	1	add
150	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getObservations(),  omega)).as());  [CE]  cannot  find  symbol  omega  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return  fit((  new  ParameterGuesser(getObservations(),  omega)).as());  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getObservations(),  omega)).as());	  return    fit((    new    ParameterGuesser(getObservations())).as());    	non-compiled	[CE]  cannot  find  symbol  omega	18	None	replace
151	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  new  ParameterGuesser(getObservations())).guess();  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  new  ParameterGuesser(getObservations())).guess();  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    new  ParameterGuesser(getObservations())).guess();	  	non-compiled	[CE]  ';'  expected	9	None	add
152	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  return(new  ParameterGuesser(getObservations())).guess();  }  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  return(new  ParameterGuesser(getObservations())).guess();  }  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    if(getObservations()!=  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  return(new  ParameterGuesser(getObservations())).guess();  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
153	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  if(getObservations()  instanceof  ParameterGuesser)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  return(new  ParameterGuesser(getObservations())).guess();  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    public  double[]  fit()  {    [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  if(getObservations()  instanceof  ParameterGuesser)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  return(new  ParameterGuesser(getObservations())).guess();  }  [BUGGY]    }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new    ParameterGuesser(getObservations())).guess();    if(getObservations()  instanceof  ParameterGuesser)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  return(new  ParameterGuesser(getObservations())).guess();  }	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
154	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
155	[BUG]  [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]                [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  ++i)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(points!=  null)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  ++i)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
156	[BUG]  [BUGGY]  if(Points.length  ==  1)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }  [CE]  illegal  start  of  expression  [FE]                  [CONTEXT]    public  double[]  fit()  {    [BUGGY]  if(Points.length  ==  1)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	if(Points.length  ==  1)  {  for(int  i  =  0,  len  =  points.length;  i  <  len;  i++)  {  }	      if(observations    ==    null)    {    for(int    i    =    0,    len    =    observations.length;    i    <    len;    i++)    {    WeightedObservedPoint[]    points    =    getObservations();    for(int    i    =    0;    i    <    points.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
157	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[references.size()  ]);  [CE]  cannot  find  symbol  references  [FE]          [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[references.size()  ]);  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(new  WeightedObservedPoint[references.size()  ]);	      WeightedObservedPoint[]    observations    =    getObservedPoints();    	non-compiled	[CE]  cannot  find  symbol  references	14	None	replace
158	[BUG]  [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(required);  [CE]  cannot  find  symbol  required  [FE]            [CONTEXT]    public  double[]  fit()  {    [BUGGY]  WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(required);  [BUGGY]    return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	WeightedObservedPoint[]  observations  =  getObservedPoints().toArray(required);	      WeightedObservedPoint[]    observations    =    getObservedPoints();    	non-compiled	[CE]  cannot  find  symbol  required	14	None	replace
