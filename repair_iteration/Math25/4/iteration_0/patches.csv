bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]    [FE]      [CONTEXT]  public  double[]  fit()  {  [BUGGY]    WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	add	    WeightedObservedPoint[]  observations  =  getObservations();		compilable	  [FE]    	8	1	add
2	[BUG]  [BUGGY]    WeightedObservedPoint[]  observations  =  getObservations();  [FE]    [FE]      [CONTEXT]  public  double[]  fit()  {  [BUGGY]    WeightedObservedPoint[]  observations  =  getObservations();  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    WeightedObservedPoint[]  observations  =  getObservations();		compilable	  [FE]    	8	1	add
3	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]        [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
4	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	8	None	add
5	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservations().get(i);  if(points!=  null)  {  return		non-compiled	[CE]  illegal  start  of  expression	8	None	add
6	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =  [CE]  illegal  start  of  expression  [FE]              [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0,  len  =  observations.length;  i  <  len;  i++)  {  WeightedObservedPoint[]  points  =  getObservations();  for(int  i  =  0;  i  <  points.length;  ++i)  {  Point  phi  =		non-compiled	[CE]  illegal  start  of  expression	8	None	add
7	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations())).guess();  [CE]  no  suitable  method  found  for  fit(ParameterGuesser)  [FE]      [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return  fit(new  ParameterGuesser(getObservations())).guess();  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations())).guess();	return  fit((new  ParameterGuesser(getObservations())).guess());  	non-compiled	[CE]  no  suitable  method  found  for  fit(ParameterGuesser)	7	None	replace
8	[BUG]  [BUGGY]  return  fit(new  ParameterGuesser(getObservations()));  [CE]  no  suitable  method  found  for  fit(ParameterGuesser)  [FE]        [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return  fit(new  ParameterGuesser(getObservations()));  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit(new  ParameterGuesser(getObservations()));	return  fit((new  ParameterGuesser(getObservations())).guess());  	non-compiled	[CE]  no  suitable  method  found  for  fit(ParameterGuesser)	7	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	add	return(new  ParameterGuesser(getObservations())).guess();	return  fit((new  ParameterGuesser(getObservations())).guess());  	compilable	  [FE]  AssertionError  	7	4	replace
10	[BUG]  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  [FE]  AssertionError  [FE]          [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return(new  ParameterGuesser(getObservations())).guess();  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return(new  ParameterGuesser(getObservations())).guess();	return  fit((new  ParameterGuesser(getObservations())).guess());  	compilable	  [FE]  AssertionError  	7	4	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	add	return((  new  ParameterGuesser(getObservations())).guess());	return  fit((new  ParameterGuesser(getObservations())).guess());  	compilable	  [FE]  AssertionError  	7	4	replace
12	[BUG]  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  [FE]  AssertionError  [FE]      [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return((  new  ParameterGuesser(getObservations())).guess());  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return((  new  ParameterGuesser(getObservations())).guess());	return  fit((new  ParameterGuesser(getObservations())).guess());  	compilable	  [FE]  AssertionError  	7	4	replace
13	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getObservations())).a);  [CE]  no  suitable  method  found  for  fit(double)  [FE]        [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return  fit((  new  ParameterGuesser(getObservations())).a);  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getObservations())).a);	return  fit((new  ParameterGuesser(getObservations())).guess());  	non-compiled	[CE]  no  suitable  method  found  for  fit(double)	7	None	replace
14	[BUG]  [BUGGY]    WeightedObservedPoint[]  observations  =  getObservedPoints();  [CE]  cannot  find  symbol  [FE]      [CONTEXT]  public  double[]  fit()  {  [BUGGY]    WeightedObservedPoint[]  observations  =  getObservedPoints();  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    WeightedObservedPoint[]  observations  =  getObservedPoints();		non-compiled	[CE]  cannot  find  symbol	8	None	add
15	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]        [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return		non-compiled	[CE]  illegal  start  of  expression	8	None	add
16	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];  }  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];  }  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  new  WeightedObservedPoint[1];  }		non-compiled	[CE]  illegal  start  of  expression	8	None	add
17	[BUG]  [BUGGY]    if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations!=  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  if(points!=  null)  {  return		non-compiled	[CE]  illegal  start  of  expression	8	None	add
18	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getObservations())).as());  [CE]  cannot  find  symbol  [FE]      [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return  fit((  new  ParameterGuesser(getObservations())).as());  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getObservations())).as());	return  fit((new  ParameterGuesser(getObservations())).guess());  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())).guess());  [CE]  cannot  find  symbol  [FE]        [CONTEXT]  public  double[]  fit()  {  [BUGGY]  return  fit((  new  ParameterGuesser(getStandardObservations())).guess());  [BUGGY]  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	return  fit((  new  ParameterGuesser(getStandardObservations())).guess());	return  fit((new  ParameterGuesser(getObservations())).guess());  	non-compiled	[CE]  cannot  find  symbol	7	None	replace
20	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]      [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	8	None	add
21	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	8	None	add
22	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  for(int  i  =  0;  i  <  points.length;  ++i)  {  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  ++i)  {  WeightedObservedPoint[]  points  =  getObservedPoints();  for(int  i  =  0;  i  <  points.length;  ++i)  {		non-compiled	[CE]  illegal  start  of  expression	8	None	add
23	[BUG]  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  [CE]  illegal  start  of  expression  [FE]            [CONTEXT]  public  double[]  fit()  {  [BUGGY]    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)  [BUGGY]  return  fit((new  ParameterGuesser(getObservations())).guess());  }  [CLASS]  HarmonicFitter  ParameterGuesser  [METHOD]  fit  [RETURN_TYPE]  double[]  [VARIABLES]  WeightedObservedPoint[]  observations  double  a  omega  phi  boolean  	projects/Math25/src/main/java/org/apache/commons/math3/optimization/fitting/HarmonicFitter.java	0.0	77	77	0	replace	    if(observations  ==  null)  {  for(int  i  =  0;  i  <  observations.length;  i++)  {  WeightedObservedPoint[]  observations  =  getObservedPoints();  for(int  i  =  0;  i  <  observations.length;  ++i)		non-compiled	[CE]  illegal  start  of  expression	8	None	add
