bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:       "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
2	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1: "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:       "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
3	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
4	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
5	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
6	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  integerValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'.   ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  integerValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  integerValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'.   ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "    +    absoluteNumericValue    +   "'    hash    code:    '   "    +    absoluteNumericValue    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
7	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  denominator  + "'.   ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  denominator  + "'.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  denominator  + "'.   ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "    +    absoluteNumericValue    +   "'    hash    code:    '   "    +    absoluteNumericValue    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
8	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  integers  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  integers  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  integers  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    number    of    integers    are    not    in    the    range.   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
9	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    number    of    integers    are    not    in    the    range.   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
10	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  integers  can't  be  negated. ");  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  integers  can't  be  negated. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  integers  can't  be  negated. ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    number    of    integers    are    not    in    the    range.   ");    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
11	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  denominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
12	[BUG]  [BUGGY]  Numerator  <  Integer>  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  denominator  =  greatestCommonDivisor(numerator,  denominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
13	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  desominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  desominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
14	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    1   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
15	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  numerator,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  numerator,  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    1   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
16	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    numerator:   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
17	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +nominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +nominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +nominator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    numerator:   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
18	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  numerator: "  +numerator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    numerator:   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
19	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
20	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  denominator,  toProperString);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  denominator,  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  denominator,  toProperString);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
21	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    zero.   ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
22	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  numerator);	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    zero.   ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
23	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
24	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: "  +  toProperString);	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
25	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ "',' ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ "',' ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ "',' ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "+numerator+   ",'   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
26	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",',' ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",',' ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",',' ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "+numerator+   ",'   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
27	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ".',' ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ".',' ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ".',' ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "+numerator+   ",'   ");    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
28	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    denominate   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
29	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    denominate   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
30	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate  a  numeric  value. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate  a  numeric  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate  a  numeric  value. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    denominate   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
31	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate  a  numeric  value ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate  a  numeric  value ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate  a  numeric  value ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    denominate   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
32	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName(),  numerator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName(),  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName(),  numerator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
33	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName(),  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName(),  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName(),  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
34	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getClass());  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getClass());  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getClass());	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
35	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toProperString);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toProperString);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
36	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toString);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toString);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
37	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
38	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator,  denominator));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator,  denominator));  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator,  denominator));	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    Integer.toString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
39	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator),  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator),  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator),  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    Integer.toString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
40	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator  -  1));  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator  -  1));  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator  -  1));	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    Integer.toString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
41	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(denominator));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(denominator));  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(denominator));	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    Integer.toHexString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
42	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator,  denominator));  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator,  denominator));  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator,  denominator));	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    Integer.toHexString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
43	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator),  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator),  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator),  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    Integer.toHexString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
44	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString,  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    toProperString);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
45	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + "  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + "  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + "  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    toProperString);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
46	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString,  numerator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    toProperString);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
47	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + ",  numerator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + ",  numerator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + ",  numerator: "  +  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    toProperString);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
48	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
49	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: "  +  numerator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  1);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
51	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
52	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  -1);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
53	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
54	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  0);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
55	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
56	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
57	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
58	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
59	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  toProperString);	  throw    new    ArithmeticException(   "Numerator    can't    generate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
60	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
61	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  gcd,  denominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
62	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  desominator);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  desominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
63	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
64	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
65	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
66	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:    '   ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
67	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:    '   ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
68	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1:  ' ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1:  ' ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1:  ' ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:    '   ");    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
69	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
70	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
71	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
72	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  %s.n ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  %s.n ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  %s.n ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:    %s.   ");    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
73	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
74	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(denominator,  denominator);	  Denominator    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
75	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  numerator);	  Denominator    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
76	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
77	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
78	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
79	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    negate:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
80	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
81	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: ",  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: ",  numerator,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: ",  numerator,  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
82	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  negate: "  +  denominator,  toProperString);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  negate: "  +  denominator,  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  negate: "  +  denominator,  toProperString);	  throw    new    ArithmeticException(   "Numeric    numerator    can't    negate:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
83	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  generate  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator    can't    negate:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
84	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate.   ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate.   ");	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate.   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
85	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  be  negated. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  be  negated. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  be  negated. ");	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate.   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
86	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(denominator,  denominator);	  denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
87	[BUG]  [BUGGY]  desominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  desominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	desominator  =  greatestCommonDivisor(numerator,  denominator);	  denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
88	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  desominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
89	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  integer  can't  be  negated.  Invalid  decimal  integer: ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  integer  can't  be  negated.  Invalid  decimal  integer: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  integer  can't  be  negated.  Invalid  decimal  integer: ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    decimal    integer:   ");    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
90	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: "  +  toProperString);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    decimal    integer:   ");    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
91	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: "  +  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    decimal    integer:   ");    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
92	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.   "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
93	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.  Integer,  MIN_VALUE);  [CE]  unclosed  string  literal  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.  Integer,  MIN_VALUE);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.  Integer,  MIN_VALUE);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator.   ");    	non-compiled	[CE]  unclosed  string  literal	9	None	replace
94	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  numerator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    toProperString);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
95	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  toString);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  toString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  toString);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    toProperString);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
96	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString,  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    toProperString);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
97	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue,  numerator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    intValue);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
98	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue,  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    intValue);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
99	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
100	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
101	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
102	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value. ");	  throw    new    ArithmeticException(   "Negative    number:    can't    generate    numerator    value   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
103	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ",  toProperString);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ",  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ",  toProperString);	  throw    new    ArithmeticException(   "Negative    number:    can't    generate    numerator    value   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
104	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  denominator  value ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  denominator  value ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  can't  generate  denominator  value ");	  throw    new    ArithmeticException(   "Negative    number:    can't    generate    numerator    value   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
105	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",'. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",'. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",'. ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "+numerator+   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
106	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
107	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
108	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: ",  toProperString);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: ",  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  zero: ",  toProperString);	  throw    new    ArithmeticException(   "Numerator    can't    generate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
109	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +nominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +nominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  zero: "  +nominator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
110	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated:  Invalid  numeric  value. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated:  Invalid  numeric  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated:  Invalid  numeric  value. ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    numeric    value.   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
111	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    numerator    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
112	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    numerator    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
113	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  generate  denominator ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  generate  denominator ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  generate  denominator ");	  throw    new    ArithmeticException(   "Numeric    numerator:    numerator    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
114	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator: ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator: ");	  throw    new    ArithmeticException(   "Numeric    numerator:    numerator    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
115	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
116	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numerator);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
117	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  numeratorValue);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
118	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.   "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.   "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.   "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
119	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Invalid  numerator  value. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Invalid  numerator  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Invalid  numerator  value. ");	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
120	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  denominator: ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  denominator: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  denominator: ");	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero    value:   ");    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
121	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero    value:   ");    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
122	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero    value:   ");    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
123	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: ",  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: ",  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: ",  numerator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero    value:   ");    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
124	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hashCode: ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hashCode: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hashCode: ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
125	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hash  code: ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hash  code: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hash  code: ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
126	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hash  code: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hash  code: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hash  code: "  +  toProperString);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
127	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hashCode: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hashCode: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  hashCode: "  +  toProperString);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
128	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
129	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
130	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  intValue  + "' ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  intValue  + "' ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  intValue  + "' ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:    '   "    +    intValue);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
131	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1:  ' "  +  intValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1:  ' "  +  intValue);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  nominals  can  not  be  less  than  1:  ' "  +  intValue);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:    '   "    +    intValue);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
132	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  numerator,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  numerator,  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
133	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated.   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated.   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  be  negated.   "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
134	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated.   "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated.   "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  be  negated.   "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
135	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
136	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  toProperString);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
137	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
138	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  toProperString);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  toProperString);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    integer    hash    code    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
139	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  toString);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  toString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  toString);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    integer    hash    code    is    less    than    1.   ");    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
140	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.n ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.n ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.n ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
141	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.   "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
142	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s.n ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s.n ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s.n ");	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    1:    %s.   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
143	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s,  denominator.   ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s,  denominator.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s,  denominator.   ");	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    1:    %s.   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
144	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
145	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd,  numerator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
146	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  gcd,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
147	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Integer,  Denominator.MIN_VALUE);  [CE]  unclosed  string  literal  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Integer,  Denominator.MIN_VALUE);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Integer,  Denominator.MIN_VALUE);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator.   ");    	non-compiled	[CE]  unclosed  string  literal	92	None	replace
148	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Integer,  MIN_VALUE);  [CE]  unclosed  string  literal  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Integer,  MIN_VALUE);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Integer,  MIN_VALUE);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator.   ");    	non-compiled	[CE]  unclosed  string  literal	92	None	replace
149	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  numerator,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  numerator,  denominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
150	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.   "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.       "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
151	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.   "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.       "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
152	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
153	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
154	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
155	[BUG]  [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	  Numerator    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
156	[BUG]  [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  numerator);	  Numerator    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
157	[BUG]  [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  gcd);	  Numerator    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
158	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  cannot  be  negated. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  cannot  be  negated. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  cannot  be  negated. ");	  throw    new    ArithmeticException(   "Numerator    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
159	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Invalid  numerator  value. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Invalid  numerator  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Invalid  numerator  value. ");	  throw    new    ArithmeticException(   "Numerator    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
160	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	  numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
161	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	  numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
162	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  numerator  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	numerator  =  greatestCommonDivisor(denominator,  numerator);	  numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
163	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ",  toString);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ",  toString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ",  toString);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    integer    is    less    than    one    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
164	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
165	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
166	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
167	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: "  +  toProperString);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
168	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
169	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
170	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  hashCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  hashCode);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
171	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate ",  numerator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate ",  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate ",  numerator);	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ",    denominator);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
172	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ",  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ",  denominator,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ",  denominator,  numerator);	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ",    denominator);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
173	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
174	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
175	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  be  negated. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  be  negated. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  denominator  can't  be  negated. ");	  throw    new    ArithmeticException(   "Negative    number:    denominator    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
176	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator)+ ",  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator)+ ",  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator)+ ",  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    Integer.toString(numerator),    denominator);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
177	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator,  toProperString);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator,  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator,  toProperString);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    Integer.toString(numerator),    denominator);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
178	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator,  numerator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    Integer.toString(numerator),    denominator);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
179	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
180	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
181	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: ",  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: ",  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: ",  numerator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
182	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(denominator));  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(denominator));  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(denominator));	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    Integer.toString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
183	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator,  denominator));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator,  denominator));  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator,  denominator));	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    Integer.toString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
184	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  denominate ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  denominate ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  denominate ");	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
185	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator ");	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
186	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  numerator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  numerator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  numerator);	  Integer    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
187	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  MIN_VALUE;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  MIN_VALUE;  }  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  MIN_VALUE;  }	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    if(denominator    <    0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
188	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator);  if(denominator  <  0)  {  return  MIN_VALUE;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator);  if(denominator  <  0)  {  return  MIN_VALUE;  }  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  numerator);  if(denominator  <  0)  {  return  MIN_VALUE;  }	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    if(denominator    <    0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
189	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  MIN_VALUE;  }  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  MIN_VALUE;  }  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  MIN_VALUE;  }	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    if(denominator    <    0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
190	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  -1;  }  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  -1;  }  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  -1;  }	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    if(denominator    <    0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
191	[BUG]  [BUGGY]  degree  =  degree(denominator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  degree  =  degree(denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	degree  =  degree(denominator);	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
192	[BUG]  [BUGGY]  hingegenominator  =  numerator;  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  hingegenominator  =  numerator;  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	hingegenominator  =  numerator;	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
193	[BUG]  [BUGGY]  hingegingError( "Fraction  not  followed  by  a  numeric  value ");  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  hingegingError( "Fraction  not  followed  by  a  numeric  value ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	hingegingError( "Fraction  not  followed  by  a  numeric  value ");	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
194	[BUG]  [BUGGY]  hingegingError( "Fraction  not  followed  by  a  zero  value ");  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  hingegingError( "Fraction  not  followed  by  a  zero  value ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	hingegingError( "Fraction  not  followed  by  a  zero  value ");	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
195	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  numerator,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  numerator,  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
196	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type. ",  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type. ",  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type. ",  numerator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    decimal    type.   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
197	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  denominator  value. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  denominator  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  denominator  value. ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    numerator    value.   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
198	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
199	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
200	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
201	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  generate  denominator ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  generate  denominator ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  generate  denominator ");	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
202	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  instantiate  denominator ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  instantiate  denominator ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  instantiate  denominator ");	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
203	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  hashCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0,  hashCode);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
204	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  absoluteNumericValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  absoluteNumericValue);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  absoluteNumericValue);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
205	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  integer);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  integer);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  integer);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
206	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  instantiate  zero.   ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  instantiate  zero.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  instantiate  zero.   ");	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate.   ");    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
207	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd  +  1);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
208	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
209	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  n "  +  toProperString());  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  n "  +  toProperString());  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  n "  +  toProperString());	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
210	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  0 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  0 ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  0 ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
211	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  %s. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  %s. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator:  %s. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
212	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  ignoring ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  ignoring ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  ignoring ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
213	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
214	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.   "  +  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.   "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.   "  +  numerator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
215	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.  Please  check  that  the  whole  value  checks  are  undefined. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.  Please  check  that  the  whole  value  checks  are  undefined. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.  Please  check  that  the  whole  value  checks  are  undefined. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
216	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  desominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  desominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  desominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
217	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  1);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
218	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  instantiate  denominator ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  instantiate  denominator ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  instantiate  denominator ");	  throw    new    ArithmeticException(   "Numeric    numerator:    numerator    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
219	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator  -  1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator  -  1);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	numerator  =  greatestCommonDivisor(numerator,  denominator  -  1);	  numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
220	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  nominal  value: ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  nominal  value: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  nominal  value: ");	  throw    new    ArithmeticException(   "Numerator    can't    generate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
221	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  toProperString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  toProperString());  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  denominator: "  +  toProperString());	  throw    new    ArithmeticException(   "Numerator    can't    generate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
222	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Invalid  numerator  values. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Invalid  numerator  values. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Invalid  numerator  values. ");	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
223	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  instantiate  zero: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  instantiate  zero: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  instantiate  zero: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
224	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  instantiate  zero: ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  instantiate  zero: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  instantiate  zero: ");	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
225	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  ==  Integer.MIN_VALUE)  {  return  ONE;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  ==  Integer.MIN_VALUE)  {  return  ONE;  }  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  ==  Integer.MIN_VALUE)  {  return  ONE;  }	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    if(denominator    <    0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
226	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  0);  if(denominator  <  0)  {  return  0;  }  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  0);  if(denominator  <  0)  {  return  0;  }  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  0);  if(denominator  <  0)  {  return  0;  }	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    if(denominator    <    0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
227	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  intValue);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  intValue);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.   "  +  intValue);	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    zero.   ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
228	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' "  +  intValue);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' "  +  intValue);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' "  +  intValue);	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
229	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' "+numerator+ ",' ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' "+numerator+ ",' ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1:  ' "+numerator+ ",' ");	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
230	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator:  0 ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator:  0 ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator:  0 ");	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
231	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  toProperString());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  toProperString());  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: "  +  toProperString());	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
232	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate   "  +  denominator);	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ",    denominator);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
233	[BUG]  [BUGGY]  Desominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Desominator  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Desominator  denominator  =  greatestCommonDivisor(numerator,  denominator);	  Denominator    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
234	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  gcd);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(denominator,  gcd);	  Denominator    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
235	[BUG]  [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  whole  =  greatestCommonDivisor(numerator,  denominator,  0);	  Numerator    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
236	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Invalid  decimal  value: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Invalid  decimal  value: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Invalid  decimal  value: "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.       "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
237	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Invalid  decimal  value. "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Invalid  decimal  value. "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Invalid  decimal  value. "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.       "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
238	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  integerValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  integerValue);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  integerValue);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
239	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  zero: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  zero: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  generate  zero: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
240	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  zero: ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  zero: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  generate  zero: ");	  throw    new    ArithmeticException(   "Numerator    can't    generate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
241	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate   "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    denominate   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
242	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    denominate   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
243	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate: "  +  toProperString);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    denominate   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
244	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
245	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  absoluteNumericValue  + "'.   ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  absoluteNumericValue  + "'.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  absoluteNumericValue  + "'.   ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "    +    absoluteNumericValue    +   "'    hash    code:    '   "    +    absoluteNumericValue    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
246	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'.  Check  that  the  absoluteNumericValue  {  0  }   ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'.  Check  that  the  absoluteNumericValue  {  0  }   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'.  Check  that  the  absoluteNumericValue  {  0  }   ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "    +    absoluteNumericValue    +   "'    hash    code:    '   "    +    absoluteNumericValue    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
247	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    negate:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
248	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(denominator));  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(denominator));  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(denominator));	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    Integer.toString(numerator));    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
249	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  3);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  3);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  3);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
250	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
251	[BUG]  [BUGGY]  Numerator  denominator  =  Integer.MIN_VALUE;  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  denominator  =  Integer.MIN_VALUE;  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  denominator  =  Integer.MIN_VALUE;	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
252	[BUG]  [BUGGY]  Numerator  denominator  =  new  Integer(numerator);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  denominator  =  new  Integer(numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  denominator  =  new  Integer(numerator);	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
253	[BUG]  [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  denominator  =  getDenominator(numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  denominator  =  getDenominator(numerator);	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
254	[BUG]  [BUGGY]  Numerator  denominator  =  numerator;  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  denominator  =  numerator;  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  denominator  =  numerator;	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
255	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  Numerator  value. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  Numerator  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  Numerator  value. ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    numerator    value.   ");    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
256	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  cannot't  be  negated. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  cannot't  be  negated. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  cannot't  be  negated. ");	  throw    new    ArithmeticException(   "Numerator    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
257	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.   "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.   "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.   "  +  numerator);	  throw    new    ArithmeticException(   "Numerator    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
258	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  gcd);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  gcd);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  gcd);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
259	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: "  +  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator: "  +  numerator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
260	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator:  %s. ");  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator:  %s. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator:  %s. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
261	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  numerator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  numerator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  generate  numerator: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    generate    numerator:   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
262	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  -1);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
263	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0L);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
264	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString());  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString());  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString());	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    getName());    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
265	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
266	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  total);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  total);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  total);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
267	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteNumericValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteNumericValue);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteNumericValue);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
268	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  desominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  desominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
269	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator.n ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator.n ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator.n ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    integer    is    less    than    one    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
270	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ",  hashCode);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ",  hashCode);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ",  hashCode);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    integer    is    less    than    one    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
271	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  2);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  2);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  2);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
272	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  desominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  desominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  desominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:    '   "    +    intValue);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
273	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ",  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ",  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ",  denominator);	  throw    new    ArithmeticException(   "Negative    number:    can't    generate    numerator    value   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
274	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue  +  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    intValue);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
275	[BUG]  [BUGGY]  Numerator  <  Integer>  desominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  desominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  desominator  =  greatestCommonDivisor(numerator,  denominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
276	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
277	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  desominator,  gcd);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  desominator,  gcd);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  desominator,  gcd);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
278	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
279	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.   "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
280	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Invalid  fraction  of  integer. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Invalid  fraction  of  integer. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Invalid  fraction  of  integer. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
281	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:   "  +  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:   "  +  denominator,  hashCode);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:   "  +  denominator,  hashCode);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
282	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:   "  +  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:   "  +  denominator,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:   "  +  denominator,  numerator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
283	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  numerator  value:   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  numerator  value:   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  numerator  value:   "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Invalid    numerator    value.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
284	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type.   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type.   "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type.   "  +  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    decimal    type.   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
285	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  be  negated. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  be  negated. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  be  negated. ");	  throw    new    ArithmeticException(   "Numerator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
286	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
287	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator: ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator:   ");    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
288	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  Numeric  value. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  Numeric  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  Numeric  value. ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    numeric    value.   ");    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
289	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + ",  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + ",  denominator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString  + ",  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    toProperString);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
290	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  denominator: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  denominator: "  +  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  denominator: "  +  toProperString);	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero    value:   ");    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
291	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:   ",  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:   ",  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:   ",  denominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
292	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  intValue);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  intValue);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  intValue);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
293	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  denominator  + "': ",  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  denominator  + "': ",  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  denominator  + "': ",  numerator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
294	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(denominator,  denominator);	  Integer    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
295	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  desominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  desominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  desominator);	  Integer    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
296	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
297	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  be  negated ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  be  negated ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  denominator  can't  be  negated ");	  throw    new    ArithmeticException(   "Negative    number:    denominator    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
298	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated.  Invalid  fraction  denominator. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated.  Invalid  fraction  denominator. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  be  negated.  Invalid  fraction  denominator. ");	  throw    new    ArithmeticException(   "Numerator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
299	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated.  Invalid  numerator  value. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated.  Invalid  numerator  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  be  negated.  Invalid  numerator  value. ");	  throw    new    ArithmeticException(   "Numerator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
300	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  integer  can't  be  negated.  Invalid  decimal  integer: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  integer  can't  be  negated.  Invalid  decimal  integer: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  integer  can't  be  negated.  Invalid  decimal  integer: "  +  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    decimal    integer:   ");    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
301	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Integer:  0. "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Integer:  0. "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Integer:  0. "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.       "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
302	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator,  expecting  a  value ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator,  expecting  a  value ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator,  expecting  a  value ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
303	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero:  %s. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero:  %s. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero:  %s. ");	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
304	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero:  numerator ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero:  numerator ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero:  numerator ");	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
305	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated:   ",  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated:   ",  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated:   ",  denominator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ",    numerator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
306	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  denominator  + "'.   ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  denominator  + "'.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  denominator  + "'.   ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "    +    absoluteNumericValue    +   "'    hash    code:    '   "    +    absoluteNumericValue    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
307	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  denominator  + ".'.   ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  denominator  + ".'.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  code:  ' "  +  denominator  + ".'.   ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Integer:    '   "    +    absoluteNumericValue    +   "'    hash    code:    '   "    +    absoluteNumericValue    +   "'.   ");    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
308	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  Integer.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  Integer.MIN_VALUE);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  Integer.MIN_VALUE);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
309	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator,  0);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator,  0);	  Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
310	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  negate:  %  denominator ",  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  negate:  %  denominator ",  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  negate:  %  denominator ",  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator    can't    negate:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
311	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.  Integer,  denominator  is  less  than  zero. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.  Integer,  denominator  is  less  than  zero. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero.  Integer,  denominator  is  less  than  zero. ");	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    zero.   ");    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
312	[BUG]  [BUGGY]  Numerator  whole  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  whole  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  whole  =  greatestCommonDivisor(denominator,  numerator);	  Numerator    whole    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
313	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  numerator  ' "  +  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  numerator  ' "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  numerator  ' "  +  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
314	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s ",  toProperString);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s ",  toProperString);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s ",  toProperString);	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    1:    %s.   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
315	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s  of  denominator.   ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s  of  denominator.   ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s  of  denominator.   ");	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    1:    %s.   ");    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
316	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero:  %s. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero:  %s. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  zero:  %s. ");	  throw    new    ArithmeticException(   "Numerator    can't    generate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
317	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero:  0 ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero:  0 ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  zero:  0 ");	  throw    new    ArithmeticException(   "Numerator    can't    generate    zero:   ");    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
318	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator, ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator, ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator, ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
319	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toProperString());  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toProperString());  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ",  toProperString());	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
320	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Please  check  that  the  numerator  is  less  than  1 ",  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Please  check  that  the  numerator  is  less  than  1 ",  hashCode);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Please  check  that  the  numerator  is  less  than  1 ",  hashCode);	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
321	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Please  check  that  the  numerator  is  less  than  1. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Please  check  that  the  numerator  is  less  than  1. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated.  Please  check  that  the  numerator  is  less  than  1. ");	  throw    new    ArithmeticException(   "Numerator    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
322	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  type  can't  be  negated.  Invalid  decimal  type. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  type  can't  be  negated.  Invalid  decimal  type. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  type  can't  be  negated.  Invalid  decimal  type. ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    decimal    type.   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
323	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type: ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type: ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.    Invalid    decimal    type.   ");    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
324	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator,  0);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator,  0);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator,  0);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    0);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
325	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Invalid  fraction  denominator. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Invalid  fraction  denominator. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Invalid  fraction  denominator. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
326	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Expected  to  be  in  the  range. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Expected  to  be  in  the  range. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator.  Expected  to  be  in  the  range. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    generate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
327	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.  Infinity. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.  Infinity. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator.  Infinity. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    instantiate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
328	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator. ");	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
329	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.MIN_VALUE);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.MIN_VALUE);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.MIN_VALUE);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    intValue);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
330	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
331	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0.5);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0.5);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0.5);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
332	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode,  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode,  denominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
333	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator: "  +  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator: "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
334	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
335	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  int  denominator);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  int  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  int  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:    %s    is    less    than    1   ",    numerator);    	non-compiled	[CE]  	72	None	replace
336	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  int  denominator);  [CE]  '.class'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  int  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  int  denominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  '.class'  expected	81	None	replace
337	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator ",  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator ",  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate  denominator ",  denominator);	  throw    new    ArithmeticException(   "Negative    number:    numerator    can't    negate   ",    denominator);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
338	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator,  can't  negate  denominator, ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator,  can't  negate  denominator, ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator,  can't  negate  denominator, ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
339	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator, ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator, ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator, ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
340	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  expecting  a  value ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  expecting  a  value ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator,  expecting  a  value ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
341	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator,  expecting  a  value ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator,  expecting  a  value ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator,  expecting  a  value ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator,   ");    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
342	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  absoluteValue);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  absoluteValue);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  absoluteValue);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
343	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  Numerator  value. ");  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  Numerator  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  Numerator  value. ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Invalid    numerator    value.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
344	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated:  Invalid  numerator  value. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated:  Invalid  numerator  value. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated:  Invalid  numerator  value. ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.    Invalid    numerator    value.   ");    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
345	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);	  Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
346	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate  integer ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate  integer ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate  integer ");	  throw    new    ArithmeticException(   "Negative    number:    denominator    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
347	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  Integer    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
348	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value:  %s. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value:  %s. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value:  %s. ");	  throw    new    ArithmeticException(   "Numerator    can't    instantiate    zero    value:   ");    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
349	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  value ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  value ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  value ");	  throw    new    ArithmeticException(   "Negative    number:    can't    generate    numerator    value   ");    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
350	[BUG]  [BUGGY]  aughtException.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  aughtException.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	aughtException.throw  new  IllegalArgumentException( " ");	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	66	None	replace
351	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  new  Integer(numerator);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  numerator  =  new  Integer(numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  new  Integer(numerator);	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
352	[BUG]  [BUGGY]  Numerator  <  Integer>  denominator  =  new  Integer(numerator);  [CE]  illegal  start  of  expression  [FE]                            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  Numerator  <  Integer>  denominator  =  new  Integer(numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  denominator  =  new  Integer(numerator);	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
353	[BUG]  [BUGGY]  aughtExceptionHandler(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  aughtExceptionHandler(numerator,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	aughtExceptionHandler(numerator,  denominator);	  if(denominator    ==    Integer.MIN_VALUE)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
354	[BUG]  [BUGGY]  int  desominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  desominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  desominator  =  greatestCommonDivisor(numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    desominator);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
355	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.  Infinity. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.  Infinity. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator.  Infinity. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator.   ");    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
356	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  int  denominator);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  int  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ",  int  denominator);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.    Please    check    that    the    whole    integer    hash    code    is    less    than    1.   ");    	non-compiled	[CE]  	85	None	replace
357	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  numerator  is  less  than  1 ",  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  numerator  is  less  than  1 ",  hashCode);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  numerator  is  less  than  1 ",  hashCode);	  throw    new    ArithmeticException(   "Numerator    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
358	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  numerator  is  less  than  1. ");  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  numerator  is  less  than  1. ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated.  Please  check  that  the  numerator  is  less  than  1. ");	  throw    new    ArithmeticException(   "Numerator    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
359	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  denominator: ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  generate  denominator: ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  generate  denominator: ");	  throw    new    ArithmeticException(   "Numerator    can't    generate    numerator:   ");    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
360	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  negate:  numerator  or  denominator ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  negate:  numerator  or  denominator ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  negate:  numerator  or  denominator ");	  throw    new    ArithmeticException(   "Numerator    can't    negate:   "    +    denominator);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
361	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  ONE;  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  ONE;  }  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  ONE;  }	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    if(denominator    <    0)    {    return    ZERO;    }    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
362	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  denominator  can't  negate  denominator ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  denominator  can't  negate  denominator ");  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  denominator  can't  negate  denominator ");	  throw    new    ArithmeticException(   "Numeric    numerator:    numerator    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
363	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator ",  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator ",  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator ",  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    numerator    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
364	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteDenominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteDenominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteDenominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
365	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteNull,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteNull,  numerator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  absoluteNull,  numerator);	  throw    new    ArithmeticException(   "Undefined    fraction:   "    +    numerator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
366	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {      [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	numerator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
