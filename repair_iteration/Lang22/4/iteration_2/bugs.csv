bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  numerator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: "  +  numerator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
2	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  less  than  1: ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
3	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: ",  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: ",  numerator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1: ",  numerator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
4	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominators  can  not  be  negated. ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
5	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  numerator  value. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  numerator  value. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Invalid  numerator  value. ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  toProperString);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
7	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  numerator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  numerator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
8	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: ",  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: ",  numerator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: ",  numerator);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
9	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
10	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: "  +  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: "  +  denominator);	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
11	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator: ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
12	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  of  denominator  can't  be  negated. ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
13	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.   "  +  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.   "  +  numerator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.   "  +  numerator);	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
14	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);	      Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
15	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	      Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
16	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	      Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
17	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(denominator,  numerator);	      Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
18	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  denominate ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
19	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  hashCode);	      int    denominator    =    greaterCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
20	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  numerator);	      int    denominator    =    greaterCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
21	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);	      int    denominator    =    greaterCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
22	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	      Integer    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
23	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);	      Integer    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
24	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	      Integer    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
25	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);	      Integer    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
26	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  numerator: ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  numerator: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  numerator: ");	  throw    new    ArithmeticException(   "Numerator    can't    negate:   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
27	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  negate: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  negate: "  +  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  negate: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    negate:   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
28	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  zero: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  zero: ");	  throw    new    ArithmeticException(   "Numerator    can't    negate:   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero: ");	  throw    new    ArithmeticException(   "Numerator    can't    negate:   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
31	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  toProperString);	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
32	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  numerator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  numerator);	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
33	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  numerator  value. ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  numerator  value. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  numerator  value. ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
34	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  numeric  value. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  numeric  value. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  numeric  value. ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
35	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greaterCommonDivisor(denominator,  numerator);	      int    denominator    =    greaterCommonDivisor(numerator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
36	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	      int    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
37	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);	      int    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
38	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	      int    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
39	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	      denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
40	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);	      denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
41	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	      denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
42	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	      Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
43	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  0);	      Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
44	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	      Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
45	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ");	  throw    new    ArithmeticException(   "Negative    number:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
46	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  denominator  can't  negate ");	  throw    new    ArithmeticException(   "Negative    number:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
47	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate. ");	  throw    new    ArithmeticException(   "Negative    number:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
48	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ",  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ",  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  numerator  can't  negate ",  denominator);	  throw    new    ArithmeticException(   "Negative    number:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
49	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  numerator);	      int    denominator    =    greatestCommonDivisor(numerator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
50	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);	      int    denominator    =    greatestCommonDivisor(numerator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
51	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  number:  can't  generate  numerator  value ");	  throw    new    ArithmeticException(   "Negative    number:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
52	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'. ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "  +  absoluteNumericValue  + "'  hash  code:  ' "  +  absoluteNumericValue  + "'. ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
53	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  is  less  than  one  denominator. ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  number  of  integers  are  not  in  the  range. ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  intValue);	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName());  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName());  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  getName());	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
57	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Integer  denominator  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Integer  denominator  =  greatestCommonDivisor(denominator,  numerator);	      Integer    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
58	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  denominator: ");	  throw    new    ArithmeticException(   "Numerator    can't    negate:   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
59	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  negate: "  +  denominator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator  can't  negate: "  +  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator  can't  negate: "  +  denominator);	  throw    new    ArithmeticException(   "Numerator    can't    negate:   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
60	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  instantiate  zero  value: ");	  throw    new    ArithmeticException(   "Numerator    can't    negate:   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
61	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);	      int    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
62	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  %s. ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  %s. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  %s. ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  intValue);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  intValue);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' "  +  intValue);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	numerator  =  greatestCommonDivisor(numerator,  denominator);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
65	[BUG]  [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Numerator  whole  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  whole  =  greatestCommonDivisor(numerator,  denominator);	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
66	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	if(denominator  ==  Integer.MIN_VALUE)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
67	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator, ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator, ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  negate  denominator, ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
68	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator. ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
69	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  instantiate  denominator ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
70	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
71	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero. ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  zero. ");	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
72	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  numerator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  numerator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1 ",  numerator);	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
73	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction:  %s  is  less  than  1:  %s. ");	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
74	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	denominator  =  greatestCommonDivisor(denominator,  numerator);	      denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
75	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  desominator);  [CE]  illegal  start  of  type  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  desominator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  desominator);	      int    denominator    =    greatestCommonDivisor(numerator,    numerator);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
76	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type. ");  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  type. ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
77	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated.  Invalid  decimal  integer: ");	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
78	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",' ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",' ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ ",' ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
79	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ "'. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ "'. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  negated.  Integer:  ' "+numerator+ "'. ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
80	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  numerator  can't  negate  denominator ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate    denominator   ");    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
81	[BUG]  [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Numerator  <  Integer>  numerator  =  greatestCommonDivisor(denominator,  numerator);	      Numerator    <    Integer>    numerator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
82	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  generate  denominator: ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  generate  denominator: ");	  throw    new    ArithmeticException(   "Numerator    can't    negate:   ");    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
83	[BUG]  [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]    throw  new  ArithmeticException(   "overflow:  can't  negate   ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	Denominator  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);	      Denominator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
84	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated. ");  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numerator  can't  be  negated. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numerator  can't  be  negated. ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
85	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ");  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominator  can't  be  negated.  Please  check  that  the  whole  integer  hash  code  is  less  than  1. ");	  throw    new    ArithmeticException(   "Number    of    denominator    can't    be    negated.   ");    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
86	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:   "  +  denominator);  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:   "  +  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:   "  +  denominator);	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
87	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' ");  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Number  of  denominators  can  not  be  less  than  1:  ' ");	  throw    new    ArithmeticException(   "Number    of    denominators    can    not    be    less    than    1:   ");    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
88	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator));  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Negative  value  can't  be  negated: "  +  Integer.toString(numerator));	  throw    new    ArithmeticException(   "Negative    value    can't    be    negated:   ");    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
89	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator));  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator));  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator));	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
90	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator));  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator));  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toHexString(numerator));	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
91	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator);  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Undefined  fraction: "  +  Integer.toString(numerator),  denominator);	  throw    new    ArithmeticException(   "Undefined    fraction:   ");    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
92	[BUG]  [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator. ");  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator. ");  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	throw  new  ArithmeticException( "Numeric  numerator:  can't  generate  denominator. ");	  throw    new    ArithmeticException(   "Numeric    numerator:    can't    negate   ");    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
93	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  ZERO;  }  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]    if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  if  (numerator==Integer.MIN_VALUE  ||  denominator==Integer.MIN_VALUE)  {    [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  ZERO;  }  [BUGGY]    }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  return  new  Fraction(numerator,  denominator);  }  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	228	228	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator);  if(denominator  <  0)  {  return  ZERO;  }	      	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
