bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
2	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
3	[BUG]  [BUGGY]  if  (denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if  (denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if  (denominator  <  0  ||  numerator  ==  Integer.MIN_VALUE)  {	  if    (numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
4	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	  int    denominator    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
5	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(denominator,  denominator);	  denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
6	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  numerator);	  denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
7	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	  numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
8	[BUG]  [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  gcd  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	  int    gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
9	[BUG]  [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  gcd  =  greatestCommonDivisor(numerator,  denominator,  numerator);	  int    gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
10	[BUG]  [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                          AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  gcd  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  gcd  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  int    gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
11	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    gcd    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
12	[BUG]  [BUGGY]  null  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  null  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	null  denominator  =  greatestCommonDivisor(numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    numerator    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  not  a  statement	31	None	replace
13	[BUG]  [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  0);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
14	[BUG]  [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  desominator);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
15	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  denominator  =  greatestCommonDivisor(denominator,  denominator);	  Numerator    numerator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
16	[BUG]  [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
17	[BUG]  [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
18	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
19	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  numerator,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
20	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  hashCode);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
21	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  numerator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
22	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
23	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  numerator);	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
24	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
25	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  numerator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  denominator  =  greatestCommonDivisor(numerator,  numerator);	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
26	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
27	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(numerator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
28	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
29	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
30	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  numerator,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
31	[BUG]  [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  numerator  =  greatestCommonDivisor(denominator,  numerator,  denominator);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
32	[BUG]  [BUGGY]  null  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  null  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	null  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    numerator);    gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  not  a  statement	20	None	replace
33	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  gcd);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
34	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greaterCommonDivisor(denominator,  numerator,  hashCode);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
35	[BUG]  [BUGGY]  gcd  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  gcd  =  greatestCommonDivisor(numerator,  denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	gcd  =  greatestCommonDivisor(numerator,  denominator,  numerator);	  gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
36	[BUG]  [BUGGY]  gcd  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  gcd  =  greatestCommonDivisor(numerator,  denominator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	gcd  =  greatestCommonDivisor(numerator,  denominator,  hashCode);	  gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
37	[BUG]  [BUGGY]  gcd  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                        AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  gcd  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	gcd  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
38	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greaterCommonDivisor(denominator,  denominator);	  int    denominator    =    greaterCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
39	[BUG]  [BUGGY]  gcd  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  gcd  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	gcd  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    gcd    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
40	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  numerator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    gcd    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
41	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  desominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
42	[BUG]  [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(numerator  <  =  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >=    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
43	[BUG]  [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(numerator  <  Integer.MIN_VALUE  ||  denominator  >  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >=    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
44	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  >=  Integer.MIN_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >=    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
45	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
46	[BUG]  [BUGGY]  null  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  null  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	null  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    numerator    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  not  a  statement	25	None	replace
47	[BUG]  [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(numerator  ==  Integer.MIN_VALUE  ||  denominator  >  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    >    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
48	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  gcd);  numerator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  gcd);  numerator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  gcd);  numerator  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    numerator    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
49	[BUG]  [BUGGY]  Numerator  desominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  desominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  desominator  =  greatestCommonDivisor(numerator,  denominator);	  Numerator    numerator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
50	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
51	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  desominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  desominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  desominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
52	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  denominator  =  greatestCommonDivisor(numerator,  denominator,  denominator);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
53	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
54	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator,  1);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
55	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(denominator,  numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greaterCommonDivisor(denominator,  numerator,  denominator);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
56	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    numerator);    gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
57	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator);  gcd  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator);  gcd  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  numerator);  gcd  =  greatestCommonDivisor(numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    numerator);    gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
58	[BUG]  [BUGGY]  desominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  desominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	desominator  =  greatestCommonDivisor(numerator,  denominator);	  denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
59	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);  gcd  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);  gcd  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);  gcd  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    gcd    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
60	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  0);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
61	[BUG]  [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greaterCommonDivisor(numerator,  denominator,  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greaterCommonDivisor(numerator,  denominator,  1);	  int    denominator    =    greaterCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
62	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
63	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  gcd,  denominator);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
64	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    numerator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
65	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  numerator  =  greatestCommonDivisor(denominator,  numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	numerator  =  greatestCommonDivisor(denominator,  numerator,  denominator);	  numerator    =    greatestCommonDivisor(numerator,    denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
66	[BUG]  [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(numerator!=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    ==    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
67	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	numerator  =  greatestCommonDivisor(numerator,  denominator,  0);	  numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
69	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  overflow);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  numerator  =  greatestCommonDivisor(numerator,  denominator,  overflow);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	numerator  =  greatestCommonDivisor(numerator,  denominator,  overflow);	  numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
70	[BUG]  [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  gcd  +  1);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    gcd);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
71	[BUG]  [BUGGY]  if  (denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if  (denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if  (denominator  <  =  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (numerator    <    =    Integer.MIN_VALUE    ||    denominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
72	[BUG]  [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Integer  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    gcd    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
73	[BUG]  [BUGGY]  if(denominator  <  0)  {  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);  }  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(denominator  <  0)  {  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);  }  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(denominator  <  0)  {  int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(denominator,  denominator);  }	  int    denominator    =    greatestCommonDivisor(denominator,    numerator);    gcd    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
74	[BUG]  [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  overflow);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  overflow);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator,  overflow);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
75	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  0);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  0);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
76	[BUG]  [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  overflow);  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  denominator  =  greatestCommonDivisor(numerator,  denominator,  overflow);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	denominator  =  greatestCommonDivisor(numerator,  denominator,  overflow);	  denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
77	[BUG]  [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  denominator  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  denominator  =  greatestCommonDivisor(denominator,  numerator);	  Numerator    denominator    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
78	[BUG]  [BUGGY]  gcd  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  gcd  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	gcd  =  greatestCommonDivisor(denominator,  numerator);	  gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
79	[BUG]  [BUGGY]  if  (numerator  ==  0  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if  (numerator  ==  0  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if  (numerator  ==  0  ||  denominator  ==  Integer.MIN_VALUE)  {	  if    (numerator    <    0    ||    denominator    ==    Integer.MIN_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
80	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  gcd);  numerator  =  greatestCommonDivisor(denominator,  denominator);  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  gcd);  numerator  =  greatestCommonDivisor(denominator,  denominator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  gcd);  numerator  =  greatestCommonDivisor(denominator,  denominator);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator);    numerator    =    greatestCommonDivisor(denominator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
81	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(numerator,  denominator  -  1);	  int    denominator    =    greatestCommonDivisor(numerator,    desominator);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
82	[BUG]  [BUGGY]  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {  [BUGGY]      denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(numerator  >=  Integer.MIN_VALUE  ||  denominator  ==  Integer.MAX_VALUE)  {	  if(numerator    <    Integer.MIN_VALUE    ||    denominator    ==    Integer.MAX_VALUE)    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  int  gcd  =  greatestCommonDivisor(denominator,  numerator);  [CE]  illegal  start  of  expression  [FE]                      AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  gcd  =  greatestCommonDivisor(denominator,  numerator);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  gcd  =  greatestCommonDivisor(denominator,  numerator);	  int    gcd    =    greatestCommonDivisor(numerator,    denominator);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
84	[BUG]  [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  Numerator  numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	Numerator  numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  Numerator    numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
85	[BUG]  [BUGGY]  numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	numerator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  numerator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
86	[BUG]  [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      throw  new  ArithmeticException(     "The  denominator  must  not  be  zero     ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {      [BUGGY]  int  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);  [BUGGY]      if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException(     "overflow:  can't  negate     ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	int  denominator  =  greatestCommonDivisor(denominator,  numerator,  hashCode);	  int    denominator    =    greatestCommonDivisor(numerator,    denominator,    hashCode);    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
