bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]  if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if  (denominator  ==  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	if  (numerator==Integer.MIN_VALUE  ||    denominator==Integer.MIN_VALUE)  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
2	[BUG]  [BUGGY]  if  (numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]  if  (numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if  (numerator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	if  (numerator==Integer.MIN_VALUE  ||    denominator==Integer.MIN_VALUE)  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
3	[BUG]  [BUGGY]    [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    [BUGGY]  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	  	if  (numerator==Integer.MIN_VALUE  ||    denominator==Integer.MIN_VALUE)  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
4	[BUG]  [BUGGY]    int  denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    int  denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]  if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	    int  denominator  =  greatestCommonDivisor(numerator,  denominator);		non-compiled	[CE]  cannot  find  symbol	6	None	add
5	[BUG]  [BUGGY]    int  denominator  =  greatestCommonDivisor(numerator,  numerator);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    int  denominator  =  greatestCommonDivisor(numerator,  numerator);  [BUGGY]  if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	    int  denominator  =  greatestCommonDivisor(numerator,  numerator);		non-compiled	[CE]  cannot  find  symbol	6	None	add
6	[BUG]  [BUGGY]    int  denominator  =  greaterCommonDivisor(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    int  denominator  =  greaterCommonDivisor(numerator,  denominator);  [BUGGY]  if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	    int  denominator  =  greaterCommonDivisor(numerator,  denominator);		non-compiled	[CE]  cannot  find  symbol	6	None	add
7	[BUG]  [BUGGY]    int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]  if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	    int  denominator  =  greatestCommonDivisor(numerator,  denominator);  gcd  =  greatestCommonDivisor(numerator,  denominator);		non-compiled	[CE]  cannot  find  symbol	6	None	add
8	[BUG]  [BUGGY]    int  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    int  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]  if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	    int  denominator  =  greatestCommonDivisor(numerator,  denominator);  numerator  =  greatestCommonDivisor(numerator,  denominator);		non-compiled	[CE]  cannot  find  symbol	6	None	add
9	[BUG]  [BUGGY]    numerator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    numerator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]  if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	    numerator  =  greatestCommonDivisor(numerator,  denominator);		non-compiled	[CE]  cannot  find  symbol	6	None	add
10	[BUG]  [BUGGY]    Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]  if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	    Numerator  numerator  =  greatestCommonDivisor(numerator,  denominator);		non-compiled	[CE]  cannot  find  symbol	6	None	add
11	[BUG]  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]  if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {  [BUGGY]  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(denominator  <  Integer.MIN_VALUE  ||  denominator  ==  Integer.MIN_VALUE)  {	if  (numerator==Integer.MIN_VALUE  ||    denominator==Integer.MIN_VALUE)  {  	non-compiled	[CE]  not  a  statement	5	None	replace
12	[BUG]  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]  if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {  [BUGGY]  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	if(denominator  ==  Integer.MIN_VALUE  ||  numerator  ==  Integer.MIN_VALUE)  {	if  (numerator==Integer.MIN_VALUE  ||    denominator==Integer.MIN_VALUE)  {  	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
13	[BUG]  [BUGGY]    denominator  =  greatestCommonDivisor(numerator,  denominator);  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError  [CONTEXT]  throw  new  ArithmeticException( "The  denominator  must  not  be  zero ");  }  if  (numerator==0)  {  return  ZERO;  //  normalize  zero.  }  if  (denominator==Integer.MIN_VALUE  &&  (numerator&1)==0)  {  numerator/=2;  denominator/=2;  }  if  (denominator  <  0)  {  [BUGGY]    denominator  =  greatestCommonDivisor(numerator,  denominator);  [BUGGY]  if  (numerator==Integer.MIN_VALUE  ||      denominator==Integer.MIN_VALUE)  {  denominator==Integer.MIN_VALUE)  {  throw  new  ArithmeticException( "overflow:  can't  negate ");  }  numerator  =  -numerator;  denominator  =  -denominator;  }  int  gcd  =  greatestCommonDivisor(numerator,  denominator);  numerator  /=  gcd;  denominator  /=  gcd;  [CLASS]  Fraction  [METHOD]  getReducedFraction  [RETURN_TYPE]  Fraction  int  numerator  int  denominator  [VARIABLES]  Fraction  FOUR_FIFTHS  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  String  toProperString  toString  boolean  long  numeratorValue  serialVersionUID  int  denominator  gcd  hashCode  numerator  whole  	projects/Lang22/src/main/java/org/apache/commons/lang3/math/Fraction.java	0.7071067811865475	226	227	2	replace	    denominator  =  greatestCommonDivisor(numerator,  denominator);		non-compiled	[CE]  illegal  start  of  expression	6	None	add
